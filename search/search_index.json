{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to WLED MoonModules & Sound Reactive","text":""},{"location":"#welcome-to-wled-moonmodules","title":"Welcome to WLED MoonModules","text":"<p>MoonModules/WLED is a fork from Aircoookie/WLED which contains latest merge of v0.14 of WLED with additional features.</p> <p>This fork is created by members of the Atuline/WLED team to make development against v0.14 possible while still preserving Atuline/WLED v0.13 as a stable and supported version. The Atuline/WLED fork is also called WLED SR (Sound Reactive).</p> <p>More info here.</p>"},{"location":"#good-to-know","title":"Good to know","text":"<ul> <li>Aircoookie/WLED will be referred to as WLED AC or upstream in this documentation</li> <li>MoonModules/WLED will be referred to as WLED MM in this documentation</li> <li>Atuline/WLED will be referred to as WLED SR in this documentation (As this was called WLED Sound Reactive)</li> <li>This documentation is a fork of WLED AC documentation (kno.wled.ge)</li> <li>The menu options Welcome, Basics, Features, Interfaces, Advanced and About originate from upstream</li> <li>The menu options Usermods, MoonModules, 2D, Sound Reactive and WLEDSR are added</li> <li>Usermods are the readme.md files of usermods and will move to upstream (see https://github.com/Aircoookie/WLED/pull/2965)</li> <li>WLEDSR is a 1:1 copy of WLED SR Wiki and will slowly moved to menu items more to the left (updated to 0.14 functionality)</li> <li>MoonModules, 2D and SoundReactive might also be moved to the left, depending on how upstream will organise these topics</li> <li>To see where this documantation differs from upstream documentation the following icons will be used in Welcome, Basics, Features, Interfaces, Advanced and About:\ud83c\udf1c: Specific to WLED MM, \ud83c\udfb8: Specific to WLED SR</li> <li>Hint: search on \ud83c\udf1cor \ud83c\udfb8 to find WLED MM or AC specific info</li> </ul> <p>Disclaimer: using this software is the users responsibility as it is not bug free. Therefore contributors of this repo are not reliable for anything including but not limited to spontaneous combustion of the entire led strip, the house and the inevitable heat death of the universe</p> <p>Join the Discord server to discuss everything about WLED MM and SR!</p> <p></p> <p>WLED Aircoookie welcome \ud83d\udc47</p>"},{"location":"#welcome-to-my-project-wled","title":"Welcome to my project WLED! \u2728","text":"<p>A fast and feature-rich implementation of an ESP8266/ESP32 webserver to control NeoPixel (WS2812B, WS2811, SK6812) LEDs or also SPI based chipsets like the WS2801 and APA102!</p>"},{"location":"#features","title":"\u2699\ufe0f Features","text":"<ul> <li>WS2812FX library integrated for over 100 special effects  </li> <li>FastLED noise effects and 50 palettes  </li> <li>Modern UI with color, effect and segment controls  </li> <li>Segments to set different effects and colors to parts of the LEDs  </li> <li>Settings page - configuration over network  </li> <li>Access Point and station mode - automatic failsafe AP  </li> <li>Up to 3 LED outputs per ESP8266 instance and 10 LED outputs per ESP32 instance</li> <li>Support for RGBW strips  </li> <li>Up to 250 user presets to save and load colors/effects easily, supports cycling through them.  </li> <li>Presets can be used to automatically execute API calls  </li> <li>Nightlight function (gradually dims down)  </li> <li>Full OTA software updatability (HTTP + ArduinoOTA), password protectable  </li> <li>Configurable analog clock + support for the Cronixie kit by Diamex  </li> <li>Configurable Auto Brightness limit for safer operation  </li> <li>Filesystem-based config for easier backup of presets and settings</li> <li>Native Home-Assistant integration: </li> </ul>"},{"location":"#supported-light-control-interfaces","title":"\ud83d\udca1 Supported light control interfaces","text":"<ul> <li>WLED app for Android and iOS</li> <li>JSON and HTTP request APIs  </li> <li>MQTT </li> <li>Blynk IoT </li> <li>E1.31, Art-Net, DDP and TPM2.net</li> <li>Hyperion</li> <li>UDP realtime</li> <li>Alexa voice control (including dimming and color)</li> <li>Sync to Philips Hue lights</li> <li>Adalight (PC ambilight via serial) and TPM2  </li> <li>Sync color of multiple WLED devices (UDP notifier)</li> <li>Infrared remotes (24-key RGB, receiver required)</li> <li>Simple timers/schedules (time from NTP, timezones/DST supported)  </li> </ul>"},{"location":"#quick-start-guide-and-documentation","title":"\ud83d\udcf2 Quick start guide and documentation","text":"<p>See the getting started page!</p> <p>On this page you can find excellent tutorials made by the community and helpful tools to help you get your new lamp up and running!</p>"},{"location":"#user-interface","title":"\ud83d\uddbc\ufe0f User interface","text":""},{"location":"#compatible-hardware","title":"\ud83d\udcbe Compatible hardware","text":"<p>See here!</p>"},{"location":"#other","title":"\u270c\ufe0f Other","text":"<p>Licensed under the MIT license Credits here!</p> <p>Join the Discord server to discuss everything about WLED!</p> <p></p> <p>Check out the WLED Discourse forum! You can also send me mails to dev.aircoookie@gmail.com, but please only do so if you want to talk to me privately. If WLED really brightens up your every day, you can </p> <p>Disclaimer</p> <p>If you are sensitive to photosensitive epilepsy it is not recommended that you use this software. In case you still want to try, don't use strobe, lighting or noise modes or high effect speed settings. As per the MIT license, I assume no liability for any damage to you or any other person or equipment.  </p>"},{"location":"2D/wip/","title":"Work in Progress","text":"<p>This page is work in progress</p> <p>Check WLED Atuline Wiki for original content</p> <p>Template text:</p>"},{"location":"2D/wip/#fork-specific-info","title":"Fork specific info","text":""},{"location":"2D/wip/#wled-sr","title":"WLED SR","text":""},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/","title":"(temporary) WLEDSR improvements and bugfixes from 0.13.2 to 0.13.3","text":""},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#user-interface-and-generic-features","title":"User Interface and generic features","text":"<ul> <li>Info Page: status info for soundreactive (similar to upstream 0.14.0)</li> <li>Info Page: basic hardware info added (similar to MoonModules 0.14.0)</li> <li>4 Line Display and 4LD_alt usermod: always use fast I2C hardware driver</li> </ul>"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#audio-processing","title":"Audio Processing","text":"<ul> <li>Analog input: Some improvements - might help in case you could not get analog input to work in SR 0.13.2</li> <li>New sound processing core (ArduinoFFT) is 10 times faster!</li> <li> <ul> <li>improves performance of both analog and I2S digital audio input</li> </ul> </li> <li> <ul> <li>NB: This also improves co-existence with other usermods and with additional features like MQTT</li> </ul> </li> </ul>"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#udp-sound-sync","title":"UDP sound sync","text":"<ul> <li>improve performance/reliability of UDP sound sync</li> <li>Support for receiving \"V2\" format, which is sent by upstream 0.14.0 </li> </ul>"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#effects","title":"Effects","text":"<ul> <li>Minor bugfixes, like missed pixels in \"Stream\" effects, and a few speedups</li> <li>Sanity check added in setPixelColor(), to avoid memory errors due to negative pixel index</li> <li> <ul> <li>NB: this change also affects realtime modes (DDP, DMX, E13.1, LedFx, ...)</li> </ul> </li> </ul>"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#arti-fx-2d3d-live-preview","title":"ARTI-FX, 2D/3D, live preview","text":"<ul> <li>Liveviewws2D: show playlist / preset id (for HB playlist animations)</li> <li>ARTI-FX 3.0.1: add rgbw, sPC for 2D, colorFromPalette out of sPC</li> <li>Peek1D for strip repaired. Peek3D for cubes added (experimental)</li> <li>Fix setPixelColor when using grid+Serpentine</li> </ul>"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#misc-bugfixes-and-fixes-from-upstream-wled-0140","title":"misc. bugfixes, and fixes from upstream WLED 0.14.0","text":"<ul> <li>auto-reboot after cfg.json restore (to avoid that WLED directly overwrites them after upload)</li> <li>Time Zones: added PKT (Pakistan), fixed NZ and AEST (Australia) time zones</li> <li>buttons: fix for ShortPressAction; ensure that buttons remain responsive also with long LED strings</li> <li>analog buttons: don't do analogRead() when the GPIO does not support analog input</li> <li>udp driver(udp.cpp): small bugfixes</li> <li>PlatformIO.ini: upgrade to fixed ESPAsyncWebServer (&gt;= 2.0.7); </li> <li>PlatformIO.ini: use 80MHz FLASH speed for all \"Sondreactive\" build environments.</li> </ul>"},{"location":"WLEDSR/%28temporary%29-WLEDSR-improvements-and-bugfixes-from-0.13.2-to-0.13.3/#changes-from-upstream-v0133","title":"Changes from upstream v0.13.3","text":"<ul> <li>Fixed flickering</li> <li>Fixed boot issues on new installs</li> <li>Added support for LPD6803</li> <li>experimental: optional watchdog feature, to auto-reboot a \"hung\" device. Compile with <code>-D WLED_WATCHDOG_TIMEOUT=30</code> to activate</li> </ul>"},{"location":"WLEDSR/2D-Functionality/","title":"2D Functionality","text":""},{"location":"WLEDSR/2D-Functionality/#2d-functionality","title":"2D functionality","text":"<ul> <li>An <code>XY()</code> function which returns the index number of the X-Y coordinate on the matrix has been added.</li> <li>The origin (x=0,y=0) is at the top left of the display, with X axis extending to the right, Y axis toward the bottom.</li> <li>The LED order starts from 0 at the top left, and ascends to the right on the top row.</li> <li>2D addressing is leds[XY(column, row)]</li> <li>A serpentine/zig-zag setting has been added to 'LED Settings'.</li> <li>With serpentine mode enabled, the led index on every odd row (top row is row 0) is ascending from right to left, and on even rows is ascending from left to right</li> <li>The opposite of serpentine is \"progressive\", where all rows are oriented in ascending order from left to right</li> </ul> <p>As documented in FastLED, leds[0] should end up being at the top left of your array:</p> <pre><code>Don't enable serpentine setting if your pixels are\nlaid out all running the same way, like this:\n\n    0 &gt;  1 &gt;  2 &gt;  3 &gt;  4\n                        |\n    .----&lt;----&lt;----&lt;----'\n    |\n    5 &gt;  6 &gt;  7 &gt;  8 &gt;  9\n                        |\n    .----&lt;----&lt;----&lt;----'\n    |\n   10 &gt; 11 &gt; 12 &gt; 13 &gt; 14\n                        |\n    .----&lt;----&lt;----&lt;----'\n    |\n   15 &gt; 16 &gt; 17 &gt; 18 &gt; 19\n\nEnable serpentine setting if your pixels are\nlaid out back-and-forth, like this:\n\n    0 &gt;  1 &gt;  2 &gt;  3 &gt;  4\n                        |\n                        |\n    9 &lt;  8 &lt;  7 &lt;  6 &lt;  5\n    |\n    |\n   10 &gt; 11 &gt; 12 &gt; 13 &gt; 14\n                       |\n                       |\n   19 &lt; 18 &lt; 17 &lt; 16 &lt; 15\n</code></pre> <ul> <li><code>matrixWidth</code> and <code>matrixHeight</code> are new 'LED Settings'.</li> <li><code>matrixWidth</code> is the number of pixels per row.</li> <li><code>matrixHeight</code> is the number of pixels per column.</li> <li>Some existing animations (as of Jan 2021) were coded for different orientations and need to be redone to match the newly agreed to orientation described above.</li> <li>It's likely that there will at least a minor change in animations required to support a non-rectangular or non-contiguous mapping.</li> </ul>"},{"location":"WLEDSR/2D-Functionality/#xy-routine-update","title":"XY() routine update","text":"<p>The dev branch has a new XY() function (thanks Sutaburosu) in FX.cpp, which supports multiple layouts.</p> <p>There are 5 orientation flags as follows:</p> <ul> <li>SERPENTINE - Select if your layout is serpentine. Otherwise, it's not.</li> <li>ROWMAJOR   - Select if your layout is horizontal. De-select if it's vertical.</li> <li>FLIPMAJOR  - Flip the major axis, ie top to bottom if it's a horizontal layout.</li> <li>FLIPMINOR  - Flip the minor axis, ie left to right if it's a horizonal layout.</li> <li>TRANSPOSE  - Swap the major and the minor axes (otherwise no swap). Don't use on non-square.</li> </ul> <p>By comparison, the author's aliexpress purchased 16x16 array needs to be configured as:</p> <pre><code>Serpentine | Rowmajor | Flipmajor\n</code></pre> <p>Note: When an X,Y value goes out of bounds, this routine writes to an LED beyond SEGLEN, and as a result, we need to use the setPixels() routine to write to the display.</p> <p>Note: Working with this can be confusing, so here's a simulator you can play around with to get familiar with XY()  at Wokwi.</p>"},{"location":"WLEDSR/2D-Functionality/#multiple-panels-202106dev","title":"Multiple panels (202106/dev)","text":"<p>When you want to create larger matrices, the standard available panels are not big enough. They typically are 16x16 or 8x32 pixels. To support large matrices, they should be connected together. This is now supported in WLED SR (currently in dev version). Multiple panels can be specified in the LED-Preferences screen by checking Multiple Panels and then defining the number of horizontal and vertical panels. First panel should be top left, extending to the right, the extending down, until bottom right.</p> <p>For example if you create a 32x32 matrix by connecting 4 8x32 panels together you have 4 horizontal panels and 1 vertical panel. Alternatively if you have 4 16x16 panels, you have 2 horizontal and 2 vertical panels. In the latter case, panel ordering is:</p> <p>0   1</p> <p>2   3</p> <p>The XY() function supports this by first determining in which panel an (x,y) coordinate should be displayed and then within a panel it's position is determined as described above (using flipmajor, serpentine etc.).</p> <p>In the 8x32 example above, 0&lt;x&lt;8 is displayed in the first panel, 8&lt;x&lt;16 in the second panel and so on. For each panel, the first led number is calculated. E.g. if each panel has 256 leds then the second panel first led is led[256]. The values of x and y are then corrected by the width and the height of the panel to find the place within the panel (major and minor values)</p>"},{"location":"WLEDSR/2D-Support/","title":"2D Support","text":""},{"location":"WLEDSR/2D-Support/#introduction","title":"Introduction","text":"<p>In order to accommodate 2D effects we have modified how Segment settings are used and added 2D Matrix and panel variables on the Led Preferences settings. Note: Currently only working in dev. You are invited to test this and give feedback on Beta testing discord channel</p>"},{"location":"WLEDSR/2D-Support/#2d-architecture","title":"2D architecture","text":"<p>WLED SR distinguishes between the following levels * 2D Segment (dev) * 2D Matrix (dev) * 2D Panel (dev)</p> <p>An effect is plotted on a segment. A segment is a rectangle on a matrix (logical level). A matrix is implemented by one or more identical led panels,  with a specific layout (e.g. first led bottom left, serpentine, physical level).</p> <p>Note: 2D effects can also be projected on a 1D LED Strip instead of a 2D Panel. e.g. for a led strip of 144 leds you can define width=height=12 and each zone of 12 leds is a row of a matrix. Rows are then side by side instead of above each other. Some 2D effects, e.g. graphic equalizer look still pretty cool on strips (as is the other way around with 1D effects on a 2D matrix like NoiseMove or Sparkle).</p>"},{"location":"WLEDSR/2D-Support/#2d-segments","title":"2D Segments","text":"<p>As WLED supports multiple segments, all effects and therefore also 2D effects are first projected on a segment. In 1D, a segment is a zone on a LED strip and is specified by Start Led and a Stop Led (note that Stop Led is one led after the last led in the segment).</p> <p>In 2D, a segment is a rectangle on a 2D matrix and 2D effects plot on this rectangle using x,y coordinates of the SEGMENT. A rectangle can be defined in the Segment UI where the start led specifies the top-left and the stop led specifies the bottom-right of the rectangle. Multiple segments can be specified this way. Segments can overlap. In fact overlapping creates very nice effects.</p> <p>See Segment start stop charts to easy find matrix start and stop values</p>"},{"location":"WLEDSR/2D-Support/#rotation-and-reversexy","title":"Rotation and ReverseX/Y","text":"<p>A segment can be rotated 90\u00ba degrees and reversed on the X or Y-axis and can be specified in the Segment-UI. The SegmentRotation branch of dev supports this and is currently in beta-test. This will move to dev and release over time.</p> <p>The following table shows the effect setting these values:</p> Value Rotation Reverse X Reverse Y Effect 0 - - - 0\u00ba rotation and no reverse 1 - - + Reverse horizontal 2 - + - Reverse vertical 3 - + + 180\u00ba rotation 4 + - - 90\u00ba rotation 5 + - + 90\u00ba and reverse horizontal 6 + + - 90\u00ba and vertical 7 + + + 270\u00ba rotation"},{"location":"WLEDSR/2D-Support/#2d-matrices-and-panels","title":"2D Matrices and panels","text":"<p>See Led Preferences</p>"},{"location":"WLEDSR/2D-Support/#technical","title":"Technical","text":"<ul> <li>CRGB leds[MAX_LEDS+1]; in FX.cpp defines all leds on the matrix. Multiple segments share this array and effects should only write to leds[] within the boundaries of a segment. This is done by calling leds[XY(x,y)] or leds[realPixelIndex(i)].</li> <li>Functions with leds as parameter should follow above rule and have been refactored for this. E.g. fadeToBlackBy(leds, 32) or fill_solid(leds, 0) otherwise it writes outside the segment boundaries. </li> </ul>"},{"location":"WLEDSR/2D-Support/#2d-segment-start-stop-charts","title":"2D Segment start stop charts","text":""},{"location":"WLEDSR/2D-Support/#16x16-matrix","title":"16x16 matrix","text":""},{"location":"WLEDSR/2D-Support/#32x32-matrix","title":"32x32 matrix","text":"<p> (Created by Harry Baas)</p>"},{"location":"WLEDSR/2D-Support/#examples","title":"Examples","text":""},{"location":"WLEDSR/2D-Support/#16x16-matrix_1","title":"16x16 matrix","text":"<p>To get the (x,y) coordinates from the start and stop led: * Segment top left = (start%matrixWidth, start/matrixWidth) * Segment bottom right = (stop%matrixWidth, stop/matrixWidth)</p> <p>Example of 1 segment (default) covering a whole 16x16 matrix: * start = 0, stop = 255 * top left = (0,0) * bottom right = (15,15) * width = height = 16</p> <p>Example of a segment covering a middle part rectangle of the 16x16 matrix: * start = 20, stop = 235 * top left = (4,1) * bottom right = (10,14) * width = 7 * height = 14</p> <p>Example of a segment covering the left part of the 16x16 matrix: * start = 0, stop = 241 * top left = (0,0) * bottom right = (0,15) * width = 1 * height = 16</p>"},{"location":"WLEDSR/2D-Support/#16-x-12-matrix","title":"16 x 12 matrix","text":"<p>matrixWidth = 16, matrixHeight = 12.</p> <p>Total led count 192 leds</p> <p>left and right binmap effect. In the middle noisemove.</p> <ul> <li>Segment 0 (middle): start=1, stop=191, effect=noisemove</li> <li>Segment 1 (left): start=0, stop=176, effect=binmap</li> <li>Segment 2 (right): start=15, stop=192, effect=binmap</li> </ul>"},{"location":"WLEDSR/2D-Support/#api-commands-for-2d-effects","title":"Api commands for 2D effects","text":""},{"location":"WLEDSR/2D-Support/#16-segments-for-32x32-matrices","title":"16 segments for 32x32 matrices","text":"<p>Add the following Api command into a preset. This will show the Saw effect rotated and reversed in 16 8*8 segments. </p> <p>After that you, if you select all 16 segments and select another effect, this effect will also be populated to all 16 segments, resulting in surprising new effects</p> <p><code>{\"on\":true,\"bri\":89,\"transition\":7,\"mainseg\":0,\"seg\":[{\"id\":0,\"start\":0,\"stop\":232,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":1,\"start\":8,\"stop\":240,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":2,\"start\":16,\"stop\":248,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":3,\"start\":24,\"stop\":256,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":4,\"start\":256,\"stop\":488,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":5,\"start\":264,\"stop\":496,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":6,\"start\":272,\"stop\":504,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":7,\"start\":280,\"stop\":512,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":8,\"start\":512,\"stop\":744,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":9,\"start\":520,\"stop\":752,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":10,\"start\":528,\"stop\":760,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":11,\"start\":536,\"stop\":768,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":false,\"mi\":false,\"rot2D\":false},{\"id\":12,\"start\":768,\"stop\":1000,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":13,\"start\":776,\"stop\":1008,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":14,\"start\":784,\"stop\":1016,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":false,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"id\":15,\"start\":792,\"stop\":1024,\"grp\":1,\"spc\":0,\"on\":true,\"bri\":255,\"col\":[[255,0,0],[59,42,27],[0,0,255]],\"fx\":16,\"sx\":47,\"ix\":142,\"f1x\":89,\"f2x\":74,\"f3x\":111,\"pal\":12,\"sel\":true,\"rev\":true,\"rev2D\":true,\"mi\":false,\"rot2D\":false},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0},{\"stop\":0}]}</code></p>"},{"location":"WLEDSR/A-question-on-leds%5Bi%5D-in-FastLED/","title":"A question on leds[i] in FastLED","text":"<p>In order to be able to use leds[i] in WLED, we add the following global variable:</p> <pre><code>uint32_t ledData[MAX_LEDS];                 // See const.h for a value of 1500.\n</code></pre> <p>In many routines, we are adding the following code so that we don't have lossy data when copying led information from one element to the next:</p> <pre><code>  CRGB *leds = (CRGB*) ledData;\n\n  // leds[i] code in here\n\n  setPixels(leds);\n  return FRAMETIME;\n</code></pre> <p>This works with SEGMENTS in that two different animations don't clash. The questions I have are:</p> <ul> <li>Am I lucky that they don't clash, in that maybe one routine just overwrites the other in the same memory space?</li> <li>Or are we creating a new array of [MAX_LEDS] for each segment.</li> </ul> <p>If the latter, would that not be very inefficient, and if inefficient, would it not make more sense to use:</p> <pre><code> if (!SEGENV.allocateData(sizeof(CRGB)*SEGLEN)) return mode_static(); //Allocates based on the size of a CRGB\n  CRGB* leds = reinterpret_cast&lt;CRGB*&gt;(SEGENV.data);\n\n  // leds[i] code in here\n\n  setPixels(leds);\n  return FRAMETIME;\n</code></pre> <p>That being said, an associate with embedded system support says that dynamic memory allocation is NOT a good thing to perform on embedded systems.</p> <p>Thoughts?</p> <p>In the meantime, and I quote: \"When allocating memory the danger is always that that memory isn't deallocated properly, and thus leaks memory. Running out of RAM happens very fast on embedded devices that's why it's discouraged.\"</p>"},{"location":"WLEDSR/Adding-Sliders/","title":"Sliders in WLED","text":""},{"location":"WLEDSR/Adding-Sliders/#introduction","title":"Introduction","text":"<p>This page provides WLED programmers information on adding another slider to WLED. This information is not yet complete, as it doesn't yet deal with icons, EEPROM or IR. I will also be researching how to programmatically show/hide these sliders.</p>"},{"location":"WLEDSR/Adding-Sliders/#updating-html_uih","title":"Updating html_ui.h","text":"<p>Please see https://mm.kno.wled.ge/WLEDSR/Modifying-Sound-Reactive-WLED on how to generate html_ui.h since the UI was changed in v0.10.0-alpha-lw.</p> <p>The information below describes the way html_ui.h was generated before the UI change and is deprecated.</p> <p>This file is compressed and is taken from data\\index.htm. Please see Aircoookie's page on 'adding your own effect:</p> <p>https://github.com/Aircoookie/WLED/wiki/Add-own-functionality</p> <p>To serve your changes by the internal webserver, you will need to follow these or similar steps to gzip compress the index.html file:</p> <ol> <li>Gzip compress the file. I use this online converter, use setting Compress this file, output \u2013 gz</li> <li>Rename file to xxx.gz.png (change file type to image)</li> <li>Convert it to a C-style byte/char array. I use this converter, intended for image sprites. Therefore, the previous step of changing the file format was neccessary. Select Raw as Color format.</li> <li>Open the downloaded .c file in a text editor, e. g. Notepad++. Select the contents of the array and replace the array contents in html_ui.h with them.</li> <li>Update PAGE_index_L to the binary size stated in the bottom of the downloaded .c file Recompile and flash WLED!</li> </ol> <p>Here's a link to my Google document containing the changes required:</p> <p>https://docs.google.com/document/d/1m6dm3O_aXgJLGDJfM6E-4CHzzvU8bsaHqrs7VmisYko/edit</p>"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/","title":"Adding a new Settings Page","text":""},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#introduction","title":"Introduction","text":"<p>This page outlines the methods we used and the files that must be modified to add a Sound Settings page to the WLED UI.</p>"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#new-settings_soundhtm","title":"NEW settings_sound.htm","text":"<p>I first added a new file in the data folder named <code>settings_sound.htm</code>. I did a copy/paste from <code>settings_leds.htm</code> to have a base for the new settings page. Let's break down this file. * At the top, we have our standard HTML beginning lines with the TITLE of the page between the <code>&lt;title&gt;</code> tags. * Inside of the <code>&lt;script&gt;</code> tags we have a few functions that are necessary for the page to function. * <code>function H()</code> is our help button function. When called, the UI will direct you to the relevant wiki page inside the <code>window.open()</code> function. * <code>function B()</code> is our back button function. When called, the UI will direct you to the previous main settings page via <code>window.open(\"/settings\",\"_self\")</code>. * <code>function GetV()</code> injects the values from the relevant settings stored in EEPROM to the settings page. * Inside the <code>&lt;style&gt;</code> tag we <code>@import</code> the relevant <code>style.css</code> file. This closes our <code>&lt;head&gt;</code> tag. * When the body of the page is loaded, function <code>GetV()</code> is called. This can vary depending on the functions that need to be called when the page loads. * Inside the <code>&lt;body&gt;</code> tag we have our form. This form holds the layout for the settings page.    * Our squelch and gain settings have the names \"SQ\" and \"GN\" respectively. These names refer to the name given to the setting in <code>xml.cpp</code> and are used to retrieve and save these settings from/to EEPROM.</p>"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#modify-settingshtm","title":"Modify settings.htm","text":"<p>This file holds the settings page button layout. We want to add an entry so we can access our new settings page. This was pretty straight forward. I added the following line, in the position I wanted it to appear on the page, using the previous entries as an example. <pre><code>&lt;form action=\"/settings/sound\"&gt;&lt;button type=\"submit\"&gt;Sound Settings&lt;/button&gt;&lt;/form&gt;\n</code></pre> I also made some changes to the style of the buttons so they all show on the same page. This was not necessary but I feel it gave a more polished look.</p>"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#modify-xmlcpp","title":"Modify xml.cpp","text":"<p>This is our map, so to speak. Each setting is given a unique 2 character string that will be used to reference it in the UI. In our case, \"SQ\" and \"GN\". This file is also the map for the XML response when querying the API. Our settings aren't used in the API at this time so I won't go into that right now.</p> <p>There are two important functions in xml.cpp that relates to our task which are <code>void sappend()</code> and <code>void sappends()</code> * <code>sappend()</code> takes a numeric setting and appends it to the string buffer. Valid cases for this function are:   * 'c', a check box   * 'v', a numeric value   * 'i', the selected index * <code>sappends()</code> takes a string setting and appends it to the string buffer. Valid cases for this function are:   * 's', a string setting   * 'm', a message to be displayed</p> <p>Around line 192 in xml.cpp we have the function <code>getSettingsJS()</code> which retrieves the settings values from EEPROM based on the current sub-page which is defined in wled_server.cpp.</p> <p>We want to add a sub-page so we need to change the following line from <code>if (subPage &lt;1 || subPage &gt;7)</code> to <code>if (subPage &lt;1 || subPage &gt;8)</code>. At the end of this function, after the last sub-page (previously 7) we have the following code block around line 522: <pre><code>if (subPage == 8)\n{\nsappend('v',\"SQ\",soundSquelch);\nsappend('v',\"GN\",sampleGain);\n}\n</code></pre> Here we can see our SQ and GN settings are loaded from EEPROM and filled in to their respective form field using the v case from the <code>sappend()</code> function.</p>"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#modify-setcpp","title":"Modify set.cpp","text":"<p>This file handles storing the settings entered into EEPROM. Similar to xml.cpp, we want to add a settings page so we need to tell WLED there is an additional page in the <code>handleSettingsSet()</code> function. I changed the following line from <code>if (subPage &lt;1 || subPage &gt;7) return;</code> to <code>if (subPage &lt;1 || subPage &gt;8) return;</code>. </p> <p>Lastly, I added the following code block after the last defined sub-page around line 361: <pre><code>//SOUND SETTINGS\nif (subPage == 8)\n{\nint t;\nt = request-&gt;arg(\"SQ\").toInt();\nif (t &gt; 0) soundSquelch = t;\nt = request-&gt;arg(\"GN\").toInt();\nif (t &gt; 0) sampleGain = t;\n}\n</code></pre></p>"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#modify-wled_servercpp","title":"Modify wled_server.cpp","text":"<p>This file serves the webpage for the WLED frontend. We want to add a settings page so we will add the following block of code around line 82, using the previous block as an example. Notice the sub-page defined in xml.cpp is referenced as well as the NEW setting page URL defined in settings.htm. <pre><code>// add sound settings page\nserver.on(\"/settings/sound\", HTTP_POST, [](AsyncWebServerRequest *request){\nhandleSettingsSet(request, 8);\nserveMessage(request, 200,F(\"Sound settings saved.\"),\"Redirecting...\",1);\n});\n</code></pre> In the <code>serveSettings()</code> function around line 383 we need to add <code>else if (url.indexOf(\"sound\")&gt; 0) subPage = 8;  // add sound settings page</code>, so the webserver knows to load those settings. </p> <p>And finally we need to add a case around line 406 for our new sub-page like this <code>case 8:   request-&gt;send_P(200, \"text/html\", PAGE_settings_sound, settingsProcessor); break;</code>.</p>"},{"location":"WLEDSR/Adding-a-Sound-Settings-page-to-the-UI/#modify-cdatajs","title":"Modify cdata.js","text":"<p>Finally, we need to add our new settings page to <code>cdata.js</code> in the tools folder. This file holds the framework for modifying the compressed <code>*.h</code> files that serve the WLED frontend. This is the file nodejs looks to when running <code>npm run build</code> to compress the <code>*.htm</code> files in the data folder into <code>*.h</code> files which are compiled with the firmware.</p> <p>I used the previous entries as an example and added the following code block around line 243: <pre><code>{\nfile: \"settings_sound.htm\",\nname: \"PAGE_settings_sound\",\nprepend: \"=====(\",\nappend: \")=====\",\nmethod: \"plaintext\",\nfilter: \"html-minify\",\nmangle: (str) =&gt;\nstr\n.replace(/\\&lt;link rel=\"stylesheet\".*\\&gt;/gms, \"\")\n.replace(/\\&lt;style\\&gt;.*\\&lt;\\/style\\&gt;/gms, \"%CSS%%SCSS%\")\n.replace(\n/function GetV().*\\&lt;\\/script\\&gt;/gms,\n\"function GetV() {var d=document;\\n\"\n),\n},\n</code></pre></p> <p>Those are the steps I took to modify the WLED settings pages and add a page for the sound reactive related settings in the UI. Once those were completed, I ran <code>npm install</code> and <code>npm run build</code> to compress the new UI and include it in the firmware. After compiling the new firmware, I needed to reset the EEPROM via <code>http://WLED/settings/sec?</code> -&gt; Factory reset.</p>"},{"location":"WLEDSR/Analog-Audio-Input-Options/","title":"Analog Audio Input Options","text":""},{"location":"WLEDSR/Analog-Audio-Input-Options/#microphone-input","title":"Microphone Input","text":"<p>Generally we recommend using I2S digital sound input - like INMP441, SPH0645,  ICS-43434, or PDM I2S microphones.  Additionally there are solutions for line-in via I2S. For example, boards/shields with \"es7243\" chip should work already (we have a special driver for these), and we're investigating \"es8388\".</p> <p></p> <p>Below are a number of popular Arduino compatible analog microphones that have been tested.</p> Model Compatibility Notes MAX9814 Good+ Best to set the gain to 40dB. MAX9812 Fair Only 20dB gain, but worked OK. MAX4466 bad Is very sensitive to 3.3V noise and voltage dropout due to Wifi activity. Avoid powering your LED strip from ESP32, as the strip causes a lot of noise on the 3.3V/5V power lines. INMP401 Good Some Chinese ones are not reliable. Clap Sensors (LM393, KY-038, KY-037) unusable these sensors may have an \"analogue output\" but the signal quality is extremely poor. Don't use them as a microphone, they were designed for other purposes. <p>See also </p> <p>\u21d2 Sound setting examples for common microphones</p> <p>\u21d2 noise and spikes on analog microphones</p> <p>If you are using the MAX9814, you need to connect gain to vdd to set the gain to 40dB as the default 60db has far too much background noise. </p>"},{"location":"WLEDSR/Analog-Audio-Input-Options/#dont-waste-your-money-on-cheapest-hardware","title":"Don't waste your money on cheapest hardware","text":"<p>Important: there are some inexpensive sound sensors you can buy from Aliexpress or elsewhere (such as LM393, KY-038 or KY-037). Typically these have an on/off output only (detecting \"sound\" or \"silence\"), sometimes there is an additional \"analog data out\" with very low quality. They may or may not work adequately. For more information on our microphone test results, see our Arduino Compatible Microphones document.</p>"},{"location":"WLEDSR/Analog-Audio-Input-Options/#use-squelch","title":"Use Squelch","text":"<p>If the LED's are active when the ambient volume is low while running volume only effects beginning with a single '*', you can increase the background noise filtering (or squelch) by navigating to the 'Config | Sound Settings' and increase the Squelch value. You can also make it more sensitive by lowering that Squelch value. In addition, there is a gain setting, which is required especially for the much lower signal level provided by the line-in configuration. Gain, Squelch and AGC are affecting all soundreactive, volumereactive and frequency (FFT) reactive effects.</p>"},{"location":"WLEDSR/Analog-Audio-Input-Options/#good-to-know","title":"good to know","text":"<p>Note 1: Do NOT connect input devices to 5V (or Vin). The power should be connected to the 3.3V pin.</p> <p>Note 2: A piezo vibration sensor (from aliexpress) was successfully hooked up and tested. This piezo hack is not possible any more, as piezo impulses would be filtered out as random noise.</p> <p>Note 3: On the ESP32, the default ADC pin is GPI36 (also known as VP), while the ESP8266 uses A0. On ESP32, any GPIO related to ADC1 can be used - see next note.</p> <p>Note 4: If your ESP32 doesn't have pin 36, any of the other ADC1 (and not ADC2) pins should work.</p> <p>Note 5: On the ESP32, the ADC and I2S pins are defined in audio_reactive.h. You can also select them in the sound settings UI.</p>"},{"location":"WLEDSR/Analog-Audio-Input-Options/#wiring","title":"Wiring","text":""},{"location":"WLEDSR/Analog-Audio-Input-Options/#the-following-schematics-are-provided-as-an-example-only-there-are-many-ways-to-achieve-the-same-results-these-are-only-a-few-of-those-ways","title":"The following schematics are provided as an example only. There are many ways to achieve the same results. These are only a few of those ways.","text":"Microphone Wiring Example (MAX9814) Line In Wiring Example <p>Some folks have mentioned that they don't need this line-in circuit, which is fine. Here's an explanation of that circuit.</p> <p>The 680 ohm resistors provide termination so that you don't get reflection on the incoming signals. The 100nf capacitors remove any DC offset from the incoming signal. Remember that the ESP goes from 0V to 3.3V. Beyond that lay dragons. Finally, the 1M resistors provide DC centering of the incoming (now) AC only signal halfway between 0 and 3.3V.</p> <p>Note 1: If you are just using a single L or R channel for the line-in, disconnect the capacitor for the other channel, or the resultant sample will be significantly reduced in amplitude.</p> <p>Note 2: Providing a 'T' connector so that you can hear the music as it goes into the circuit is highly recommended. In the author's case, there was considerable static when the ESP32 was powered by the computer's USB port, but was fine when the ESP32 was powered by a USB powerbank.</p>"},{"location":"WLEDSR/Analog-Audio-Input-Options/#dual-input-wiring","title":"Dual Input Wiring","text":"<p>The following diagram shows one way of connecting a 3.5mm jack and an analog microphone to the ESP8266/32 while being able to change your desired input with a simple SPDT switch.</p> <p>The left and right channels of the TRS Jack are connected together to sample both channels simultaneously as one channel.</p> <p>Connect the output of the capacitor to the ADC pin for your board.</p> <p></p>"},{"location":"WLEDSR/Analog-Audio-Input-Options/#pins-used","title":"Pins Used","text":"<p>On the ESP32, the default ADC pin used is GPI36 (also known as VP), while the ESP8266 uses A0. Power is connected to the 3.3V pin. On ESP32 The ADC pin can be configured on the sound settings page; any GPIO associated with <code>ADC1</code> (i.e. GPIO32 to GPI39) can be used.</p>"},{"location":"WLEDSR/Analog-Audio-Input-Options/#squelch","title":"Squelch","text":"<p>The volume and frequency reactive routines (starting with a single or double *), support a squelch or background noise suppression. This can be configured on the Sound Settings page.</p>"},{"location":"WLEDSR/Analog-Audio-Input-Options/#gain","title":"Gain","text":"<p>Line-in signals are typically much lower than that of some of the microphones. Rather than use an auto gain function, you can manually adjust the gain from 1 to 255, which translate to a gain factor from 0.1 up to 6.5 gain. That's equivalent to a range of -20dB up to +16dB.</p>"},{"location":"WLEDSR/Analog-Audio-Input-Options/#problems-encountered","title":"Problems Encountered","text":"<ul> <li> <p>Noise - Some recommendations to reduce noise</p> </li> <li> <p>Spikes - We've often seen spikes when using an analog microphone in conjunction with WLED. There's an article that should shed light on the issue at ESP32 microcontroller generates noise on microphone.</p> </li> </ul>"},{"location":"WLEDSR/Analog-Sound-Sampling-Sketch-Example/","title":"Analog Sound Sampling Sketch Example","text":"<p>Use this basic code to read and calculate the average from the INMP401/MAX4466/MAX9814 microphone on an ESP32 or ESP8266</p> <ul> <li>Use the Arduino Serial plotter to view the output and compare your results to those found here.</li> <li>Make sure you have set the baud rate on your Serial plotter to 115200 (as defined in the sketch).</li> <li>Note that the ESP32 employs a 12 bit ADC, while the ESP8266 has a 10 bit ADC. Also note the anomalous spikes on the ESP8266.</li> <li>The <code>micLev</code> variable is the DC Offset value that you can use for zeroing your samples.</li> </ul> <p><pre><code>/* ESPSample\n *\n * By: Andrew Tuline\n *\n * Updated: Feb, 2019\n *\n * Basic code to read and calculate average from the Sparkfun INMP401/MAX4466/MAX9814 microphone\n * on an ESP32 or ESP8266.\n * \n * Use the Arduino Serial plotter to view the output. Compare results to those found at:\n * \n * https://github.com/atuline/WLED/blob/assets/docs/Microphones.pdf\n *\n * Note that the ESP32 employs a 12 bit A/D, while the ESP8266 has a 10 bit A/D. Also note\n * the anomalous spikes on the ESP8266.\n * \n * The micLev variable is the DC Offset value that you can use for zeroeing your samples.\n * \n */\n\n#ifdef ESP8266\n#define MIC_PIN A0                              // ESP8266 pin A0\n#else\n#define MIC_PIN 36                              // ESP32 pin also known as 'VP'.\n#endif\n\nvoid setup() {\ndelay(1000);\nSerial.begin(115200);                         // Initialize serial port for debugging.\n} // setup()\n\nvoid loop() {\nanalog_sample();\n} // loop()\n\nvoid analog_sample() {\nstatic float micLev;                          // Needs to be a float, or smoothing calculation below will be very inaccurate.\nint micIn = analogRead(MIC_PIN);\nmicLev = ((micLev*31)+micIn)/32;              // Smooth out the data to get average value (used for zeroeing).\nSerial.print(micIn); Serial.print(\" \");\nSerial.print(micLev); Serial.println(\" \");\n} // analog_sample()\n</code></pre> Original code can be found here.</p>"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/","title":"Arduino IDE Compile (Outdated)","text":""},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#compiling-from-a-fresh-install-of-the-arduino-ide","title":"Compiling from a fresh install of the Arduino IDE","text":"<p>Note: Around October 2020, mismatching library version issues made it increasingly difficult to compile WLED with the Arduino IDE. Your best bet is to use VS Code with Platform IO. In the meantime, here's the old Arduino IDE instructions:</p> <ol> <li>Have a read through Aircoookie's compiling documentation at https://github.com/Aircoookie/WLED/wiki/Compiling-WLED</li> <li>Download and install the Arduino IDE from arduino.cc. Defaults are OK.</li> <li>Start the Arduino IDE and add ESP8266/ESP32 board support by going to \"File | Preferences\" (\"Arduino | Preferences\" for macOS (\u2318,))</li> <li>In the \"Additional Boards Manager URLs\" section, copy these URL's and add: https://arduino.esp8266.com/stable/package_esp8266com_index.json for an ESP8266 and https://dl.espressif.com/dl/package_esp32_index.json for an ESP32. You can add both by separating them with a comma. </li> <li>Press \"OK\" to install support for the ESP8266/ESP32 platform</li> <li>Go to \"Tools | Board | Boards Manager...\"</li> <li>For the ESP8266/32, search for \"ESP8266\" and/or \"ESP32\"</li> <li>Click on \"Install\" for each.</li> <li>As of May 2020, the current version for ESP8266 was 2.7.1</li> <li>As of May 2020, the current version for ESP32 was 1.0.4</li> </ol> <p>If you already have ESP8266/32 drivers installed, please ensure your drivers are recent:</p> <ol> <li>Go to \"Tools | Board | Boards Manager...\".</li> <li>For the ESP8266/32, search for \"ESP8266\" or \"ESP32\"</li> <li>As of July 2020, the current version was 2.7.2</li> <li>As of July 2020, the current version was 1.0.4</li> </ol>"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#board-settings","title":"Board Settings","text":""},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#lolin-d32-esp32","title":"LOLIN D32 (ESP32)","text":""},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#lolin-wemos-d1-mini-esp8266","title":"LOLIN WeMOS D1 Mini (ESP8266)","text":"<p>Note: Before attempting to compile WLED, make sure you can select your ESP board and compile a basic sketch such as: \"File | Examples | 01.Basics | Blink\"</p>"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#wled-library-pre-requisites","title":"WLED library pre-requisites:","text":"<p>WLED makes use of a LOT of 3rd party libraries and is NOT easy to compile, especially for anyone new to Arduino. Although the WLED distribution contains several of these libraries, it doesn't include them all. Additional libraries you need to install are:</p> <ul> <li>NeoPixelBus by Makuna</li> <li>FastLED</li> <li>IRRemoteESP8266 (ESP8266 Only)</li> <li>ArduinoFFT (ESP32 Only)</li> <li>ESPAsyncTCP (ESP8266 Only)</li> <li>ESPAsyncUDP (ESP8266 Only)</li> <li>ESPAsyncWebServer (See notes below)</li> <li>AsyncTCP (ESP32 Only)</li> </ul> <p>See the next section to find/install these libraries.</p>"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#install-libraries-that-are-included-in-the-library-manager","title":"Install libraries that are included in the Library Manager","text":"<ol> <li>Navigate to \"Tools | Manage Libraries...\" or \"Sketch | Include Libraries | Manage Libraries...\" for macOS (\u21e7\u2318I)</li> <li>Search for and install \"NeoPixelBus by Makuna\"</li> <li>Search for and install \"FastLED by Daniel Garcia\"</li> <li>Search for and install \"IRremoteESP8266 by Ken Shirriff, etc\"</li> <li>Search for and install \"arduinoFFT by Enqrique Condes\"</li> </ol>"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#install-libraries-that-are-not-included-in-the-library-manager","title":"Install libraries that are not included in the Library Manager:","text":"<p>To install libraries that are not in the library manager, you would typically:</p> <ol> <li>Download the zip file</li> <li>In the Arduino IDE use \"Sketch | Include Library | Add Zip Library\"</li> <li>Navigate to where you downloaded the .zipped library.</li> <li>Select it and press OK.</li> <li> <p>Your library should now be included if you go \"Sketch | Include Libraries\" and navigate down to Contributed libraries.</p> </li> <li> <p>Download and install ESPAsyncTCP</p> </li> <li> <p>Download and install ESPAsyncWebServer</p> </li> <li> <p>Download and install ESPAsyncUDP</p> </li> <li>For ESP32 Download and install AsyncTCP</li> </ol> <p>Note: AirCoookie has since created a fork of ESPAsyncWebServer, and the original ESPAsyncWebServer will no longer work with WLED. If you have the original installed, you can edit wled.h and comment out the line as follows:</p> <p>//  #define WLED_ENABLE_WEBSOCKETS</p> <p>If you add the library manually or with git you will most likely need to restart, yes restart the Arduino IDE before it will be recognized. For more information on libraries, see: https://www.arduino.cc/en/Guide/Libraries.</p> <p>When you are done, if you navigate to 'File | Examples' and scroll all the way down, you should see:</p> <p></p>"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#download-wled","title":"Download WLED","text":"<ul> <li>In a web browser you can navigate to wled and unzip into a new directory.</li> <li>Alternatively, you can download our Sound Reactive Master.</li> <li>Make sure you can compile the original WLED before attempting to compile our sound reactive version.</li> <li>You can then 'Download' the Zip file.</li> <li>Unzip it into a new directory.</li> <li> <p>If you have 'git' installed, navigate to where you want to store your project and run:</p> <p><code>git clone https://github.com/atuline/WLED.git WLED-Reactive</code></p> </li> </ul>"},{"location":"WLEDSR/Arduino-IDE-Compile-%28Outdated%29/#compiling-wled-for-arduino-ide-outdated","title":"Compiling WLED for Arduino IDE (OUTDATED)","text":"<p>Once you have:</p> <ul> <li>Installed the Arduino IDE.</li> <li>Installed support for ESP32/ESP8266.</li> <li>Updated the drivers on an existing installation of the IDE.</li> <li>Downloaded and installed the library pre-requisites.</li> <li>Downloaded and installed WLED.</li> <li>Connected your device and ensured it connected to a COM port.</li> <li>For previous WLED users, ensure you have modified your Flash settings to support 2MB minimum.</li> </ul> <p>You should now be able to compile and upload WLED to your ESP device.</p> <p>If this feels like a treasure hunt, it is. Now, imagine what the authors of WLED had to go through just to get this all working together. We just figured out how to compile it and to get some sound reactive code running.</p>"},{"location":"WLEDSR/Connectivity-Issues/","title":"Connectivity Issues","text":"<p>We've sometimes been unable to connect to one or more of our WLED enabled devices. Here are some things to try:</p> <ul> <li>Wipe (using pyflasher or esptool.py) and re-flash your device.</li> <li>NOTE: For ESP32 you must write flash at 0x10000. There are great instructions here.</li> <li>For more reliable connectivity on Android, go into WiFi advanced settings (press the 3 dots at the top right of the WiFi page) and disable 'Switch to mobile data' as well as 'Wi-Fi power saving mode'.</li> <li>In the WIFI Setup settings page of WLED, uncheck 'Disable WiFi sleep'.</li> <li>Ensure you have a strong signal to the device.</li> <li>When compiling, make sure you have selected Flash Size as 4MB (FS:2MB OTA:~1019KB)</li> </ul> <p>Note: This page has been brought to you by our Discord friend @tuantrung2905. Thanks for your continued and persistent testing efforts!</p>"},{"location":"WLEDSR/Contributing-Code-to-SR-WLED/","title":"Contributing Code to SR WLED","text":"<p>We learned a long time ago that adding new code can make for a LOT of testing. If you offer to help out with this fork, please keep in mind that we support:</p> <ul> <li>Several different analog microphones and some in different configurations (ie MAX9814), each of which need to be tested.</li> <li>Line-in, with different possible line-in levels.</li> <li>The digital INMP441 and ICS-43434 microphones.</li> <li>Sampling for both volume and FFT calculations.</li> <li>Volume, peak and FFT based animations.</li> <li>Up to 5 sliders for each animation.</li> <li>1D and 2D routines.</li> <li>UDP sound synchronization.</li> <li>Settings for gain, squelch, sliders, UDP sync and 2D layout.</li> <li>EEPROM code to save/load those settings.</li> <li>A dedicated sound reactive settings web page.</li> <li>ESP32 and ESP8266 based devices.</li> <li>Support for both the Arduino IDE as well as Platform IO.</li> <li>Supporting both AP mode as well as STA mode for WiFi.</li> <li>A dev branch for the latest code for ESP32.</li> <li>An ESP8266 branch for volume only routines.</li> <li>A master branch, which gets occasionally gets merged with AC's master by one of our team members. New development happens on our 'dev' branch.</li> <li>SEGMENTS. Every routine must be compatible and tested for SEGMENTS.</li> <li>Try and keeping our fork current with the original WLED.</li> <li>Our Flash usage is now FULL. Prior to adding anything new, we either need to free up the same or larger space elsewhere, typically other animations.</li> </ul> <p>If you'd like to contribute, you would need to be able to perform a significant amount of testing and future maintenance (see above) so your new code doesn't unintentionally break other functionality.</p>"},{"location":"WLEDSR/Contributing-Code-to-SR-WLED/#what-functionality-to-add","title":"What functionality to add:","text":"<ul> <li>Is the addition specific to sound reactive WLED or should it be a part of regular WLED?</li> <li>Will the proposed addition break potential future WLED functionality?</li> <li>Can other members of the team support this added functionality in the future?</li> <li>Is the code clear and concise?</li> </ul>"},{"location":"WLEDSR/Contributing-Code-to-SR-WLED/#in-addition","title":"In addition:","text":"<ul> <li>Good communication with team members is very important. Join our discord.</li> <li>Pull Requests and any changes should first go into our <code>dev</code> branch! Do not create a PR for <code>master</code> unless there is a very good reason.</li> <li>Keep any git update to a limited topic for ease of testing/rollback.</li> <li>Keep the Wiki documentation in 'good order'.</li> <li>Technical support for a long enough period of time to ensure your code is fully tested, the UI is fine, and supportable by others.</li> <li>Commitment. You're really keen on WLED and have a long term commitment to support the community.</li> </ul>"},{"location":"WLEDSR/Contributing-Code-to-SR-WLED/#knowledge-that-helps","title":"Knowledge That Helps:","text":"<ul> <li>Github versioning, commits, branching, merging.</li> <li>FastLED (for animations), combined with NeoPixelBus.</li> <li>Junior/intermediate level C programming. Please use the opportunity for a code review by making pull requests.</li> <li>HTML, CSS, Javascript, XML, JSON, npm for any UI changes.</li> <li>WLED coding standards.</li> </ul> <p>We still have the occasional issue with our dev/master branches where we lose connectivity with the web server. This was most prevalent with the ESP8266 branch in AP mode, and precipitated a re-write for that platform. As a result of this ongoing issue, we are sensitive to new functionality being added without adequate testing.</p> <p>In conclusion, the most important factors are commitment, teamwork, communication, documentation, testing, testing and more testing. Oh yea, and a bit of new code as well, just so long as it's thoroughly tested across the range of supported environments.</p>"},{"location":"WLEDSR/Contributing-Code-to-SR-WLED/#can-i-help","title":"Can I help?","text":"<p>Yes! This is a community project, and contributions are welcome! We're always up for a good PR(see above).</p> <p>Just remember that any code you add will need to be maintained when we attempt to incorporate future versions of WLED. It's easy to add new code; maintaining it across multiple versions of WLED is a whole other matter. Be sparing with your additions.</p>"},{"location":"WLEDSR/Contributors-and-credits/","title":"Contributors and credits","text":"<ol> <li>Contributors and Credits of sound reactive WLED fork</li> <li>Contributors and Credits of upstream WLED</li> </ol>"},{"location":"WLEDSR/Digital-Microphone-Hookup/","title":"Digital Microphone Hookup","text":""},{"location":"WLEDSR/Digital-Microphone-Hookup/#i2s-digital-audio","title":"I2S Digital Audio","text":"<p>I2S digital sound modules utilize the industry-standard 24-bit I\u00b2S interface. The I\u00b2S interface allows to connect them directly to an ESP32 (but NOT an ESP8266). The IMNP441, and also the recently tested ICS-43434 (thanks to Serg74) work very well with SR WLED, and they perform much better than any analog device at a comparable price.</p> <p></p> from INMP441, ICS-43434 from PDM (e.g. SPM1423) from Other to ESP32 GPIO L/R SEL SEL Gnd ground =&gt; left channel SD DATA DOUT 32 serial data WS CLK LRCK 15 left right clock SCK -- BCLK 14 serial clock -- -- MCLK 0 master clock (if needed) VDD 3V3 VDD 3.3V power don't use 5V! GND GND GND Gnd ground, 0V <p>See also \u21d2 Sound setting examples for common microphones</p> <p></p> <p>Microphone type (SR-WLED sound settings) * use <code>Generic I2S</code> for INMP441, ICS-43434, and other non-PDM devices * use <code>Generic I2S PDM</code> for PDM microphones like SPM1423 * use <code>SPH0645</code> for adafruit SPH0645 * use <code>ES7243</code> for Lyra-T mini, and other board that have the ES7243 chip * use <code>Generic I2S with Mclk</code> only for devices that have an addition pin for 'master clock'</p> <p>Important: please make sure that your I2S device provides sound input on the LEFT audio channel! For the INMP441 this is achieved by wiring the 'L/R' connection to GND (ground). Only exception is the \"ES7243\" driver, which is always using the RIGHT audio channel.</p> <p></p> <p>Since 0.12.0, you can change I2S GPIO pins in the Sound Settings interface; on ESP32 any available GPIO can be used for I\u00b2S. The 'SD' signal could also be mapped to an input-only (GPI) pin (*), if you are low on GPIO pins. You'll need to reboot when done with pin assignment - don't forget to \"save\". To reboot, please press 'reset' on your ESP32. Unfortunately a restart by software (\"soft reboot\") is not always sufficient to activate new driver settings.</p> <p>In addition to I2S microphones, there are solutions available for line-in via I2S. We already have driver support for Boards/Shields with \"es7243\" chip, and we're investigating \"es8388\". </p> <p>Other I2S ADC (analog-to-digital-converter) devices and microphones that have a standard I2S interface may already work with WLED-SR, by using one of the I2S \"Generic\" drivers (<code>Generic I2S</code>, <code>Generic I2S PDM</code>, or <code>Generic I2S with Mclk</code>). It is important however that sound input comes on the LEFT audio channel. Please keep in mind that this is a spare-time open source project - we do our best to make generic drivers but we cannot test with all available devices.</p>"},{"location":"WLEDSR/Digital-Microphone-Hookup/#notes-for-older-releases-of-sr-wled-before-0132","title":"Notes for older releases of SR WLED (before 0.13.2)","text":"<ul> <li> <p>(*) Due to a problem that was fixed very recently, its not possible to use input-only GPI pins in older releases of SR WLED. There will be no warning if you try to do so. This problem is solved in the latest release version of SR WLED.</p> </li> <li> <p>In old releases, you need to change GPIO pins used by defining <code>I2S_WS</code>, <code>I2S_SD</code>, and <code>I2S_SCK</code> in your PlatformIO config, or by editing the values in audio_reactive.h. </p> </li> </ul>"},{"location":"WLEDSR/Digital-Microphone-Hookup/#still-having-problems","title":"Still having problems?","text":"<p>We do not have these digital microphones running on an ESP8266.</p> <p>Having problems getting the INMP441 running with WLED? Here's a test sketch (which you can compile with the Arduino IDE): https://pastebin.com/Ua7s7LYF . If you are still having a problem with that sketch, change the line with ONLY_LEFT to ONLY_RIGHT. If that works, you'll need to go into audio_source.h and change that line.</p> <p>Initial I2S support by @spedione</p>"},{"location":"WLEDSR/Digital-Microphone-Hookup/#some-i2s-audio-modules-and-boards","title":"Some I2S audio modules and boards","text":""},{"location":"WLEDSR/Digital-Microphone-Hookup/#imnp441","title":"IMNP441","text":"<p>This is the IMNP441; you can find it in many shops including Amazon and Aliexpress. It works very well with SR WLED. </p> <p> </p> <p> </p>"},{"location":"WLEDSR/Digital-Microphone-Hookup/#ics-43434","title":"ICS-43434","text":"<p>Here's the first board I've seen with the ICS-43434 at: https://www.tindie.com/products/serg74/digital-i2s-microphone-ics-43434-add-on/ </p> <p></p> <p> </p>"},{"location":"WLEDSR/Digital-Microphone-Hookup/#i2s-adc-for-line-in","title":"I2S ADC for Line-In","text":"<p>It is recomended to capture audio using a digital input for Line-In rather than the analog solution, see this guide Line-Input</p> <p> </p>"},{"location":"WLEDSR/Digital-Microphone-Hookup/#es7243-based-boards","title":"ES7243 based boards","text":"<ul> <li>ESP32 Lyra-T mini V1.2</li> </ul>"},{"location":"WLEDSR/Digital-Microphone-Hookup/#es8388-based-boards","title":"ES8388 based boards","text":"<p>with I2S on-board microphone and I2S Line-In (SR WLED support not available yet, but is supported in MoonModules)</p> <ul> <li> <p>ESP32 Lyra-T V4.3 </p> </li> <li> <p>Ai-Thinker ESP32 Audio Kit v2.2 </p> </li> </ul> <p> </p>"},{"location":"WLEDSR/Digital-Microphone-Hookup/#other-ideas-needs-some-work-to-make-it-work","title":"Other Ideas (needs some work to make it work)","text":""},{"location":"WLEDSR/Digital-Microphone-Hookup/#use-a-second-esp32-as-bluetooth-audio-to-i2s-device","title":"use a second esp32 as bluetooth audio to I2S device","text":"<p>In principle, its possible to have a second ESP32 that provides sound input to WLED via I2S.</p> <ul> <li>some interesting explanations on the I2S bus: https://diyi0t.com/i2s-sound-tutorial-for-esp32</li> </ul> <p></p> <ul> <li>pschatzmann has created A Simple Arduino Bluetooth Music Receiver and Sender for the ESP32</li> <li> <p>the library from pschatzmann has examples for how to connect an I2S DAC for playing music from Bluetooth on a speaker. The main difference for SR-WLED should be to put the \"bluetooth ESP\" into \"I2S slave\" mode (instead of being the \"I2S Master\"). There is some information on this website: https://www.eevblog.com/forum/microcontrollers/esp32-as-i2s-(audio)-slave</p> </li> <li> <p>make sure the \"I2S slave\" device is sending 24bit or 16bit Phillips Standard data format.</p> </li> </ul>"},{"location":"WLEDSR/Digital-Sound-Sampling-Sketch-Example/","title":"Digital Sound Sampling Sketch Example","text":"<p>Use this code to read and calculate the average from the INMP441/ICS-43434 microphone on an ESP32 or ESP8266</p> <ul> <li>Use the Arduino Serial plotter to view the output and compare your results to those found here.</li> <li>Make sure you have set the baud rate on your Serial plotter to 115200 (as defined in the sketch).</li> </ul> <pre><code>/* \n * ESP32 I2S Noise Level Example.\n * \n * By: maspetsberger\n * \n * Updated by: Andrew Tuline\n * \n * This example calculates a mean noise level.\n * \n * Tie the L/R pin to ground. Other pins are listed below.\n * VDD goes to 3.3V\n * GND goes to Gnd \n * \n */\n\n#include &lt;driver/i2s.h&gt;\n\n#define I2S_WS  15         // aka LRCL\n#define I2S_SD  32         // aka DOUT\n#define I2S_SCK 14         // aka BCLK\n\nconst i2s_port_t I2S_PORT = I2S_NUM_0;\nconst int BLOCK_SIZE = 64;\nconst int SAMPLE_RATE = 10240;\n\nfloat mean = 0;\nbool INMP_flag = 0;\n\nvoid setup() {\n\nSerial.begin(115200);\n\nSerial.println(\"Configuring I2S...\");\nesp_err_t i2s_err;\n\n// The I2S config as per the example\nconst i2s_config_t i2s_config = {\n.mode = i2s_mode_t(I2S_MODE_MASTER | I2S_MODE_RX), // Receive, not transfer\n.sample_rate = SAMPLE_RATE,                         // 16KHz\n.bits_per_sample = I2S_BITS_PER_SAMPLE_32BIT, // could only get it to work with 32bits\n.channel_format = I2S_CHANNEL_FMT_ONLY_LEFT, // LEFT when pin is tied to ground.\n.communication_format = i2s_comm_format_t(I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB),\n.intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,     // Interrupt level 1\n.dma_buf_count = 8,                           // number of buffers\n.dma_buf_len = BLOCK_SIZE                     // samples per buffer\n};\n\n// The pin config as per the setup\nconst i2s_pin_config_t pin_config = {\n.bck_io_num = I2S_SCK,       // BCLK aka SCK\n.ws_io_num = I2S_WS,        // LRCL aka WS\n.data_out_num = -1,         // not used (only for speakers)\n.data_in_num = I2S_SD       // DOUT aka SD\n};\n\n// Configuring the I2S driver and pins.\n// This function must be called before any I2S driver read/write operations.\ni2s_err = i2s_driver_install(I2S_PORT, &amp;i2s_config, 0, NULL);\nif (i2s_err != ESP_OK) {\nSerial.printf(\"Failed installing driver: %d\\n\", i2s_err);\nwhile (true);\n}\ni2s_err = i2s_set_pin(I2S_PORT, &amp;pin_config);\nif (i2s_err != ESP_OK) {\nSerial.printf(\"Failed setting pin: %d\\n\", i2s_err);\nwhile (true);\n}\nSerial.println(\"I2S driver installed.\");\n\ndelay(1000);                        // Enough time to see these messages. This need to be BEFORE the INMP test.\n\ngetINMP();\nif (mean != 0.0) {\nSerial.println(\"INMP is present.\");\nINMP_flag = 1;\n}\n\n} // setup()\n\n\n\nvoid loop() {\n\nif (INMP_flag) {\ngetINMP();\nSerial.print(abs(mean)); Serial.print(\" \");\nSerial.println(1600);\n\n} else {\n// Analog Read here!!\n}\n\n} // loop()\n\n\n\nvoid getINMP() {\n// Read multiple samples at once and calculate the sound pressure\nint32_t samples[BLOCK_SIZE];\nint num_bytes_read = i2s_read_bytes(I2S_PORT, (char *)samples, BLOCK_SIZE,     // the doc says bytes, but its elements.\nportMAX_DELAY); // no timeout\n\nint samples_read = num_bytes_read / 8;\nif (samples_read &gt; 0) {\n\nfor (int i = 0; i &lt; samples_read; ++i) {\nmean += samples[i];\n}\nmean = mean/BLOCK_SIZE/16384;\n}  }\n</code></pre>"},{"location":"WLEDSR/End-user-guide/","title":"End user guide","text":""},{"location":"WLEDSR/End-user-guide/#introduction","title":"Introduction","text":"<p>As WLED Sound Reactive is a fork of WLED, a general End User Guide can be found here.</p> <p>This page will show Sound Reactive specific information (in the near future)</p>"},{"location":"WLEDSR/First-Time-Setup/","title":"First Time Setup","text":""},{"location":"WLEDSR/First-Time-Setup/#introduction","title":"Introduction","text":"<p>The sound reactive version of WLED provides all of the functionality of WLED with a few caveats:</p> <ul> <li>Some of the default services supported by WLED such as IR, Alexa and Blynk are disabled by default. To enable them, update the definitions in wled.h and re-compile.</li> <li>Spurious noise and spikes have been problematic during the development of SR WLED. See 'Noise and Spikes' below for further discussion on this topic.</li> <li>We recommend using SR WLED in STA mode, instead of the standalone AP mode (aka WLED-AP). It generates more noise.</li> <li>If you have problems with the LED's, make sure you can successfully run the latest version of standard WLED.</li> <li> <p>Start out with a small strip of ~30 LED's before setting up a large installation.</p> </li> <li> <p>Grounding may also be a problem. For example, my line-in setup picked up a lot of noise when my ESP32 board was connected to the USB port on my PC, but NO noise when powered by a USB power bank.</p> </li> <li>Connectors!! Dupont connectors are notoriously flaky. I use JST-SM connectors for the LED's and (so far) just soldered the microphones.</li> </ul>"},{"location":"WLEDSR/First-Time-Setup/#first-steps","title":"First Steps","text":""},{"location":"WLEDSR/First-Time-Setup/#first-contact-after-uploading","title":"First Contact (after uploading)","text":"<p>After uploading WLED to the ESP, use your phone and connect to the WLED-AP using the password 'wled1234'. Click 'Login to network' when the notification about this shows up. You are then transfered to the WLED's start page, and here we should click \"WIFI SETTINGS\" to connect to the local network. Fill in the settings for your local Wifi network, and then click 'Save &amp; Connect'. The device will reboot and if everything worked it will now be connected to the local network. Finding it's IP-address can be done via the network routers administration page, or via an mobile app like Fing were you can find a new device called \"wled-WLED\". Open this IP in a webbrowser to access WLED's control page.</p>"},{"location":"WLEDSR/First-Time-Setup/#wifi-and-leds","title":"Wifi and LEDs","text":"<ol> <li>On the WiFi Setup page, it is highly recommended that you connect your SR WLED strip to an existing network.</li> <li>At the bottom of the WiFi Setup page, check on 'Disable WiFi sleep'. This may not be necessary if you're not experiencing noise or UDP Sync lag issues.</li> <li>On the LED Preferences page, configure the length of your led strip.</li> <li>On the LED Preference page, configure the 2D matrix size, i.e. 1x30 or 16x16, etc. If you have not configured this, 2D routines may not work.</li> </ol>"},{"location":"WLEDSR/First-Time-Setup/#sound","title":"Sound","text":"<ol> <li>On the Sound Setting page, set the Squelch setting to '1', the Gain &gt; 200, and AGC = Off.</li> <li>On the Effects page, set the animation to 'Gravcenter' or 'Gravimeter'.</li> <li>Back on the Sound Settings page, increase/save Squelch setting until strip no longer reacts to the ambient noise.</li> <li>On the Sound Settings page, set the Gain to 40. Then reduce/adjust the Gain setting until the leds react reasonably with your voice.</li> <li>You might also want to run a Pink Noise video and fine tune the values from there. </li> </ol>"},{"location":"WLEDSR/First-Time-Setup/#sound-settings-getting-started-with-common-microphones","title":"Sound Settings: getting started with common microphones","text":"<p>Disclaimer: The information below is for the latest release version of SR WLED. If you use an older release, please divide _Gain values by 4._</p> <p>Here's a starting point table of Squelch and Gain settings for different input types:</p> Input (I2S digital) Squelch Gain Type comments INMP441 6 60 Generic I2S ICS-43434 16 30 Generic I2S SPM1423 tbd tbd Generic I2S PDM M5StickC, M5AtomU SPH0654 tbd tbd SPH0654 ES7243 tbd tbd ES7243 ESP32 Lyra-T Mini Line-In CS5343 tbd tbd Generic I2S with Mclk MCLK to GPIO0 Input (ADC analog) Squelch Gain Type MAX9814 @40dB 10 80 Generic Analog Line-In 8 120 Generic Analog INMP411 20 80 Generic Analog MAX4466 16 120 Generic Analog"},{"location":"WLEDSR/First-Time-Setup/#analog-or-i2s-digital","title":"Analog or I2S Digital?","text":"<p>We recommend using an I2S digital microphone, like INMP441, ICS-43434, or PDM microphones.</p> <p>Analog input (Microphone or Line-in) is also possible, however you might have power fluctuation (3.3V) and noise issues when using these. Analog devices are handled by the \"ADC1\" unit of your ESP32. Problems can be expected when connecting \"analog buttons\" (Potentiometer) to the same ADC1 unit. </p> <p>Finally Analog Microphones often work best when placed very close to the sound source, while digital ones like the INMP441 can easily pick up sound from several meters apart. With the analog MAX4466, we found that 30-50cm is an optimal distance. </p>"},{"location":"WLEDSR/First-Time-Setup/#agc","title":"AGC","text":"<p>Automatic gain control (AGC) is not enabled by default in SR WLED, because of so many different input types and ambient noise in different environments. We don't know what your 'quiet' is. In addition, the LED's should NOT be reacting when it IS quiet, so it's up to you to first make those adjustments. In addition, sensitivity can be further adjusted with either the Intensity or Speed slider in many of the animations.</p> <p>While an improved autonomous gain control (iAGC) feature is available since version 0.13.1, it is still very important that you first find a good Squelch setting for your environment. Afterwards you can enable AGC and let the controller adjust input levels automatically. </p>"},{"location":"WLEDSR/First-Time-Setup/#noise-and-spikes","title":"Noise and Spikes","text":"<p>While providing a lot of functionality, the ESP8266 and the ESP32 boards (typical ones) we have been using, have experienced a lot of spurious noise on their ADC pins. This has also been discussed at length on various ESP related forums. Methods that may help remediate this include:</p> <ul> <li>Use an I2S microphone, such as the INMP441, SPH0645 or ICS-43434.</li> <li>Use a separate WiFi antenna.</li> <li>Don't use AP mode.</li> <li> <p>Disable the WiFi sleep mode.</p> </li> <li> <p>Use shielded wiring for your analog sampling pin.</p> </li> <li>Isolate the power between the LED strips and the controller.</li> <li>Don't power your LED stripe from the ESP32 3.3v or 5v pins.</li> <li>Don't use USB power from your PC.</li> <li>Some batches of analog microphones are just no good.</li> </ul>"},{"location":"WLEDSR/Future-Directions/","title":"Future Directions","text":"<p>We've had a lot of fun creating our audio reactive fork of WLED, and we've got more to come.</p>"},{"location":"WLEDSR/Future-Directions/#wish-list","title":"Wish List","text":"Topic Notes Skills Required \u2714\ufe0f Dynamic sliders/controls Allow additional sliders to be hidden by default, or displayed depending on the effect. Javascript, XML, JSON, HTML, CSS \u2714\ufe0f Improved default values for sliders Allow improved default values for sliders and on a per SEGMENT basis. Javascript, XML, JSON, HTML Add 2D Library support Add a full 2D library for FastLED functionality C, System \u2714\ufe0f Add SEGMENT support for 2D Improve SEGMENT capabilities Everything Improved/documented QA process We need to be able to better test our significant updates. A test/release plan would be a good start. ITIL Coordinated light show To have delayed/coordinated lighting effects in different devices. To run on Android. Kotlin (for Android), C Multi-pin To support SR WLED with SEGMENTS and multi-pin per-device squelch + gain see https://github.com/atuline/WLED/issues/221  for users who configure several sound inputs (use one at a time) it might be useful to have squelch/gain settings for each device. C++ <p>Our focus for new functionality should be specific to sound reactivity. Otherwise, we should get some idea as to if/when AirCoookie is planning to implement this functionality.</p>"},{"location":"WLEDSR/Future-Directions/#outstanding-issues","title":"Outstanding Issues","text":"Issue Notes"},{"location":"WLEDSR/Home/","title":"Introduction","text":"<p>The WLEDSR help you can find here have been copied from https://github.com/atuline/WLED/wiki.</p> <p>In this section you will find everything related to sound for versions &lt;= 0.13</p> <p>These pages are here temporarily: Aim is to migrate them step by step to 0.14 general and MM specific pages (Sound Reactive).</p>"},{"location":"WLEDSR/Home/#wled-sound-reactive-introduction","title":"WLED Sound Reactive Introduction","text":"<p>This is a FORK of the original WLED code as found at wled.me. It provides basic sound reactivity for both the ESP8266 and ESP32 platforms as well as FFT sound reactivity for the ESP32.</p> <p>Due to the performance limitations of the ESP8266, we decided to separate the ESP8266 and ESP32 code in order to provide a more stable build for the ESP8266. Beginning with version 0.10.2 and moving forward, ESP8266 support has been removed from the master branch. It receives very limited support and updates and is located at ESP8266 Branch.</p> <p>We have also disabled functionality for other interfaces, such as Alexa, Blynk, Cronixie, Huesync, Infrared. If you would like to enable them, you will need to modify wled.h, compile and upload to your device. If you have any issues, please engage the Discord community, as we only support functionality for the web interface.</p>"},{"location":"WLEDSR/Home/#features","title":"Features","text":"<p>We do our best to perform upstream merges with the original WLED. Our fork includes:</p> <ul> <li>Several volume reactive effects.</li> <li>Several FFT (frequency) reactive effects.</li> <li>Some new non-reactive 1D effects.</li> <li>Many 2D effects, including a highly configurable \"graphical equalizer\" effect.</li> <li>UDP sync for volume and FFT reactive effects.</li> <li>Additional sliders for controlling effects.</li> <li>Multiple panels of 2D led's.</li> <li>2D segments.</li> <li>Dynamic naming and visibility of sliders.</li> <li>An interpreter - for creating your own effects (ARTI-FX).</li> <li>Configuration setting for 2D, panels, noise squelch, gain, and UDP sound synchronization.</li> </ul>"},{"location":"WLEDSR/Home/#sound-reactive-wled-fork-team","title":"Sound Reactive WLED Fork Team:","text":"<ul> <li>A bit of everything (mainly FastLED animations): Andrew Tuline (aka johnny5canuck)</li> <li>Sound reactive ESP32 FFT, 2D: Andreas Pleschutznig (aka apleschu)</li> <li>General contributor, documentation, versioning, keep us up to date: Chris Reese (aka THATDONFC)</li> <li>General contributor, UDP Sound Sync, INMP441 I2S: Chris Hultin (aka spedione)</li> <li>Panels, 2D, segments, animations, ARTI-FX (interpreter) and code cleanup: Ewoud Wijma (aka ewowi)</li> <li>Sound processing, FFT, and code cleanup: Frank M\u00f6hle (aka softhack007)</li> <li>I2S Sound input and processing: Florian Heilmann (aka Haribo / FHeilmann)</li> </ul> <p>Other members of the WLED Discord group have provided code and testing support as well. Thanks all!</p>"},{"location":"WLEDSR/Home/#knowledge-and-pre-requisites","title":"Knowledge and Pre-Requisites","text":"<p>Before attempting to compile this fork of WLED with Platform IO (the Arduino IDE is no longer viable for this project), make sure you CAN compile the one from wled.me.</p> <p>If you are unable to compile WLED, please consider flashing your device with binaries instead.</p>"},{"location":"WLEDSR/Home/#hardware-used","title":"Hardware used","text":"<p>Using the WLED 0.10 codebase, our code has been tested with:</p> <ul> <li>INMP441 I2S digital microphone</li> <li>MAX9814 electret microphone</li> <li>INMP401 MEMS microphone</li> <li>MAX4466 Electret microphone</li> <li>3.5mm Line In</li> <li>LOLIN D32 and Lolin D32 lite</li> <li>Espressif ESP32 DevKitC V4</li> <li>WeMOS D1 Mini (ESP8266)</li> </ul> <p>For more information, see our Analog Audio Input Options or Digital Audio Input Options page.</p>"},{"location":"WLEDSR/Home/#default-pins-used","title":"Default pins used","text":"<ul> <li>GPIO2 (D4 on WEMOS) for both ESP8266 and ESP32 for WS2812's</li> <li>A0 for ESP8266 (audio-in pin)</li> <li>GPIO36 (or VP) for the ESP32 (audio-in pin)</li> <li>See [[Digital Microphone Hookup]] for pins used</li> <li>In SR-WLED 0.12.0 or newer, you can use the web UI to change pins. In older versions, you can change the pins used by adding definitions in your PlatformIO config or editing audio_reactive.h.</li> </ul>"},{"location":"WLEDSR/Home/#discussion-and-support","title":"Discussion and Support","text":"<p>Please consider joining the WLED Discord groups where we have dedicated channels to discuss this project, your projects,  and answer any questions you may have.</p> <p> Join Discord to discuss beta testing of our sound reactive fork of WLED. </p> <p> Join Discord to discuss AirCookie's WLED.</p> <p>We can also be found on reddit at r/soundreactive.</p>"},{"location":"WLEDSR/Home/#support-forums","title":"Support Forums","text":"<ul> <li>WLED on Reddit</li> <li>r/soundreactive on Reddit</li> <li>WLED Discord</li> <li>WLED Discord</li> <li>WLED Soundreactive Discord</li> <li>WLED on Discourse</li> <li>FastLED on Reddit</li> </ul>"},{"location":"WLEDSR/Installing-and-Compiling/","title":"Installing and Compiling","text":"<p>IMPORTANT: Before attempting to compile this fork of WLED, make sure you can compile the original WLED - instructions are here.  If you are unable to compile WLED, please consider flashing your device with binaries instead.</p> <p>If you managed to compile original WLED, test your new skills and compile the soundreactive fork of WLED.</p>"},{"location":"WLEDSR/Installing-and-Compiling/#installing-pre-built-binaries","title":"Installing pre-built binaries","text":""},{"location":"WLEDSR/Installing-and-Compiling/#downloading-usb-drivers","title":"Downloading USB Drivers","text":"<p>Download the CH340 drivers at https://www.wemos.cc/en/latest/ch340_driver.html</p>"},{"location":"WLEDSR/Installing-and-Compiling/#flashing-from-binary","title":"Flashing From Binary","text":"<p>The Sound Reactive WLED binaries for ESP32 are located here.</p> <p>SR WLED releases are also included in this web-based installer: https://wled-install.github.io</p>"},{"location":"WLEDSR/Installing-and-Compiling/#flashing-esp32-binaries-with-esptool","title":"Flashing ESP32 Binaries with esptool","text":"<p>Warning: We had to change the partition size on the ESP32 in order to 'fit' all the new features. This means that the 'old way' of upgrading/flashing, no longer work unfortunately. You cannot use ESPHome Flasher, and you cannot use OTA from a build prior to v0.13.0-b5.</p> <ol> <li>Download esptool.</li> <li>Download the ESP32 bootloader, such as esp32_bootloader_v4</li> <li>Download the sound reactive binary, such as Atuline releases</li> <li>Plug the ESP32 board into your computer.</li> <li>Optionally determine which Com port it uses. You could use NodeMCU-PyFlasher to do this, but don't flash the binary with it.</li> <li>Open a Command prompt on your computer.</li> <li>Assuming you copied esptool and both binaries to the same directory, you could clear the contents of the ESP32 with:     <code>esptool.exe erase_flash</code></li> <li>Then burn the bootloader with:     <code>esptool.exe write_flash 0x0 esp32_bootloader_v4.bin</code></li> <li>Once complete, you can now burn the sound reactive binary with:     <code>esptool write_flash 0x10000 soundReactive_WLED_0.13.X_ESP32.bin</code></li> <li>You can optionally add the port, such as '-p COM6'.</li> <li>In addition, if this is the first time you've used this version, you need to go to the \"Security &amp; Updates\" settings page and tick the \"Factory reset\" box, then select \"Save &amp; Reboot\". Caveat: May not be necessary if you ran 'erase_flash' above.</li> <li>This will reset the EEPROM and remove any settings or presets you may have saved.</li> </ol> <p>Note: If you Flash via another method, you will definitely need to perform a Factory Reset. Cycling the power is also a requirement if you're doing anything with I2S.</p>"},{"location":"WLEDSR/Installing-and-Compiling/#flashing-esp8266-binaries","title":"Flashing ESP8266 Binaries","text":"<ol> <li>Download for your platform NodeMCU-PyFlasher.</li> <li>Plug the WeMOS D1 Mini (or other ESP8266 device) into your computer.</li> <li>Run NodeMCU-PyFlasher.</li> <li>Load the binary.</li> <li>Select the Com port.</li> <li>Select 'yes, wipes all data'.</li> <li>Press Flash NodeMCU.</li> </ol>"},{"location":"WLEDSR/Installing-and-Compiling/#unofficial-development-binaries-here-be-dragons","title":"unofficial development binaries - here be dragons","text":"<p>You can find some unofficial SR WLED binaries, including intermediate development builds for ESP32, here:</p>"},{"location":"WLEDSR/Installing-and-Compiling/#installation-services","title":"Installation services","text":"<ul> <li>https://wled-install.github.io</li> <li>https://install.wled.me</li> </ul>"},{"location":"WLEDSR/Installing-and-Compiling/#firmware-binaries","title":"Firmware Binaries","text":"<ul> <li>https://github.com/srg74/WLED-wemos-shield/tree/master/resources/Firmware/Sound_reactive</li> <li>https://github.com/wled-install/wled-install.github.io</li> </ul> <p>Please keep in mind that these sites are not maintained by the SR WLED team.  You may find old outdated binaries, or binaries that might not work on generic ESP32 hardware. So please compare build number and dates, and read descriptions before installing one of these.</p> <p></p>"},{"location":"WLEDSR/Installing-and-Compiling/#compiling-from-platform-io","title":"Compiling from Platform IO","text":""},{"location":"WLEDSR/Installing-and-Compiling/#getting-started","title":"Getting started","text":"<p>\u21db first read https://mm.kno.wled.ge/advanced/compiling-wled/     \u2192 use source code from https://github.com/atuline/WLED/tree/master   \u2192 start with one of the sound reactive compile environments, like  <code>env:soundReactive_esp32dev</code>   \u2192 read <code>wled00/wled.h</code>, add your own settings to <code>wled00/my_config.h</code>    \u2192 put your own compile environment(s) into platformio_override.ini.</p> <p>SoundReactive has some additional compile time options - see <code>wled00/audio_reactive.h</code> and <code>wled00/audio_source.h</code>.</p>"},{"location":"WLEDSR/Installing-and-Compiling/#additional-compile-guidelines","title":"Additional Compile Guidelines","text":"<ul> <li>If you get .py errors, install Python (wait for the VSCode popup to install Python)</li> <li>If you do not install the Arduino IDE (Why should you if you have PlatformIO) and your board is not recognised if you compile to board, install the USB to UART bridge VSP Drivers</li> <li>For the sound reactive ESP32 firmware, the board type should be env:soundreactive_esp32dev. This is because we have modified the build partitions in order to go beyond the original compile size limits of WLED.</li> </ul> <p>Note: We have long since stopped compiling WLED with the Arduino IDE.</p>"},{"location":"WLEDSR/Installing-and-Compiling/#disabled-feature-of-wled","title":"Disabled Feature of WLED","text":"<p>Some features of \"standard WLED\" are by default disabled in SR WLED. These extended features have shown negative impacts on performance and stability - we need all available \"power\" to run sound analysis. For example, they possibly use too much memory (FLASH or RAM), can lead to lags in animations, or may cause slow responses to sound input. </p> <p>The same is true for many WLED usermods: they might work (like 4LineDisplay), but could have side-effects on our sound reactive features so we disabled them in our \"official\" firmware builds.</p>"},{"location":"WLEDSR/Installing-and-Compiling/#how-to-shoot-yourself-in-the-foot","title":"How to Shoot Yourself in the Foot","text":"<p>If you're keen to use a disabled WLED feature, in your personal build of SR-WLED:</p> <ol> <li>check if there is a <code>-D DISABLE_...</code> flag in your build environment (platformio.ini, or platformio_override.ini), and comment it out or remove it.</li> <li>check if the feature is disabled explicitly in wled00/wled.h.</li> <li> <p>If a feature has been disabled explicitly in wled.h, then there is usually a good technical reason for that decision. Please don't write bug reports for feature that were disabled explicitly.</p> </li> <li> <p>If you still want that feature, you can un-disable it like this </p> </li> </ol> <p>Add to your wled00/my_config.h <pre><code>// re-activate Alexa support. Yes I know this is not supported officially. \n// I don't mind if animations will sometimes \"stutter\" and lag behind the sound.\n#ifdef WLED_DISABLE_ALEXA\n#undef WLED_DISABLE_ALEXA\n#endif\n\n// re-activate MQTT support. Yes I know this is not supported officially. \n// I am ready to take good care of my hung, non-responsive device if necessary.\n#ifndef WLED_ENABLE_MQTT\n#define WLED_ENABLE_MQTT\n#ifdef WLED_DISABLE_MQTT\n#undef WLED_DISABLE_MQTT\n#endif\n#endif\n\n// re-activate IR receiver support. Yes I know this is not supported officially. \n// I can live with my LEDs flickering sometimes, and effects stuttering randomly.\n#ifdef WLED_DISABLE_INFRARED\n#undef WLED_DISABLE_INFRARED\n#endif\n</code></pre></p>"},{"location":"WLEDSR/LED-Preferences/","title":"2D LED Preferences","text":""},{"location":"WLEDSR/LED-Preferences/#led-preferences-for-sound-reactive-wled","title":"LED Preferences for Sound Reactive WLED","text":"<p>The sound reactive fork of WLED supports multiple layouts of a 2D matrix led panel as well as multiple identical 2D matrix led panels. Many effects were written with a 16x16 panel in mind, so some 2D effects may not display properly on a panel/matrix of a different size.</p> <p></p>"},{"location":"WLEDSR/LED-Preferences/#2d-matrix","title":"2D Matrix","text":"<p>2D effects are projected on a 2 dimensional matrix. </p> <p>A specific led is identified by led[x,y] where led[0,0] is in the top left corner (logical layer)</p> Setting name Value Range Description Master/Dev Width 1..x Width of the matrix Master Height 1..y Height of the matrix Master <p>Note: width x height should match LED count! </p>"},{"location":"WLEDSR/LED-Preferences/#2d-panels","title":"2D Panels","text":"<p>A matrix is made of 1 or more identical physical led panels (physical layer)</p> Setting name Value Range Description Master/Dev Multiple panels Y/N No if only one panel, yes if more than one Dev Horizontal panels 1..x Number of panels side by side Dev Vertical panels 1..y Number of panels above each other Dev <p>Note: Panel width = matrix width / horizontal panels and panel height = matrix height / vertical panels</p> <p>Note: Total panels = horizontal * vertical</p>"},{"location":"WLEDSR/LED-Preferences/#2d-panel-layout","title":"2D Panel layout","text":"<p>Specify how a led panel is wired.</p> <p>This is in most cases different from the logical layer (first led top left). Parameters here translate the logical layer (led[x,y]) to the physical layer (led[0] .. led[n]). </p> Setting name Value Range Description Master/Dev First led position Top/Bottom &amp; Left/Right Where is the first led positioned Dev (replacing flipmajor/minor) Orientation Horizontal / Vertical Are rows of leds wired horizontal or vertical Dev (replacing rowMajor) Serpentine Y/N Are rows of leds wired zig-zag or not Master Transpose Y/N Swap the axes (otherwise no swap). Don't use on non-square panels Dev <p>Note: If multiple panels are used, they must be identical.</p>"},{"location":"WLEDSR/LED-Preferences/#example","title":"Example:","text":"<p>I have a 2D matrix of 6 - 8x8 panels. They are connected sequentially with a total of 24 led's wide and 16 led's high.</p> <p>The first led of each panel starts in the top left corner, the subsequent led is to the right of it (horizontally), and the panel is in a serpentine layout. These should be the settings for that layout:</p> <p></p>"},{"location":"WLEDSR/Modifying-Sound-Reactive-WLED/","title":"Modifying Sound Reactive WLED","text":""},{"location":"WLEDSR/Modifying-Sound-Reactive-WLED/#changing-web-ui","title":"Changing Web UI","text":"<p>In order to conserve space, Web UI interface are represented as a series of wled00/html_ui.h, wled00/html_settings.h and wled00/html_other.h files which contain C/C++ strings with specific parts of the Web UI.</p> <p>These files are automatically created from source files available in wled00/data folder. To generate files, install NodeJS 11.0+ globally. After that, recreate html_*.h files by running in the repo directory:</p> <pre><code>&gt; npm install\n&gt; npm run build\n</code></pre> <p>If you want to test changes to the UI, it is easiest to work with the local wled00/data/index.htm file. You just need to enter the IP address of a WLED 0.10.0 or newer instance into the popup. If you accidentally input an incorrect IP or want to test with a different instance, clear the local storage (in Chrome: Developer Tools -&gt; Application -&gt; Local Storage)</p> <p>If you continuously modify files in the wled00/data directory, you want to monitor these changes to make local html_*.h files being updated automatically. To do this, run this in repo directory: </p> <pre><code>&gt; npm run dev\n</code></pre> <p>This will start monitoring wled00/data folder for changes.</p> <p>WARNING!!! Be careful with changing the javascript in HTML files! For example <code>function GetV() {}</code> must be the last javascript function in the <code>&lt;script&gt;</code> element as it will be replaced by automatically generated code to fetch relevant settings from EEPROM. See tools/cdata.js for the replacement rules which run for every *.htm file in wled00/data.</p>"},{"location":"WLEDSR/My--device--is-not-working/","title":"It's Not Working","text":"<p>If you'd like some help with your device, these are the types of things we would be asking:</p> <ul> <li>If you require support, please engage the Discord community as linked to in the readme.md. Github issues are more for actual bugs in the firmware.</li> <li>When asking for support on Discord or on another forum, please provide details up front and not way down a threaded list of messages. Edit your original question if you have more information to provide.</li> <li>The latest version of SR WLED for the ESP32 has a sound pin configurator. Please review yours.</li> <li>Don't forget to check the pin on the LED settings page.</li> <li>Please provide a comprehensive, but clear and concise description of the symptoms and your environment.</li> <li>That includes things like exactly what board you're using, how many led's, are you using a level shifter</li> <li>Also, the exact steps you took to flash a binary and the steps you took after doing so.</li> <li>How about posting a crystal clear close-up photo of your wiring, or better yet, a block diagram.</li> <li>If something doesn't work as a result of an upgrade, did you roll back to ensure it still works?</li> <li>Don't just reboot the device. Actually, cycle the power (reference: IT Crowd).</li> <li>If you change the microphone pin/type, you need to reboot. If using an I2S microphone, you need to cycle the power on the device.</li> <li>You may need to re-flash/clear the device completely especially after a major update.</li> <li>SR WLED had to change from the default 'partition size' because we outgrew the default 1MB. As a result, you need to perform a 'Factory reset' after flashing it.</li> <li>Does the regular version of WLED work, while this one doesn't?</li> <li> <p>We have disabled (and do not support) additional services such as IR, Alexa, Blynk, MQTT and so on. In order to enable them, you'll need to go into the code (see wled.h), enable the service and then compile/upload. The WLED SR team does not support these services.</p> </li> <li> <p>If you are referring to code, please provide a link to the version you are referring to.</p> </li> <li>Is it just sound reactivity that doesn't work? Is there a specific animation?</li> <li>Is it an ESP32? An ESP8266? Please provide the link that you downloaded the files from.</li> <li>How exactly did you flash the device? See https://mm.kno.wled.ge/WLEDSR/Installing-and-Compiling</li> <li>Are you compiling from IDE? We are no longer supporting the Arduino IDE.</li> <li>Make sure your microphone is powered by the 3V pin and NOT Vin or 5V . . and that your LED's are NOT connected to that 3V pin either (source: experience).</li> <li>If you had previously used a 5V pin for your microphone, you may have blown that analog pin.</li> <li>Have you gone through initial settings?</li> <li>Is your audio all wired up OK? See here.</li> <li>Which microphone/input are you using and how is it configured?</li> <li>Leave the MAX4466 gain untouched. It works fine out of the box.</li> <li>Have you tested that microphone with a basic analog sound sampling sketch?</li> <li>You have an INMP441 or ICS-43434? Try the basic digital sound sampling sketch.</li> <li>What are the results of that sketch? Does it respond to your speech? A MAX4466 and INMP401 should average about 1875 on an ESP32, a MAX9814 about 1350 for all gain settings.</li> <li>Try a different pin when using that sketch if you're still not seeing good results.</li> <li>Have spares of everything. They're cheap and they break. (source: experience)</li> <li>How about power? Lots of LED's require lots of power and a common ground for everything.</li> <li>Does the latest release from WLED work?</li> <li>Are you using our most recent 'MASTER' release?</li> <li>Have you tried flashing our latest release?</li> <li> <p>Is your device working in AP mode?</p> </li> <li> <p>Got too much noise? Try lowering the current draw/brightness and clean up the wiring.</p> </li> <li>If it's a compile error, can you provide the errors?</li> <li>Have you made any changes to the source?</li> <li>UDP Sync not working? Have you tested WLED's built-in sync? Do you need to enable multicast on your network equipment?</li> <li>If your bootloader is broken, the binary may not load. Try the one from wled.me first.</li> <li>Can you document the steps to re-create that error?</li> <li>Make sure your grounds are all connected together.</li> <li>If you're using our 'dev' branch, don't forget to make a fresh 'pull'.</li> <li>See my FastLED support FAQ.</li> </ul> <p>MAX4466/ESP32 Sampling results - Quiet room</p> <p></p> <p>MAX4466/ESP32 Sampling results - Talking</p> <p></p> <p>The other analog input options should provide something similar.</p>"},{"location":"WLEDSR/My--device--is-not-working/#udp-sound-sync-issues","title":"UDP Sound Sync Issues","text":"<p>We received a support request reporting that UDP sound synchronization will take down a Wi-Fi network. The challenge with troubleshooting WiFi is that you need to configure your packet sniffer in monitor mode, something which is very difficult to achieve with most workstations. As a result, we are unable to see a lot of Wi-Fi network traffic.</p> <p>One setting to change on 'WiFi Setup' is to check on \"Disable WiFi sleep\" mode.</p> <p>As for UDP support, this article may shed some light on the challenges:</p> <p>https://superuser.com/questions/1287485/udp-broadcasting-not-working-on-some-routers</p> <p>In the meantime, UDP Sound sync has been configured to transmit 50 packets per second.</p>"},{"location":"WLEDSR/News/","title":"News","text":"<p>What's possibly on the horizon (no dates given):</p> <ul> <li>Add 2D orientation settings, but no multi-SEGMENT 2D orientation support.</li> <li>Yes, we'd love dynamic controls for each animation, but we think that may interfere with future releases from Aircoookie.</li> <li>We are working on adding multiple panels.</li> <li>Automatic gain control. It's a challenge because each animation uses sound variables differently. And yes, it will be there \ud83d\udc4d in the upcoming release.</li> <li>Improvements to our audio processing algorithms. More awesomeness for your LEDs.</li> <li>More and improved sound reactive effects.</li> </ul>"},{"location":"WLEDSR/News/#may-15-2021","title":"May 15, 2021","text":"<p>We've since added several 2D routines to WLED and in the process have determined that our ESP32 binary now consumes about 98.5% of flash memory, or in oil industry terms. . . We have reached peak Flash. As a result, we're going to look carefully into ALL of the animations and see which ones consume the most flash and with the least coolness. In the meantime, we've updated SR WLED to support a very recent Master of 0.12.0, which has seen some changes/fixes since it was originally released. Special thanks to THATDONFC for keeping SR WLED in sync with Aircoookie's updates. It's not a small job.</p>"},{"location":"WLEDSR/News/#january-13-2021","title":"January 13, 2021","text":"<ul> <li>Well that was a year, only for 2021 to say 'hold my beer'.</li> <li>We've been working on fixing bugs, including UDP sync issues among others.</li> <li>Normalizing frequency and volume response for different microphones.</li> <li>Testing/updating various routines to work with the above changes.</li> <li>Modified routines to better support the 'FastLED' way of doing things, specifically for leds[i+1] = leds[i] and vice versa.</li> <li>Dealing with platform related noise and spikes. Had to add an exponential filter combined with the squelch control.</li> <li>Added a few more animations, and took out one or two.</li> </ul>"},{"location":"WLEDSR/News/#november-5-2020","title":"November 5, 2020","text":"<ul> <li>The ESP8266 branch continues to be reliable for that platform, but NOT reliable for the regular build. Would love to know why. Update: It was probably RAM usage.</li> <li>Have fixed issues around SEGMENTS for various sound reactive animations. Ths issue was SEGMENT specific 'persistent' variables. Use the uint16_t SEGENV.aux0 or SEGENV.aux1 variables if you need those.</li> <li>That was updated for both the dev and ESP8266 branches.</li> <li>We now have a dedicated Sound Settings page.</li> </ul>"},{"location":"WLEDSR/News/#august-22-2020","title":"August 22, 2020","text":"<ul> <li>Our dev build now has INMP441 (digital microphone) support for the ESP32.</li> <li>Our dev build also now has a Gain settings control for volume reactive or '*' routines.</li> <li>Neither update has been rolled up into our main branch.</li> <li>We've had a lot of issues with AP mode and ESP8266's, so Andrew created an ESP8266 branch, downloaded the latest version of WLED and added just the volume reactive functionality to that branch.</li> <li>We'll be removing ESP8266 support from our dev and main branches over time. That will simplify coding significantly.</li> <li>apleschu is still busy with his cross continental move.</li> </ul>"},{"location":"WLEDSR/Noise-and-Spikes/","title":"Noise and Spikes","text":"<p>During the development of our sound reactive version of WLED, we've had several challenges with WiFi along with the ADC capability of the ESP devices.</p>"},{"location":"WLEDSR/Noise-and-Spikes/#esp8266","title":"ESP8266","text":"<p>After the code refactoring of WLED from .ino to .cpp files around April 2020, our ESP8266 code lost connection between the user interface and the ESP8266's web server. This eventually culimated in a re-write of a stripped down version of SR WLED dedicated just for the ESP8266. It included the UDP sound sync as a receiver (only), but supported none of the FFT or 2D functionality. This stripped down version seems to be stable, however that platform is now deprecated from further development.</p>"},{"location":"WLEDSR/Noise-and-Spikes/#esp32","title":"ESP32","text":"<p>Although the ESP32 did lose connection with the web server, it was nowhere near as bad as the ESP8266. </p>"},{"location":"WLEDSR/Noise-and-Spikes/#both-platforms","title":"Both platforms","text":"<p>On both platforms, we encountered significant spikes when using the analog ADC when the WiFi is active. There are numerous articles on this issue, along with various methods to reduce the noise. We've found that an I2S microphone, such as the INMP441 or ICS-43434 will provide a better response than any of the analog microphones or input methods that we support.</p> <p>Here's some test results with the analog input, including strong spikes observed very frequently.</p> <p></p> <p>Here's some references:</p> <ul> <li>https://www.atomic14.com/2020/09/12/esp32-audio-input.html</li> <li>https://www.youtube.com/watch?v=pPh3_ciEmzs</li> <li>https://www.youtube.com/watch?v=3g7l5bm7fZ8</li> <li>https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/peripherals/adc.html</li> <li>https://www.esp32.com/viewtopic.php?t=9613</li> <li>https://github.com/espressif/arduino-esp32/issues/92</li> <li>https://randomnerdtutorials.com/esp32-adc-analog-read-arduino-ide/</li> </ul> <p>Note: According to atomic14 in the above videos, the I2S microphones do not exhibit the issues found with the analog microphones.</p>"},{"location":"WLEDSR/Non-Reactive-Animations/","title":"Non-Reactive Animations","text":"<p>Note 1: Due to its limited capability, we have disabled 2D animations on the ESP8266 platform.   Note 2: The 2D routines require a minimum of 4 pixels in both directions. If you see blinking red, your 2D settings don't match the requirements. (not required in latest dev)   Note 3: As we continue to develop SR WLED, some animations may appear or disappear. It's still a work very much in progress. Some may only appear in the dev branch for now.  Note 6: In dev branch, sliders have been renamed from FFT Low to Custom 1, FFT High to Custom 2 and FFT Custom to Custom 3.     </p> <p>See also Reactive animations </p> <p>See List of effects and palettes for AC Animations.</p> <p>See ScottrBaileys GIF visualizer for animations of the effects</p> Effect Description Sliders \u2699\ufe0f ARTI-FX Define your own effects, see here No controls (yet) Flow Stripe Strip with rotating colours. Speed: Controls a speed timer Intensity: Controls another timer Perlin Move Using Perlin Noise for movement. Speed: Speed of elementsIntensity: # of pixelsFFT Low: Fade rate Wavesins Beat waves and phase shifting. Looks OK in 2D'ish as well. Speed: SpeedIntensity: Varying brightnessFFT Low: Starting colourFFT High: Range of coloursFFT Custom: More fun to adjust 2D Colored Bursts Multiple lines. Speed: Speed of linesIntensity: Number of lines 2D DNA A very cool DNA like pattern. Select a palette. Speed: Scroll speedIntensity: Blur 2D DNA Spiral Spiraling DNA pattern. Speed: Speed.Intensity: Frequency 2D Drift A rotating caleidoscope. Speed: Speed of rotation.Intensity: Blur 2D Fire2012 Mark Kriegsman's fire routine. n/a 2D Firenoise Using Perlin Noise for fire. Speed: Yscale.Intensity: Scale 2D Frizzles Moving patterns. Speed: One thingIntensity: Another thing 2D Gameoflife Scrolling game of life. Speed: Speed Intensity: Starting grid 2D Hiphotic A moving plasma. Speed: One directionIntensity: Other direction 2D Lissajous A frequency based Lissajous pattern. Speed: Frequency of cosIntensity: Frequency of sin 2D Matrix The Matrix in 2D. Speed: Affects the speed of the movementIntensity: Number of lines 2D Metaballs A cool plasma type effect. n/a 2D Plasma A plasma effect. Speed: Affects the speed of the movementFFT Low: Shifts the coloursFFT High: Distance from the plasma 2D Plasma Ball A ball of plasma. Speed: Speed. Intensity: 2D Polar Lights The northern lights. Speed: Speed.Intensity: Frequency.FFT Low: Palette rotation 2D Pool Noise Looking at a pool. n/a 2D Pulser Travelling waves. Speed: Speed. Intensity: Blur 2D Sindots Moving/rotating pattern. Speed: Speed. Intensity: Length/size 2D Squared Swirl Boxes moving around. fft3: Blur amount 2D Sun radiation The sun! Doesn't support segments. Speed: VarianceIntensity: Brightness 2D Twister A large twister. Speed: Speed Intensity: Phases 2D Tartan tbd 2D Julia tbd 2D Game of life tbd 2D Black hole tbd 2D Noise tbd"},{"location":"WLEDSR/Non-Reactive-Animations/#2d-clock-overlay","title":"2D Clock Overlay","text":"<p>To configure, go to Time &amp; Macros setting</p> <p>Time setup: fill in required parameters</p> <p>Clock: Clock overlay; Analog Clock, check Show 5min marks, uncheck the rest</p>"},{"location":"WLEDSR/Non-Reactive-Animations/#2d-animations","title":"2D Animations","text":"<p>Oh, and special thanks are in order for urish for creating wokwi, Elliot and his team for soulmatelights and Stepko and ldirko for some awesome 2D animations. With their approval, we were able to convert and publish several of their animations to use with WLED.</p>"},{"location":"WLEDSR/On-Lossy-Colours/","title":"On Lossy Colours","text":""},{"location":"WLEDSR/On-Lossy-Colours/#issue","title":"Issue","text":"<p>The following code moves the pixels down the line, but as it gets to the end, the intensity decreases significantly:</p> <p><code>setPixelColor(i, getPixelColor(i-1));</code></p>"},{"location":"WLEDSR/On-Lossy-Colours/#explanation","title":"Explanation","text":"<p><code>getPixelColor()</code> is lossy, whereas <code>setPixelColor()</code> perfectly sets the intended color. Unfortunately, the raw pixel memory buffer is also lossy, since it has to save the values scaled by master brightness. And unfortunately, if you do <code>s = x\\*b /255</code>, later doing <code>x = s\\*255/b</code> won't yield exactly the same result (thanks integer division). To solve this problem, we would need a secondary pixel data buffer.</p> <p>See: https://github.com/Aircoookie/WLED/issues/820</p>"},{"location":"WLEDSR/On-Lossy-Colours/#workarounds","title":"Workarounds","text":"<p>As a workaround, you could allocate memory for each function on the fly as a double buffer and use that, or you could hard code an array. Either way, you need to double up on the memory requirements and that is extremely limited with the ESP8266  and not recommended for that platform.</p>"},{"location":"WLEDSR/On-Lossy-Colours/#allocate-memory","title":"Allocate memory","text":"<p><pre><code>if (!SEGENV.allocateData(SEGLEN)) return mode_static();  // Allocation failed\nbyte* myVal = SEGENV.data;                               // Could also be an int or long or whatever.\n</code></pre> In this case, we are using that byte defined array for some function, but NOT to store full color values. You could then refer to <code>myVal[0]</code> up through <code>myVal[SEGLEN-1]</code> within the routine for that function. You could also define a <code>long</code>, then allocate the memory for it, and then store your colors in the array until you need to transfer them to the NeoPixel buffer at the end of your routine. See the transfer code below.</p> <p>One problem with dynamic memory allocation at the firmware level is that it can become segmented and fail.</p>"},{"location":"WLEDSR/On-Lossy-Colours/#hard-coded-array","title":"Hard-coded array","text":"<p>First off, I would encapsulate ALL of this with <code>#ifndef</code> statements because you can't guarantee memory available on an ESP8266. In FX.cpp, you would define globally:</p> <p><pre><code>#ifndef ESP8266\nuint32_t ledData[1500];  // Or whatever value.\n#endif\n</code></pre> Similarly, you would encapsulate all functions and definitions that support that array. In the (encapsulated) animation, you would do the following:</p> <pre><code>uint16_t WS2812FX::mode_myMode(void) {\n\n#ifndef ESP8266\n\nuint32_t* leds = ledData;\n\n// PERFORM ANIMATION MAGIC HERE!!\n\nfor (int i = SEGLEN; i &gt; 0; i--) {   // You can shift LED's the FastLED way.\nleds[i] = leds[i-1];\n}\n\nfor (int i= 0; i &lt; SEGLEN; i++) {    // Now send to the NeoPixelBus array\nc.h = (leds[i] &gt;&gt; 16) &amp; 0xFF;\nc.s = (leds[i] &gt;&gt; 8) &amp;0xFF;\nc.v = leds[i] &amp; 0xFF;\ncolor = c;                         // Implicit conversion to RGB supplied by FastLED\nsetPixelColor(i, color.red, color.green, color.blue);\n}\n#else\n// DO SOMETHING ELSE IF YOU WANT. Maybe a fade_out(32);\n#endif\n\nreturn FRAMETIME;\n} // mode_myMode()\n</code></pre>"},{"location":"WLEDSR/Other-Links/","title":"Other","text":""},{"location":"WLEDSR/Other-Links/#sr-wled-interfacing","title":"SR WLED interfacing","text":"<ul> <li>https://github.com/netmindz/WLED-sync</li> </ul>"},{"location":"WLEDSR/Other-Links/#fft-related","title":"FFT related","text":"<ul> <li>https://www.instructables.com/Faster-Than-the-Fastest-FFT-for-Arduino/</li> <li>https://github.com/espressif/esp-dsp/blob/master/docs/esp-dsp-benchmarks.rst</li> <li>The fastest thing for Arduino seems to be an assembly version of the \"fast Hartley transform\" (FHT) by openmusiclabs: http://wiki.openmusiclabs.com/wiki/ArduinoFHT</li> </ul>"},{"location":"WLEDSR/Other-Links/#audio-processing","title":"Audio processing","text":"<ul> <li>Musical Analysis: https://github.com/creaktive/pianolizer</li> </ul>"},{"location":"WLEDSR/Other-Links/#audio-drivers","title":"audio drivers","text":""},{"location":"WLEDSR/Other-Links/#es8388","title":"ES8388","text":"<ul> <li>Raw: https://github.com/thaaraak/ESP32-ES8388/blob/master/main/main.c</li> <li>Minimal library: https://github.com/perlix/es8388arduino/blob/main/example/i2sLoopback/i2sLoopback.ino</li> <li>AudioKit: https://github.com/pschatzmann/arduino-audio-tools/blob/main/examples/examples-stream/streams-i2s-i2s/streams-i2s-i2s.ino</li> <li>Espressif Audio Development Framework (ADF): https://github.com/espressif/esp-adf/</li> </ul>"},{"location":"WLEDSR/Persistent-Variables-and-WLED/","title":"Persistent Variables and WLED","text":""},{"location":"WLEDSR/Persistent-Variables-and-WLED/#introduction","title":"Introduction","text":"<p>Let's investigate persistent variables for the Arduino and how to use them, and then see how we can do so in WLED.</p> <p>Normally, for a given Arduino sketch you can define variables as follows:</p> <pre><code>  uint8_t var1 = 5;                 // A persistent global variable that is defined once.\n\n  void setup() {\n    Serial.begin(115200);\n  }\n\n  void loop() {\n    routine1();\n  }\n\n  void routine1() {\n    uint8_t var2;                   // A non-persistent local variable.\n    static uint8_t var3;            // A persistent local variable.\n\n    Serial.print(var1); Serial.print(\"\\t\"); Serial.print(var2); Serial.print(\"\\t\"); Serial.println(var3);\n\n    var1 = 7;\n    var2 = 10;\n    var3 = 25;\n\n    delay(1000);\n  }\n</code></pre> <p>The first time you run through the loop, we'll see the following, where only var1 has been assigned a non-zero value:</p> <pre><code>  5    0     0\n</code></pre> <p>At the end of the first loop, all the variables were assigned values. The second time through the loop, var1 was already changed to 7 in the first loop, while var2 is non-persistent and has yet to have a value assigned in this loop. The variable var3 is a 'persistent' local variable, with a value assigned in the first pass of the loop. Output will be:</p> <pre><code>  7    0    25\n</code></pre> <p>So, we have global and local variables, as well as persistent and non-persistent ones. Local variables require the 'static' keyword in order for them to keep their values (or be persistent) between function calls, while ALL global variables are persistent.</p>"},{"location":"WLEDSR/Persistent-Variables-and-WLED/#enter-wled","title":"Enter WLED . . .","text":"<p>Although you CAN use the static keyword in a WLED animation to define a persistent variable, that variable will have the same value for ALL of the segments, and may not result in the desired properties. As a result, you may need to define a persistent variable unique to each SEGMENT.</p> <p>WLED has a SEGMENT runtime structure that supports persistency. The only problem is that it has a limited number of pre-defined variables for generic use by animations (in FX.cpp). The readily available variables (as defined in FX.h) are:</p> <pre><code>uint16_t SEGENV.aux0;               // Available for your routine.\nuint16_t SEGENV.aux1                // Available for your routine.\nbyte* SEGENV.data;                  // Available for your routine.\n</code></pre> <p>SEGENV.aux0 and SEGENV.aux1 are both unsigned 16 bit values, which you can use as persistent variables in your routines and will be unique for each SEGMENT. The question is, what if you need:</p> <ul> <li>A floating point or long variable?</li> <li>An array?</li> <li>A structure?</li> </ul> <p>At that point, you'll need to make use of that *byte SEGENV.data pointer and allocate memory for it and then redefine how it's used. Let's examine some methods to do so and review some of the animations in FX.cpp to do so. WLED has a method called SEGENT.allocateData() which allocates memory for your animation. Here's some examples of how to use that.</p>"},{"location":"WLEDSR/Persistent-Variables-and-WLED/#basic-memory-allocation","title":"Basic Memory Allocation","text":"<p>In its simplest form, the routine mode_dynamic() just performs a basic request to allocate space for the length of a given SEGMENT with:</p> <p>`  if (!SEGENV.allocateData(SEGLEN)) return mode_static();           // If it fails, WLED runs mode_static().</p> <p>It doesn't make use of additional variables and is probably a good idea to implement on other animations, especially in a limited environment such as the ESP01 and with a considerable number of LED's.</p>"},{"location":"WLEDSR/Persistent-Variables-and-WLED/#an-array","title":"An Array","text":"<p>Next up is mode_multi_comet(), which reserves space for 8 uint16_t values for an array of comets.</p> <pre><code>  if (!SEGENV.allocateData(sizeof(uint16_t) * 8)) return mode_static(); //Allocates based on the size of 8 uint16_t variables\n\n  uint16_t* comets = reinterpret_cast&lt;uint16_t*&gt;(SEGENV.data);          // It then redefined that byte* pointer to uint16_t comets[16].\n\n  Now you can use things like:\n\n  for (int i=0; i&lt;8; i++) {\n    comets[i] = 65535;          // Or other uint16_t value.\n  }\n</code></pre>"},{"location":"WLEDSR/Persistent-Variables-and-WLED/#a-structure","title":"A Structure","text":"<p>Finally, we'll look into ripple_base(), which allocates persistent memory for a 'Ripple' structure. First off, we define the structure externally to the animation and call it 'ripple'.</p> <pre><code>  typedef struct Ripple {\n    int8_t state;\n    uint8_t color;\n    uint16_t pos;\n  } ripple;\n</code></pre> <p>From within the ripple_base() routine, we determine the number of ripples we want to support for each segment. In this case, we'll say:</p> <p>` uint16_t maxRipples = 1 + (SEGLEN &gt;&gt; 2);</p> <p>Next, we determine how much memory we need, where 'sizeof' returns number of bytes occupied by a variable of a given type.</p> <p>`  uint16_t dataSize = sizeof(ripple) * maxRipples;</p> <p>Next, we allocate the memory, and then re-define it as our structure: <pre><code>  if (!SEGENV.allocateData(dataSize)) return mode_static();\n  Ripple* ripples = reinterpret_cast&lt;Ripple*&gt;(SEGENV.data);\n</code></pre></p> <p>Now, we can use our structure, up to maxRipples-1:</p> <pre><code>  for (uint16_t i = 0; i &lt; maxRipples; i++) {\n    ripples[i].pos   = ???;  // uint16_t\n    ripples[i].state = ???;  // int8_t\n    ripples[i].color = ???;  // uint8_t\n  }\n</code></pre>"},{"location":"WLEDSR/Persistent-Variables-and-WLED/#a-floating-point-variable","title":"A Floating Point Variable","text":"<p>As an exercise, let's just allocate a single floating point variable:</p> <pre><code>  if (!SEGENV.allocateData(sizeof(float))) return mode_static();\n  float* expAdj = reinterpret_cast&lt;float*&gt;(SEGENV.data);          // We then redefine that byte* pointer to a float.\n</code></pre> <p>We should now be able to use the persistent floating point variable 'expAdj' with our routine and it should work with ALL segments indepently of each other.</p> <pre><code>  expAdj = 1.2345;\n</code></pre>"},{"location":"WLEDSR/Reactive-Animations/","title":"Sound Reactive Animations","text":"<p>Note 1: Effects beginning with <code>\u266a</code> (<code>*</code> in list below) are volume only.</p> <p>Note 2: Effects beginning with <code>\u266b</code> (<code>**</code> in list below) use FFT (Fast Fourier Transforms) for frequency detection.    </p> <p>Note 3: We have also not added 2D animations to the ESP8266 platform. ESP8266 is depricated in SR WLED, so we recommend that you use ESP32.</p> <p>Note 4: The 2D routines require a minimum of 4 pixels in both directions. If you see blinking red, your 2D settings don't match the requirements. (not required in latest dev)  </p> <p>Note 5: As we continue to develop SR WLED, some animations may appear or disappear. It's still a work very much in progress. Some may only appear in the dev branch for now.    </p> <p>Note 6: In dev branch, sliders have been renamed from FFT Low to Custom 1, FFT High to Custom 2 and FFT Custom to Custom 3.    </p> <p>See also Non reactive animations </p> <p>See List of effects and palettes for AC Animations.</p> <p>See ScottrBaileys GIF visualizer for animations of the effects</p> Effect Description Sliders * 2D Swirl Several blurred circles. Looks good with pink plasma palette. Supports AGC. Speed: Speed  Intensity: SensitivityFFT Low: Blur * 2D Waverly Noise waves with some sound Speed: AmplificationIntensity: Sensitivity * Gravcenter Volume reactive vu-meter from center with gravity and perlin noise. Speed: Rate of fall  Intensity: Sensitivity * Gravcentric Volume reactive vu-meter from center with gravity. Volume provides index to (time rotating) palette colour. Speed: Rate of fall  Intensity: Sensitivity * Gravimeter Volume reactive vu-meter with gravity and perlin noise. Speed: Rate of fall  Intensity: Sensitivity * Juggles Juggling balls. Speed: Yes  Intensity: # of balls * Matripix Similar to Matrix. Speed: yes  Intensity: Brightness * Midnoise Perlin noise emanating from center. Speed: Fade rate  Intensity: Maximum length * Noisefire A perlin noise based volume reactive fire routine. n/a * Noisemeter Volume reactive vu-meter. Speed: Fade rate  Intensity: Width * Pixels Random pixels. Speed: Fade rate  Intensity: # of pixels * Pixelwave Pixels emanating from center. Speed: yes  Intensity: Sensitivity * Plasmoid Sine wave based plasma. Intensity: # of pixels * Puddlepeak Blast coloured puddles randomly up and down the strand with the 'beat'. Speed: Adjust fade rate. Intensity: Size of puddles FFT High: 256 freq bin select on ESP32. FFT Custom: Volume comparator on ESP32 * Puddles Blast coloured puddles based on volume. Speed: Fade rate  Intensity: Size of puddle * Ripple Peak Peak detection triggers ripples. Intensity: Max number of ripples. FFT High: 256 freq bin select on ESP32 FFT Custom: Volume comparator on ESP32 * Waterfall A volume AND FFT version of a Waterfall that has 'beat' support. Speed: Speed  Intensity: Adjust colour ** 2D CenterBars A 16x16 spectral analysis routine emanating from the center Speed: Bar Speed  Intensity: Ripple time FFT Custom1: Center horizontally FFT Custom2: Center vertically FFT Custom3: Color vertically ** 2D Funky Plank A 2D wall of reactivity running from bottom to top Speed: Scroll Speed  FFT Custom1: Number of bands ** 2D GEQ A 16x16 graphic equalizer. Speed: Bar Speed  Intensity: Ripple timeFFT Custom1: Number of bands ** Binmap Map bins 3-255 throughout the length of the LEDs. This does not work with UDP sync.Values are not normalized. Intensity: Max volume ** Blurz Flash an fftResult bin per frame and then blur/fade. Speed: Fade Rate Intensity: Blurring ** DJLight An effect emanating from the center to the edges. Speed: Speed ** Freqmap Map the loudest frequency throughout the length of the LED's. Speed: Fade rateIntensity: Starting colour ** Freqmatrix See below See below ** Freqpixels Random pixels coloured by frequency. Speed: Fade rateIntensity: Starting colour and number of pixels ** Freqwave See below See below ** Gravfreq VU Meter from center. Log of frequency is index to center colour. Speed: Rate of fallIntensity: Sensitivity ** Noisemove Using perlin noise as movement for different frequency bins. Speed: Speed of perlin movement  Intensity: Fade rate ** Rocktaves Colours the same for each note between octaves, with sine wave going back and forth. Speed: n/aIntensity: n/a ** Waterfall FFT version of a Waterfall. Speed: Speed  Intensity: Adjust colourFFT High: 256 freq bin select on ESP32 FFT Custom: Volume comparator on ESP32 ** DJ Light tbd ** 2D Akemi tbd"},{"location":"WLEDSR/Reactive-Animations/#slider-usage","title":"Slider Usage","text":"<p>Please see the brief slider descripion for each effect in the rightmost column above.</p>"},{"location":"WLEDSR/Reactive-Animations/#speedintensity","title":"Speed/Intensity","text":"<p>These typically reflect the value of their namesake. Intensity would typically be number of LED's lit, or brightness of the LED's</p>"},{"location":"WLEDSR/Reactive-Animations/#fft-sliders","title":"FFT Sliders","text":"<p>These may get renamed in the future and could be used for FFT routines OR for additional effect adjustments.</p>"},{"location":"WLEDSR/Reactive-Animations/#peak-detection","title":"Peak Detection","text":"<p>This is NOT beat detection, but rather samples that are louder than a the current average plus a slider adjustable value.</p>"},{"location":"WLEDSR/Reactive-Animations/#automatic-gain-control","title":"Automatic Gain Control","text":"<p>We are just beginning to add Automatic Gain Control to the routines, starting with 2D Swirl. This setting is only available on the LED Preferences page on the ESP32.</p>"},{"location":"WLEDSR/Reactive-Animations/#fft-routines","title":"FFT Routines","text":""},{"location":"WLEDSR/Reactive-Animations/#additional-effect-notes","title":"Additional effect notes","text":""},{"location":"WLEDSR/Reactive-Animations/#freqmatrix","title":"Freqmatrix","text":"<p>The temporal tail for this animation starts at the beginning of the Segment rather than in the center of the segment.</p> <p>Sliders used:</p> <p>Slider usage is described in the rightmost column for each effect. In general, the sliders are configured for:</p> <ol> <li>Speed: This determines the time delay before each pixel is moved down the line.</li> <li>Intensity: This determines how MUCH the sound input affects the selected effect.</li> <li>FFT Low: Can be an additional adjustment. Can also select low end of frequency bins if used by that effect.</li> <li>FFT High: Can be an additional adjustment. Can also select high end of frequency bins if used by that effect.</li> <li>FFT Custom: Can be an addiitional adjustment.</li> </ol>"},{"location":"WLEDSR/Reactive-Animations/#freqwave","title":"Freqwave","text":"<p>This effect maps the major frequencies from the incoming signal to colors in the HSV color space. From the low notes being mapped to red (0) to the high notes being mapped to blue (255) and everything in between. The band you are looking at can be restricted by the FFT Low and FFT High sliders. We are digitizing at 10240Hz, meaning the highest frequency bin that you can find is 5120Hz, which for most music is just fine.</p> <p>Sliders used:</p> <ol> <li>Speed: This determines the time delay before each pixel is moved down the line.</li> <li>Intensity: This determines how MUCH the sound input affects the selected effect.</li> <li>FFT Low: The low cut off for the FFT bins. Values range from 0-100. Good values are from 0 to 10</li> <li>FFT High: High cut off for the FFT bins. Values range from 0-100. This is important because every type of music is different and what is considered a high note in one type of music is not the case in others. </li> <li>FFT Custom: This slider works similarly to a \"pre-amp\" for the input signal. The possible values for this slider are 1-10. A good starting point for this is around 2-3.</li> </ol>"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/","title":"Running Sound Reactive WLED","text":""},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#captive-portal","title":"Captive Portal","text":"<p>When you first connect to a WLED device in AP mode, there is some really annoying behavior on the captive portal implementation in Android. The captive portal is the limited browser you are forwarded to in order to login to a web site. What happens is that if you go into 'Effects', you can't scroll up. In order to get around that, click the three dots at the top right of the page, select 'Use Network as is', then open up Chrome and navigate to the site at 4.3.2.1.</p>"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#initial-sound-reactive-settings","title":"Initial Sound Reactive Settings","text":"<p>On the \"Sound Settings\" page, configure the Squelch for a value (default is 10) to reduce your background noise for volume reactive effects. Volume reactive effects start with a single '*'. Typically, values between 4 and 20 should suffice. The higher the number, the greater the background noise is suppressed.   </p> <p>Configure the Gain setting (default is 60) to change the \"perceived volume\" of the input signal. More info on Squelch and Gain here.</p>"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#initial-2d-settings-esp32-only","title":"Initial 2D Settings - ESP32 Only","text":"<p>When changing any values in the LED settings page, you'll need to update the 2D settings. If not using a 2D matrix, you can set them to 1 x  or vice versa.  If using a 2D matrix, configure these values for width x height. A value of less than 4 in either dimension will not work with some of the 2D animations. <p>The serpentine parameter configures whether the LED's are wired up in a continuous/serpentine layout or top to bottom and repeat.</p>"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#initial-udp-sync-settings","title":"Initial UDP Sync Settings","text":"<p>Devices can be configured as 'disabled', 'transmit' or 'receive' UDP sound. This is completely independent of the 'Sync' button, which synchronizes effects. </p> <p>As a result, you can run multiple types of sound reactive animations when UDP Sound Sync is enabled. This feature provides a subset of the sound and FFT data to several 'slave' devices. As a result, some FFT enabled routines will not function in this mode. You must RESET the ESP32 after you enable/disable this on the Sync settings page.</p>"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#connect-to-wled","title":"Connect to WLED","text":"<ol> <li>Open up settings on your phone or computer.</li> <li>Navigate to your Wi-Fi settings.</li> <li>Look for the WLED SSID, default is \"WLED-AP\".</li> <li>Enter the password, the default is \"wled1234\".</li> <li>Once connected, you should automatically be re-directed to your LED strip.</li> <li>This gets you to the limited captive portal 'browser'.</li> <li>If not, open up a browser and navigate to 4.3.2.1.</li> </ol>"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#configure-a-bootup-effects-sequence","title":"Configure a bootup effects sequence","text":"<ol> <li>From the main screen, click on \"TO THE CONTROLS!\"</li> <li>Select the \"Effects\" tab.</li> <li>Select an effect mode, i.e. \"Bpm\".</li> <li>Adjust overall brightness, speed, and intensity/fade rate.</li> <li>Select the \"Colors\" tab.</li> <li>Select one of the palettes, such as \"Beach\".</li> <li>Select the \"Favorites\" tab.</li> <li>Select the \"Saving mode\" checkbox.</li> <li>Save to slot \"1\".</li> <li>Check the \"Preset\" cycle.</li> <li>Select the Config cog at the top right of the application display.</li> <li>Select \"LED Preference\".</li> <li>Check \"Set current preset cycle setting as boot default\" checkbox.</li> <li>Click on \"Save\" at the bottom of the screen.</li> </ol>"},{"location":"WLEDSR/Running-Sound-Reactive-WLED/#reset-the-device","title":"Reset the device","text":"<ol> <li>Log in to the device. If you cannot log in, then you need to Reflash the device, which may default to AP mode.</li> <li>Select the Config cog at the top right of the application display.</li> <li>Select \"Security and Updates\".</li> <li>Check \"Factory reset\".</li> <li>Click on \"Save &amp; reboot\".</li> <li>Reverts to the initial AP Mode and all other settings are gone.</li> </ol>"},{"location":"WLEDSR/Settings/","title":"Settings","text":""},{"location":"WLEDSR/Settings/#aircoookies-led-settings","title":"AirCoookie's LED settings","text":"<p>See WLED General Led Settings</p>"},{"location":"WLEDSR/Settings/#led-settings-for-sound-reactive-additions","title":"LED Settings for Sound Reactive Additions","text":"<p>See LED Preferences</p>"},{"location":"WLEDSR/Settings/#sound-reactive-settings","title":"Sound Reactive Settings","text":"<p>See Sound Settings</p>"},{"location":"WLEDSR/Squelch-and-Gain/","title":"Squelch and Gain","text":""},{"location":"WLEDSR/Squelch-and-Gain/#introduction","title":"Introduction","text":"<p>In order to accommodate a wide range of audio inputs, ambient environments and string lengths, we have added user configurable squelch (noise reduction/suppression) and gain controls on the LED settings page for the volume reactive animations.</p>"},{"location":"WLEDSR/Squelch-and-Gain/#squelch","title":"Squelch","text":"<p>Adjust this value on the LED Settings page so that the leds are only activated above a certain 'background noise' level.</p>"},{"location":"WLEDSR/Squelch-and-Gain/#gain","title":"Gain","text":"<p>Line-in signals are typically much lower than that of some of the microphones. Rather than use an auto gain function, you can manually adjust the gain from 1 to 255, which translate up to almost 6.0 gain.</p> <p>In addition, the 'Intensity' slider can sometimes adjust an animation to simulate increased gain.</p>"},{"location":"WLEDSR/Squelch-and-Gain/#how-to","title":"How To","text":"<p>Here's a method to setup squelch and gain for your SR WLED Device.</p> <ol> <li>Start out with the routine '*Gravcenter' with default sliders in the middle.</li> <li>Go to the sound settings configuration page.</li> <li>Increase gain to a high value, let's say 234 (or higher) and set the squelch to '1' , AGC off, and save.</li> <li>Depending on your input, you should now see the led's flashing.</li> <li>In a quiet environment, increase and occasionally save the squelch incrementally until the led's are no longer flashing.</li> <li>Once that's done, make noise appropriate to your 'noisy' environment and number of led's. Then adjust/save the gain so that the led's are responding appropriately.</li> <li>Note that some of the animations allow further sensitivity adjustment with the 'Intensity' setting.</li> <li>Check out the 'Sound Reactive Animations' page to see what controls are available for each animation.</li> </ol>"},{"location":"WLEDSR/Squelch-and-Gain/#voltage-fluctuation","title":"Voltage Fluctuation","text":"<p>From faulty microphones to flaky wiring, to WiFi related issues, particularly in AP mode, getting reliable and spike free sound sampling with WLED and in particular analog sampling has been a challenge. Digital microphones such as the INMP441, the ICS-43434 provide the best results.</p>"},{"location":"WLEDSR/Testing/","title":"Testing","text":"<p>IMPORTANT NOTE:</p> <p>When testing the UI, make sure to refresh your web browser. It may have cached incorrect information.</p>"},{"location":"WLEDSR/Testing/#compile","title":"Compile","text":"<ul> <li>Compile/run on ESP32.</li> <li>Compile/run on ESP8266.</li> </ul>"},{"location":"WLEDSR/Testing/#network","title":"Network","text":"<ul> <li>Configure/test for AP mode.</li> <li>Configure/test for STA mode.</li> </ul>"},{"location":"WLEDSR/Testing/#colors","title":"Colors","text":"<ul> <li>Test Default palette as well as defined palettes.</li> <li>Test RGBW.</li> <li>Test with various effects.</li> </ul>"},{"location":"WLEDSR/Testing/#effects","title":"Effects","text":"<ul> <li>Test each effect with/without palette.</li> <li>Ensure they are all present and line-up.</li> </ul>"},{"location":"WLEDSR/Testing/#segments","title":"Segments","text":"<ul> <li>Configure multiple segments.</li> <li>Configure multiple groups.</li> <li>Segment options.</li> </ul>"},{"location":"WLEDSR/Testing/#sound","title":"Sound","text":"<ul> <li>Configure squelch setting.</li> <li>Reboot.</li> <li>Microphone input sensitivity.</li> </ul>"},{"location":"WLEDSR/Testing/#2d","title":"2D","text":"<ul> <li>Test different sizes, i.e. 1x32, 16x16, etc.</li> <li>Serpentine/linear.</li> <li>Single/multi-panels.</li> <li>Layouts</li> </ul>"},{"location":"WLEDSR/Testing/#udp-sound-sync","title":"UDP Sound Sync","text":"<ul> <li>Test ESP32 to ESP8266 sync.</li> <li>Test ESP32 to ESP32 sync.</li> <li>Test all modes.</li> </ul>"},{"location":"WLEDSR/Testing/#eeprom","title":"EEPROM","text":"<ul> <li>Ensure EEPROM changes survive reboot.</li> <li>Test with ESP32.</li> <li>Test with ESP8266.</li> <li>(Ensure EEPROM default is not 255 or 65535 - Not done yet).</li> <li>OTA updates.</li> </ul>"},{"location":"WLEDSR/UDP-Sound-Sync/","title":"UDP Sound Sync","text":"<p>UDP Sound Sync is a feature to synchronize (share) the sound input of a 'master' device with one or more 'slave' devices. All devices must be running the same release of SR WLED, and they must be in the same local network. Sound Sync is not availeable in \"upstream\" WLED by Aircookie. Sound Sync is also different from direct LEDs control using protocols like E1.31, DMX, DDP or AdaLight.</p> <p>UDP Sound Sync does not sync the actual animations, but rather transmits summary audio sampling information to several devices that still run their own animations locally. In a nutshell, it means that several devices can share a single microphone.</p>"},{"location":"WLEDSR/UDP-Sound-Sync/#setup","title":"Setup","text":"<p>Before configuring UDP Sound Sync, make sure you have gone into the WiFi Preferences and clicked on 'Disable WiFi sleep' at the bottom of the page. It has caused us innumerable problems in the past.</p> <p>In order to configure UDP sound sync, the \u2018master\u2019 needs to be an ESP32 along with an audio input.</p> <p>You would then to go the \u2018Sync Interfaces\u2019 page and configure the 'Audio Sync' at the bottom of the page. <code>Transmit</code> for the ESP32 and <code>Receive</code> for devices without an audio input (either ESP32's or ESP8266's). Make sure the UDP port is the same on all devices.</p> <p>This does not sync the actual animations, but rather just the transmission of summary audio sampling information (as best we can).</p> <p>In order to change the UDP Sync Mode (Disabled/Transmit/Receive), you need to power-cycle the ESP32/ESP8266.</p>"},{"location":"WLEDSR/UDP-Sound-Sync/#technical","title":"Technical","text":"<p>When an ESP32 is configured for audio transmission, it will connect to a UDP Multicast address, and begin sending a single UDP Multicast packet containing the data used to generate sound-reactive animations out to any other devices that are configured to receive on the same network.  The following information is transmitted:</p>"},{"location":"WLEDSR/UDP-Sound-Sync/#v1-format-used-in-sr-wled-up-to-013x","title":"V1 format, used in SR WLED up to 0.13.x","text":"<pre><code>#define UDP_SYNC_HEADER \"00001\"\nstruct audioSyncPacket {\nchar header[6] = UDP_SYNC_HEADER;\nuint8_t myVals[32];     //  32 Bytes\nint sampleAgc;          //  04 Bytes\nint sampleRaw;          //  04 Bytes\nfloat sampleAvg;        //  04 Bytes\nbool samplePeak;        //  01 Bytes\nuint8_t fftResult[16];  //  16 Bytes - FFT results, one byte per GEQ channel\ndouble FFT_Magnitude;   //  08 Bytes\ndouble FFT_MajorPeak;   //  08 Bytes\n};\n</code></pre> <p>UDP_SYNC_HEADER is a versioning number that's defined in audio_reactive.h</p>"},{"location":"WLEDSR/UDP-Sound-Sync/#v2-format-wled-version-0140-including-moonmodules-fork","title":"V2 Format - WLED version &gt;= 0.14.0 (including MoonModules fork)","text":"<pre><code>#define UDP_SYNC_HEADER_V2 \"00002\"\n// new \"V2\" AC 0.14.0 audiosync struct - 40 Bytes\nstruct audioSyncPacket_v2 {\nchar    header[6] = UDP_SYNC_HEADER_V2; // 06 bytes, last byte is '\\0' as string terminator.\nfloat   sampleRaw;      //  04 Bytes  - either \"sampleRaw\" or \"rawSampleAgc\" depending on soundAgc setting\nfloat   sampleSmth;     //  04 Bytes  - either \"sampleAvg\" or \"sampleAgc\" depending on soundAgc setting\nuint8_t samplePeak;     //  01 Bytes  - 0 no peak; &gt;=1 peak detected. In future, this will also provide peak Magnitude\nuint8_t reserved1;      //  01 Bytes  - reserved for future extensions like loudness\nuint8_t fftResult[16];  //  16 Bytes  - FFT results, one byte per GEQ channel\nfloat  FFT_Magnitude;   //  04 Bytes  - magnitude of strongest peak in FFT\nfloat  FFT_MajorPeak;   //  04 Bytes  - frequency of strongest peak in FFT\n};\n</code></pre> <p>The V2 format expects that AGC is performed by the sender, so there is no need to transmit \"AGC\" and \"non-AGC\" samples separately. To save bandwidth, the <code>myvals[]</code> array was removed, and all numbers are either <code>float</code> or <code>uint8_t</code>.</p> <p>SR-WLED 0.13.3 still sends out V1 format, however it is able to receive and decode V2 format, too.</p>"},{"location":"WLEDSR/UDP-Sound-Sync/#what-else","title":"What else ?","text":"<p>You might want to take a look at this library, which allows to send and receive WLED Audio Sync data independent from WLED.</p> <p>When an ESP32 or ESP8266 is configured to receive audio data from another device, the receiver will disable any onboard microphone sampling and FFT processing, in favor of audio data received from the network.  Any time a UDP Multicast packet is received from a transmitter, it will be treated as a discrete microphone sample and stored in memory the same way it would be if it were a local microphone.</p> <ul> <li> <p>An ESP8266 will not be able to use any FFT data transmitted from an ESP32, as a result of the differences in hardware and software.</p> </li> <li> <p>The UDP \u00a0Multicast\u00a0 IP is <code>239.0.0.1</code>, and the default UDP port is <code>11988</code>.</p> </li> <li> <p>UDP port can be changed in WLED config pages, for example to have several groups of devices by assigning different UDP ports to each group.</p> </li> <li> <p>UDP multicast is generally not very reliable with typical \"consumer grade hardware\". Some users found that creating a \"port forwarding rule\" on their local Wifi router helps. For example, you could create a \"dynamic port forwarding rule\" for UDP port 11988.</p> </li> </ul> <p>UDP Sound sync brought to you by @spedione on Discord.</p> <p>Reference: https://github.com/Aircoookie/WLED/wiki/UDP-Realtime-Control</p>"},{"location":"WLEDSR/Using-my-PC-for-the-Sound/","title":"Using my PC for the Sound","text":"<p>Q. Is it possible to use my PC for the sound and without using the microphone, or any ADC pins on the board.</p> <p>The sound reactive fork of WLED was designed as an all-in-one unit that doesn't require the intervention of a PC. You can setup a display and have it run completely independently. It supports your PC's analog line-out signal, several analog microphones, an INMP441 digital microphone, as well as UDP sound sync:</p> <p>https://mm.kno.wled.ge/WLEDSR/UDP-Sound-Sync</p> <p>To answer this question, not directly, except for the line-out signal. Although we support UDP sound sync, someone would have to write a program for their OS of choice to capture the sound from the PC, perform FFT calculations, and UDP transmit the sampled data (the packet matching our sound reactive WLED data structure). That's a non-trivial course of action.</p> <p>All that being said, LedFx (as found at https://github.com/LedFx/LedFx) may be just the solution for this use case. Since WLED supports UDP, DDP, and E1.31 DMX protocols, you can use the sound reactive LedFx running on your PC to control a WLED device. There's an excellent video on setting this environment up at https://www.youtube.com/watch?v=ipSfQdfX4fE</p> <p>LedFx will then directly control the LED's on your WLED device, although you can still revert to native WLED animations.</p>"},{"location":"WLEDSR/WLED-Programming-Notes/","title":"Introduction","text":"<p>This version of WLED contains sound reactive routines, which are prefaced with a <code>* FX_NAME</code> for volume reactive routines and <code>** FX_NAME</code> for FFT routines. Each is controllable by the intensity and/or speed sliders. Some routines also include 3 dedicated FFT control sliders.</p> <p>**Caveat: As our sound reactive fork of WLED evolves, some of this content may become out of date. We'll update as we become aware of any issues.</p> <p>Contents:</p> <ul> <li>HTTP API Links, Updating FX.h, Updating FX.cpp</li> <li>WLED Support Functions</li> <li>Important WLED variables, Important Structures</li> <li>Delays in WLED, Displaying LEDs, FastLED, 2D Functionality</li> <li>Variable Length Arrays, Using CRGB Color Space, Using CHSV Colour Space</li> <li>Non-Dynamically Created Variable Arrays</li> <li>Sound Reactive EEPROM Layout</li> </ul> <p>Caveat: Some information on this page is in our 'dev' branch only and not yet ready for prime time.</p>"},{"location":"WLEDSR/WLED-Programming-Notes/#http-api-links","title":"HTTP API Links","text":"<p>I hope to work on an Android application in the future, so I'm keeping notes on the HTTP API. * https://tynick.com/blog/01-28-2020/controlling-wled-with-raspberry-pi-using-the-wled-api/ * https://github.com/Aircoookie/WLED/wiki/HTTP-request-API</p>"},{"location":"WLEDSR/WLED-Programming-Notes/#updating-fxh-line-numbers-will-vary","title":"Updating FX.h (line numbers will vary)","text":"<ul> <li>Line 105 \u2013 Update the mode count.</li> <li>Line 250 - Added extern variables around line 250 of FX.h. These are defined in audio_reactive.h.</li> <li>Line 214 \u2013 Update the defines.</li> <li>Line 456 \u2013 Update the _mode.</li> <li>Line 697 \u2013 Update the mode definition and don\u2019t forget , and ;</li> <li>Line 816 \u2013 Update the JSON entry. Can add an extra entry. No Spaces, 10 per line!!</li> </ul>"},{"location":"WLEDSR/WLED-Programming-Notes/#updating-fxcpp","title":"Updating FX.cpp","text":"<p>Append the new function(s) and use current functions as templates. Cannot add any functions without accompanying index entry. </p>"},{"location":"WLEDSR/WLED-Programming-Notes/#wled-support-functions","title":"WLED Support Functions","text":"<ul> <li><code>fade_out(uint8_t rate);</code>                 - This is CRITICAL!!!</li> <li><code>blur(uint8_t blur_amount);</code>              - Can be useful.</li> <li><code>color_wheel(uint8_t index);</code>             - This has history with NeoPixel library. I use palettes instead.</li> </ul>"},{"location":"WLEDSR/WLED-Programming-Notes/#important-wled-variables","title":"Important WLED variables","text":"<ul> <li><code>SEGLEN</code>                // uint16_t - Segment length.</li> <li> <p><code>_segment_index</code>            // uint8_t - Current segment being displayed.</p> </li> <li> <p><code>SEGMENT.length</code>              // uint16_t - Segment length (but not for ESP8266 :^/ )</p> </li> <li><code>SEGMENT.intensity</code>          // uint8_t - You can use this from the slider.</li> <li><code>SEGMENT.speed</code>              // uint8_t - You can use this from the slider.</li> <li><code>SEGMENT.palette</code>            // uint8_t - Current palette. Otherwise SEGCOLOR(0) and SEGCOLOR(1).</li> <li><code>SEGMENT.mode</code>             // uint8_t - Current mode.</li> <li><code>now</code>            // uint32_t \u2013 Millis counter.</li> <li><code>SEGENV.call</code>        // uint32_t \u2013 Counter each time a routine is called. Can be used for 'setup'.</li> <li><code>SEGENV.next_time</code>           // uint32_t \u2013 Millis counter.</li> <li><code>SEGENV.step</code>              // uint32_t - Counter each time a routine is called.</li> <li><code>SEGENV.aux0</code>             // uint16_t   - Available for use as a SEGMENT specific persistent variable.</li> <li><code>SEGENV.aux1</code>            // uint16_t   - Available for use as a SEGMENT specific persistent variable.</li> </ul>"},{"location":"WLEDSR/WLED-Programming-Notes/#important-structures","title":"Important Structures","text":"<ul> <li>FX.h:267 - Segment aka SEGMENT <li>FX.h:318 - Segment runtime.value&gt; aka SEGENV</li> <li>FX.h:66  - Other stuff</li>"},{"location":"WLEDSR/WLED-Programming-Notes/#delays","title":"Delays","text":"<p>You DO NOT use delay statements here, except to keep the watchdog happy. Here is the awesome FastLED method of timing/scheduling (which DOES NOT work with segments):</p> <pre><code>EVERY_N_MILLISECONDS_I(pixTimer, SEGMENT.speed) {\npixTimer.setPeriod(256 - SEGMENT.speed);\n// Put your display code here.\n}\n</code></pre> <p>Here's the standard blink without delay version:</p> <pre><code>long lastTime = 0;\nint delayMs = 2000;            // We want to do something every 2 seconds.\n\nvoid userLoop()\n{\nif (millis()-lastTime &gt; delayMs)\n{\nlastTime = millis();\n//do something you want to do every 2 seconds\n}\n}\n</code></pre>"},{"location":"WLEDSR/WLED-Programming-Notes/#displaying-the-leds","title":"Displaying the LED's.","text":"<p>We were used to FastLED.show(). Well, no longer, and this has some disadvantages.</p> <pre><code>CRGB myCol = ColorFromPalette(currentPalette, index, brightness, LINEARBLEND);\nsetPixelColor(myLED, myCol.red, myCol.green, myCol.blue);\n</code></pre> <p>The next line supports SEGCOLOR(0) and SEGCOLOR(1) if no palette (i.e. default) is selected:</p> <pre><code>setPixelColor(i, color_blend(SEGCOLOR(1), color_from_palette(index, false, PALETTE_SOLID_WRAP, 0), pixBri));\n</code></pre> <p>where, <code>i</code> is the location, <code>index</code> is the color and <code>pixBri</code> is the brightness.</p> <p>Now, onto the disadvantage. . The problem is that you can perform a <code>getPixelColor</code> and move it to another LED with <code>setPixelColor</code>. After moving to about 10 pixels, the LED is now black. This is because of the built-in scaling and addressing the memory that's used for DMA transfer. Unfortunately, we don't get a nice lossless <code>leds[location]</code> as we do with FastLED.</p>"},{"location":"WLEDSR/WLED-Programming-Notes/#fastled","title":"FastLED","text":"<p>WLED uses the NeoPixelBus library to drive the LED's directly, however, a significant amount of FastLED functionality has been enabled in WLED. Things included:</p> <ul> <li>FastLED Math and trigonometry</li> <li>Noise</li> <li>Palettes</li> <li>Palette transitioning (use your own palette variables though)</li> <li>EVERY_N_MILLIS</li> </ul> <p>What is NOT included: * <code>FastLED.show()</code> * FastLED pixel setup * FastLED power management * Working directly with the <code>leds[x]</code> array * <code>fill_rainbow</code> and related routines that directly affect the array * <code>fade</code>/<code>nscale</code>, you need to use the WLED equivalent</p>"},{"location":"WLEDSR/WLED-Programming-Notes/#on-variable-length-arrays","title":"On Variable Length Arrays","text":"<p>These will be used so that we can address leds[x] in our routines with the known and lossless FastLED method rather than the lossy NeoPixelBus method. We'll also be using these for ancillary functions, i.e. heat[x] as used in fire2012.</p> <p>Since you cannot define variable arrays in C, we need other methods to do so for our functions.</p> <p>The WLED method has been to malloc() some memory as follows:</p> <pre><code>  if (!SEGENV.allocateData(SEGLEN)) return mode_static();\nbyte *heat = SEGENV.data;\nheat[value] = 25;\n</code></pre> <p>For the 2D and FastLED data array functionality, the developers of this fork are not comfortable with the <code>malloc()</code> method of memory allocation and have decided to create large fixed arrays instead and to create pointers for use with variable-length arrays.</p> <p>Already declared in FX.cpp: <pre><code>  uint32_t ledData[MAX_LEDS];    // Currently 1500 as defined in const.h. Used for conversion from NeoPixelBus to FastLED. RGB or RGBW.\nuint32_t dataStore[4096];     // For ancillary functions. Can use any data type.\n</code></pre></p>"},{"location":"WLEDSR/WLED-Programming-Notes/#using-crgb-color-space","title":"Using CRGB Color Space","text":"<pre><code>  CRGB *leds = (CRGB *)ledData;     // Define the pointer and override the default data type.\nleds[0] = CRGB::Red;\nleds[1] = ColorFromPalette(currentPalette, index, bright, LINEARBLEND);\n</code></pre>"},{"location":"WLEDSR/WLED-Programming-Notes/#display-the-crgb-array","title":"Display the CRGB Array","text":"<p>First, define a function and add to FX.h <pre><code>void WS2812FX::setPixels(CRGB* leds) {\n   for (int i=0; i&lt;SEGLEN; i++) {\n      setPixelColor(i, leds[i].red, leds[i].green, leds[i].blue);\n   }  \n}\n</code></pre> You can now use FastLED address methods, AND it works with segments.</p> <p>Then, you can call this function at the end of your routine as follows: <pre><code>  setPixels(leds);\n  return FRAMETIME;\n} // End of your routine.\n</code></pre></p>"},{"location":"WLEDSR/WLED-Programming-Notes/#proposed-using-chsv-colour-space","title":"Proposed - Using CHSV Colour Space","text":"<pre><code>   CHSV *leds = (CHSV *)ledData;\nleds[i]  = CHSV(25, 255,255);\n</code></pre>"},{"location":"WLEDSR/WLED-Programming-Notes/#proposed-display-the-chsv-colour-space","title":"Proposed - Display the CHSV Colour Space","text":"<p>The <code>leds[]</code> array is already defined in the CHSV color space.</p> <pre><code>    CRGB color;\nfor (int i=0; i&lt;SEGLEN; i++) {\ncolor = leds[i];\nsetPixelColor(i, color.red, color.green, color.blue);\n}\n</code></pre>"},{"location":"WLEDSR/WLED-Programming-Notes/#current-use-of-the-chsv-colour-space","title":"Current Use of the CHSV Colour Space","text":"<p>As used in one of the FFT animations (** Freqmatrix) in FX.cpp around line 4079.</p> <pre><code>    uint32_t *leds = ledData;\nCHSV c;\nc = CHSV(20, 255, 255);\nleds[i] = (c.h &lt;&lt; 16) + (c.s &lt;&lt; 8)  + (c.v );\n</code></pre>"},{"location":"WLEDSR/WLED-Programming-Notes/#current-display-of-chsv-array","title":"Current Display of CHSV array","text":"<pre><code>    for (int i=0; i&lt;SEGLEN; i++) {\nc.h = (leds[i] &gt;&gt; 16) &amp; 0xFF;\nc.s = (leds[i] &gt;&gt; 8) &amp;0xFF;\nc.v = leds[i] &amp; 0xFF;\ncolor = c;\nsetPixelColor(i, color.red, color.green, color.blue);\n}\n</code></pre>"},{"location":"WLEDSR/WLED-Programming-Notes/#how-to-use-a-non-dynamically-created-variable-array","title":"How to use a non-dynamically created variable array","text":"<p>We'll use that large dataStore array that was defined globally in FX.cpp. Although it was defined as a <code>unint32_t</code>, you can still use smaller dynamic arrays and override the data type using pointers with a function:</p> <p><code>uint8_t *myArray = (uint8_t *)dataStore;    // Just make sure you don't go over.</code></p> <p>You can now use it as a 1D or quasi 2D array, i.e. <pre><code>  myArray[5] = 4;                        // 1D array\nmyArray[5*matrixWidth + 4] = 10;       // 2D array\n</code></pre></p>"},{"location":"WLEDSR/WLED-Programming-Notes/#2d-changes","title":"2D Changes","text":"<p>We have implemented an advanced XY() function to support not only panels of varying sizes and orientations, but also for multiple (identical) panels.</p> <p>Animations have been written so that the top left led in the panel(s) is, well, at the top left.</p> <p>We do not (yet) have animation specific orientation settings. If you would like to do so, for any given 2D animation, you'll need to swap the parameters for the XY() function as well as changing the for loop parameter from height to width (or vice versa).</p>"},{"location":"WLEDSR/WLED-Programming-Notes/#sound-reactive-eeprom-layout","title":"Sound Reactive EEPROM Layout","text":"<p>We've expanded <code>EEPSIZE</code> in const.h to 4095 for ESP32 and 3300 for ESP8266 due to our additional requirements. We started saving values at 3072 defined as <code>EEP_AUDIO</code>. Although we'd like to apply SEGMENT specific settings, we may have some challenges with the FFT sliders. We're not sure at this point.</p> Byte Data EEP_AUDIO Sound Squelch Setting EEP_AUDIO+1 Audio Sync Port EEP_AUDIO+2 Audio Sync Port EEP_AUDIO+3 Audio Sync Enabled EEP_AUDIO+4 FFT1 Slider Value EEP_AUDIO+5 FFT2 Slider Value EEP_AUDIO+6 FFT3 Slider Value EEP_AUDIO+7 Begin 2D Matrix Values EEP_AUDIO+11 End 2D Matrix Values EEP_AUDIO+12 Input Gain Setting"},{"location":"WLEDSR/WLED-Programming-Notes/#presets-in-eeprom","title":"Presets in EEPROM","text":"<p>How do we store FFT slider values in EEPROM for WLED presets? WLED Presets are 20-byte blocks (slots) stored in EEPROM. There is space reserved in EEPROM for 25 slots from 400-899. Currently, 18 of the 20 bytes are being used by WLED. This presents a problem for us since, at the time of writing,  we have 3 bytes that we need to store for our FFT sliders. We didn't want to attempt to rewrite the entire WLED preset protocol as that would surely introduce unnecessary headaches.</p> <p>To solve this problem, we reserved 25 5-byte blocks (slots) in EEPROM from 3175-3299. With the space in EEPROM allocated, we can now save/retrieve FFT slider data to/from WLED presets. </p> Byte Data 0 FFT1 Slider Value 1 FFT2 Slider Value 2 FFT3 Slider Value 3 ZERO (Reserved) 4 ZERO (Reserved)"},{"location":"WLEDSR/WLED-Programming-Notes/#on-frame-rates","title":"On Frame Rates","text":"<p>WLED limits the frame rate, and it's apparently because the LED's start flashing if the frame rate is too high. The standard for maintaining a consistent frame rate when writing any animations is to make sure you add to the end of your animation:</p> <p>return FRAMETIME;</p> <p>If you wish to increase the frame rate, have a look at fx.h with:</p> <p>#define MIN_SHOW_DELAY 15</p> <p>Also, in fx_fcn.h, there's:</p> <p>if (nowUp - _lastShow&lt;MIN_SHOW_DELAY) return;</p> <ul> <li>Frametime is a constant, which is 1000/42. In order to increase the FPS, instead of return frametime, we can write a smaller value than that and for max speed simply go for return(0), which is the smallest.</li> </ul>"},{"location":"WLEDSR/WLED-Programming-Notes/#on-segments","title":"On Segments","text":"<p>Some animations may break when the users start implementing SEGMENTS. Issues encountered were:</p> <ul> <li>Triggers. A triggered event, which was reset by the animation. This does not work with SEGMENTS. One workaround is knowing that the MIN_SHOW_DELAY is 15, and then determine if now-original_event &gt; MIN_SHOW_DELAY in order to reset the animation.</li> <li>To get the current segment being displayed, try Serial.println(_segment_index);</li> <li>To use persistent variable across SEGMENTS, don't use 'static', but rather use the existing uint16_t defined SEGENV.aux0 and SEGENV.aux1 variables. Too bad they're not uint32_t.</li> <li>For further reading on persistent variables, see this page https://mm.kno.wled.ge/WLEDSR/Persistent-Variables-and-WLED</li> </ul> <p>Here's a replacement for EVERY_N_MILLIS()</p> <pre><code>  uint8_t secondHand = millis()/(256-SEGMENT.speed) % 10;\nif (SEGENV.aux0 != secondHand) {\nSEGENV.aux0 = secondHand;\n&lt;rest of code goes here&gt;\n}\n</code></pre>"},{"location":"WLEDSR/WLED-Programming-Notes/#getpixel-and-setpixel","title":"getPixel and setPixel","text":"<p>In the FastLED world, we could cascade led information with things like:</p> <pre><code>   leds[i+1] = leds[i];\n</code></pre> <p>That's not an option with WLED (unless you use the *ledData method described above), because it doesn't have the leds[] array. Instead, you have:</p> <pre><code>  setPixelColor(i+1,getPixelColor(i)); </code></pre> <p>The problem, however is that while the FastLED method preserves the original pixel information, the 'WLED' method is lossy, and eventually the cascaded led's will fade out entirely. The workaround, as previously shown, is to create an array used by the segment that preserves the LED information. AirCoookie's method is to allocate memory on the fly for this. For instance:</p> <pre><code>  if (!SEGENV.allocateData(SEGLEN)) return mode_static(); // allocation failed\nSEGENV.data[SEGLEN-1] = 0;                              // a byte value\n</code></pre> <p>If you want, you can give it another name with:</p> <pre><code>  if (!SEGENV.allocateData(SEGLEN)) return mode_static(); // allocation failed\nbyte* heat = SEGENV.data;\nheat[SEGLEN-1] = 0;                                     // a byte value\n</code></pre> <p>You now have SEGENV.data[SEGLEN] allocated for your use. Adding a structure for use with your segment is a whole other level of complexity and can be found by examining mode_multi_comet and mode_oscillate among others. Just search for SEGENV.allocateData in FX.cpp.</p>"},{"location":"WLEDSR/wip/","title":"Work in Progress","text":"<p>This page is work in progress</p> <p>Check WLED Atuline Wiki for original content</p> <p>Template text:</p>"},{"location":"WLEDSR/wip/#fork-specific-info","title":"Fork specific info","text":""},{"location":"WLEDSR/wip/#wled-sr","title":"WLED SR","text":""},{"location":"about/contributors/","title":"Contributors and Credits","text":"<p>This page is to honor the work of all the people who helped to make WLED what it is today!</p>"},{"location":"about/contributors/#direct-contributors-to-wled-code","title":"Direct Contributors to WLED code","text":"<p>Everyone you see on the Contributors page and: 8bitbrett made the WiFi auto connect QR code with the Aircoookie/WLED logo! adamo made the animated Discord server logo! @blazoncek makes countless new features and improvements to many parts of WLED! @debsahu provided the HomeAssistant autodiscovery and a lot of help with PIO! @frenck made an amazing, stable and feature-packed native integration with HomeAssistant! @photocromax is helping bringing the Live visualization feature to life and added GIF previews to the doc! @raymiec  is currently working on creating the best clients for Android and iOS! @StormPie, the creator of the awesome mobile UI! @timothybrown added MQTT authentication! @viknet365 ported the Meteor effect! @wiesendaniel added the configuration for the PlatformIO IDE! @YeonV provided the initial HomeAssistant MQTT light config! This list is incomplete. </p>"},{"location":"about/contributors/#testing-contributors-and-supporters","title":"Testing, Contributors and Supporters","text":"<p>This list has been redacted for privacy reasons. If you've contributed to the project by testing a lot, helping the community, or sending me a gift, feel free to edit this page and add yourself (maintain alphabetical order) \ud83d\ude04 Thank you very much, your help is truly appreciated! Put two spaces behind your name, else the line break will not appear in the final page! </p> <p>@Def3nder @DutchmanNL DrZzs (Justin A.) Dylan L. Fil Quindor (Andries F.) Tonyno</p>"},{"location":"about/contributors/#used-libraries-and-dependencies","title":"Used Libraries and Dependencies","text":"<p>ESP8266/ESP32 Arduino Core NeoPixelBus by Makuna FastLED library ESPAsyncTCP by me-no-dev ESPAsyncUDP by me-no-dev (as of 0.9.0) ESPAsyncWebServer by me-no-dev ArduinoJSON by bblanchon async-mqtt-client by marvinroger WS2812FX by kitesurfer1404 (modified) IRremoteESP8266 by markszabo (optional) Timezone by JChristensen Blynk library (compacted) E1.31 library by forkineye (modified) Espalexa by Aircoookie (modified) Many included FastLED effects are modified versions of kriegsman's gists!  </p> <p>WLED implements Art-Net\u2122 Designed by and Copyright Artistic Licence Holdings Ltd  </p> <p>WebServer_tng by bbx10 (ESP32, up to 0.8.3) PubSubClient by knolleary (modified, up to 0.8.3)  </p> <p> iro.js colorpicker by James Daniel! Classic UI icons by Linearicons created by Perxis!  </p> <p>If you would like to appear in this list for a contribution you made or be removed from it, feel free to contact me!</p>"},{"location":"about/privacy-policy/","title":"Privacy Policy","text":"<p>By using the WLED embedded system code, the WLED iOS mobile application, the WLED Android mobile application, web client, or associated Services, no personally identifiable data is collected, transmitted and/or stored on external servers. No data is processed in any way not absolutely required for the operation of the Service.</p> <p>This https://mm.kno.wled.ge page is hosted using GitHub Pages. While the author of this page does not collect any personally identifiable data, the service provider GitHub \"may collect User Personal Information from visitors to [the] GitHub Pages website, including logs of visitor IP addresses, to comply with legal obligations, and to maintain the security and integrity of the Website and the Service.\" (https://docs.github.com/en/github/site-policy/github-privacy-statement#github-pages) This is outside the influence of the author.</p>"},{"location":"about/privacy-policy/#overview-of-collected-data","title":"Overview of collected data","text":"<p>The embedded system internally stores configuration data, including, but not limited to the user's WiFi credentials. This data is deletable by the user. External read access to sensitive data is blocked. No user or configuration data is sent to any system outside the users local network, unless the user modifies the Software or network configuration.</p> <p>The mobile apps internally store data regarding connected devices, including, but not limited to the device's network-local IP addresses.</p> <p>Using the provided Support services (including, but not limited to GitHub, Discord and E-mail), only the information you choose to disclose will be processed. Privacy policies and Terms of Service of service providers apply.</p> <p>In accordance with the Service MIT license, THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>If you have inquiries regarding this Policy please feel free to contact me at: dev.aircoookie@gmail,com</p>"},{"location":"about/roadmap/","title":"Upcoming Features","text":"<p>These are currently on my list of what COULD be implemented, there is no guarantee if and when they will be available!</p> <ul> <li>Create named playlists of presets</li> <li>Custom color palettes</li> <li>Settings pages overhaul</li> <li>Rework of WiFi connection logic (reconnect after WiFi or power outage)</li> </ul>"},{"location":"advanced/audio-reactive/","title":"Audio Reactive WLED","text":""},{"location":"advanced/audio-reactive/#what-is-audio-reactive-wled","title":"What is Audio Reactive WLED?","text":"<p>Audio Reactive WLED is a possibility of using WLED controllers in such a way that the LEDs react to music and light up in time. First time this was implemented by a Sound Reactive Fork. As of WLED version 0.14.0-beta1 an usermod is available for original WLED too. Currently only ESP32 microcontrollers are supported.</p>"},{"location":"advanced/audio-reactive/#hardware-required","title":"Hardware required","text":"<p>The audio must be \"feed\" into the microcontroller. There are basically two options: using microphones or line-in adapters.</p>"},{"location":"advanced/audio-reactive/#microphones-supported","title":"Microphones supported","text":"<p>Three microphone types are supported:</p>"},{"location":"advanced/audio-reactive/#1-analog-microphones","title":"1. Analog microphones","text":"<p>Examples are MAX4466 (not really good) and MAX9814 (slightly better). These microphones are easy to use: you just have to connect 3.3V, GND and the analog output from the microphone to an ADC input (Analog-to-Digital Converter) of ESP32. However, the big disadvantage is the quality: both from the microphones themselves and from the ADCs integrated into microcontrollers, which are actually not well suited for audio processing and highly influenced by the power supply noise. </p>"},{"location":"advanced/audio-reactive/#2-i2s-digital-microphones","title":"2. I2S digital microphones","text":"<p>Examples are INMP4411 and ICS-43434/ICS-43432. These have an integrated ADC and already output a digital signal. The advantage is the best possible quality. The disadvantage is higher complexity (you need several PINs for a digital signal). For proper trouble-free operation keep wires between the microphone and ESP32 as short as possible and solder them properly.</p> <p></p> <p>There are also some commercial controllers with integrated digital microphone or plug-in capability available. Be sure to setup correct GPIOs according to the information you typically will find printed on the board or in user manual.</p> <p></p>"},{"location":"advanced/audio-reactive/#3-pdm-microphones","title":"3. PDM microphones","text":"<p>An example is SPM1423. In principle, these are also digital microphones with an integrated Sigma-Delta ADC. They are slightly cheaper than I2S microphones, require one PIN less and the quality is quite good.</p>"},{"location":"advanced/audio-reactive/#line-in-options","title":"Line-In options","text":"<p>Similar to microphones there ara options for analog or digital line-in adapters. In both cases you use line-out (AUX) or headphone-out signal of your sound system/TV/Smartphone/etc.</p>"},{"location":"advanced/audio-reactive/#1-analog-line-in-option","title":"1. Analog line-in option","text":"<p>At least a simple analog circuit as shown below is required to prepare the analog line-out signal and to feed it to the ADC converter of ESP32 microcontroller. In this case, the whole thing works like with an analog microphone. The quality is not the best here either because the ESP32 ADC is not particularly good at converting audio signals and the signal conditioning circuitry is very simple, but not very good. In addition, the sensitivity can be quite poor, so that the whole thing only works at a higher volume of the signal.</p> <p></p> <p>In some cases, you can do it without this circuit and connect the GND of the audio source and an audio channel (left or right) directly to ESP32 ADC Pin (GND and analog input, e.g. GPIO36 pin on the ESP32). This solution is rather quite dirty workaround and might work well or not at all.</p>"},{"location":"advanced/audio-reactive/#2-line-in-to-i2s-adapter","title":"2. Line-in to I2S adapter","text":"<p>Line-in to I2S adapter converts the analog line-out or headphone signal into a digital I2S signal that can be proceed by ESP32. There are some general or for WLED specially developed analog-to-I2S adapters based on for example CirrusLogic CS5343, TI PCM1808 or es7243 chips on the market. In this case, the whole thing works like with a digital I2S microphone. The only difference to I2S microphone is that you at least need an extra PIN for MCLK (Master Clock) signal, which can only be generated by the ESP32 on GPIOs 0, 1 or 3. The other complication is that MCLK is a high frequency signal and must be wired extremely accurate and have short wires. Some adapter types also require more additional signals. For stability it is better to use ready-to-use controller with special Line-In to I2S adapter or DIY PCB design where you can integrate general analog-to-I2S adapter directly without long wires.</p> <p></p> <p>For some more details please refer to Sound Reactive WLED WIKI</p>"},{"location":"advanced/audio-reactive/#software-required","title":"Software required","text":"<p>Because audio reactive capability is currently implemented as a usermod, you need WLED compiled with this usermod included or use Sound Reactive WLED fork. The official WEB-based WLED installer does not include original WLED with audio reactive usermod, but offers Sound Reactive WLED as an option. The unofficial WEB-based WLED installer offers more options including original WLED with audio reactive usermod.</p>"},{"location":"advanced/buildflags/","title":"WLED MoonModules Build Flags","text":"<p>Version at time of page update: WLEDMM 0.14.0-b15.23 - commit 244a613</p> <p>Sourced by: S\u00f6ren#5281 Organized and updated by: Troy#2642</p> <p>Flags/functions specific to WLED MoonModules are denoted with the \u263e icon.</p>"},{"location":"advanced/buildflags/#basic-usage","title":"Basic Usage","text":""},{"location":"advanced/buildflags/#in-my_configh-or-in-the-cc-code","title":"In \"my_config.h\" or in the C/C++ code","text":"<p>For entries with no parameter, prefix with <code>#define</code> like <code>#define WLED_DEBUG</code></p> <p>For entries with a numeric parameter, use the syntax of <code>#define LEDPIN 16</code></p> <p>For non-numeric entries use quotes like <code>#define WLED_AP_SSID \"MY-WLED-AP\"</code></p>"},{"location":"advanced/buildflags/#in-platformioini-or-platformio_overrideini","title":"In \"platformio.ini\" or \"platformio_override.ini\"","text":"<p>For items with no parameter, prefix with <code>-D</code> like <code>-D WLED_DEBUG</code></p> <p>For entries with a numeric parameter, use the syntax of <code>-D LEDPIN=16</code></p> <p>For non-numeric entries use both types of quotes like <code>-D SERVERNAME='\"WLED-C3\"'</code></p>"},{"location":"advanced/buildflags/#the-long-list-of-flags","title":"The Long List of Flags","text":""},{"location":"advanced/buildflags/#common-wled-buildflags","title":"Common WLED buildflags","text":"Flag Description WLED_RELEASE_NAME Sets the internal release name of the build. Also used to set bin filenames in PlatformIO builds. WLED_MAX_USERMODS defaults to 4 on esp8266 and 6 on ESP32 WLED_MAX_BUSSES defaults to 3 on esp8266, 10 on esp32 without AR, 8 on esp32 with AR, 6 on ESP32S3, 6 esp32S2 with AR, 7 on esp32s2 without AR, 3 on ESP32C3 WLED_MAX_BUTTONS defaults to 2 on esp8266 and 4 on esp32 WLED_MAX_LEDMAPS defaults to 10 on esp8266 and 156 on esp32 MAX_LEDS defaults to 1664 on esp8266 and 8192 on esp32 MAX_LED_MEMORY defaults to 4000 on esp8266 and 32000 on esp32C3 and esp32S2, 64000 on ESP32 and ESP32S3 MAX_LEDS_PER_BUS defaults to 2048 WLED_USE_ETHERNET enables Ethernet support ABL_MILLIAMPS_DEFAULT 0 to disable minimum is 250, defaults to 850 WLED_PWM_FREQ defaults to 880 on esp8266 and 19531 on esp32 LEDPIN defaults to GPIO2 on esp8266 and GPIO16 on esp32 WLED_ENABLE_DMX Enables hardware DMX input/output functions DEFAULT_LED_COUNT defaults to 30 HW_PIN_SCL defaults to SCL value HW_PIN_SDA defaults to SDA value HW_PIN_CLOCKSPI defaults to SCK HW_PIN_DATASPI defaults to MOSI HW_PIN_MISOSPI defaults to MISO WLED_USE_REAL_MATH use math and not lookuptables DEFAULT_LED_TYPE defaults to TYPE WS2812_RGB PIXEL_COUNTS defaults to DEFAULT_LED_COUNT DATA_PINS defaults to LEDPIN DEFAULT_LED_COLOR_ORDER defaults to COL_ORDER_GRB WLED_WATCHDOG_TIMEOUT set the whatchdog timout in milliseconds, default to 0 (deactivated) WLED_DISABLE_BROWNOUT_DET disables ESP32 brownout detector (off by default) CLIENT_SSID Sets the default WiFi SSID to connect to CLIENT_PASS Sets the default WiFi password to connect with WLED_AP_SSID Sets the name of the internal WiFI AP WLED_AP_PASS Set the default password for the internal WiFi AP SPIFFS_EDITOR_AIRCOOOKIE If you are not using the Aircoookie fork of the ESPAsyncWebserver library and using upstream,  puts your WiFi password at risk of being served by the filesystem. Comment out this error message to build regardless. WLED_VERSION defaults to \"dev\" BTNPIN Sets the first button pin GPIO RLYPIN Sets the relay GPIO RLYMDE 1=active high, 0= active low IRPIN Sets the IR receiver GPIO SERVERNAME defaults to \"WLED\" WLED_DEBUG_HOST to send debug messages over network to host 192.168.x.y - FQDN is also possible WLED_DEBUG_PORT defaults to 7868 WLED_AP_SSID_UNIQUE Adds the MAC address to the WLED AP SSID if enabled, so everything doen't show up as \"WLED-AP\" WLED_DEBUG Turns on debug messages to the serial console LED_BUILTIN Fix for turning off onboard LED breaking bus WLED_USE_IC_CCT ...something about how LED strips with warm+cool white LEDS work WLED_MAX_CCT_BLEND How warm and cool white RGBWW LEDs are managed WLED_ADD_EEPROM_SUPPORT Enable saving key settings to EEPROM (actually 512 bytes of Flash memory, not literal EEPROM) ESP32_DATA_IDLE_HIGH If enabled, RMT idle level is set to HIGH when off to prevent leakage current when using an N-channel MOSFET to toggle LED power WLED_ENABLE_SIMPLE_UI Enables a simplified web UI. Used mostly on small devices like the ES8266 WLED_ENABLE_MQTT Enables WLED to send internals and usermod data via MQTT WLED_ENABLE_JSONLIVE peek LED output via /json/live (WS binary peek is always enabled) WLED_DEBUG_FS filesystem specific debugging WLED_DEBUG_IMPROV Debugging for Improv serial WLED_ENABLE_LOXONE Enable Loxone support WLED_ENABLE_WEBSOCKETS Enable websockets WLED_ENABLE_ADALIGHT Enables AdaLight support WLED_DEBUG_NTP Enable NTP debugging WLED_ENABLE_PIXART Enable new PixArt support"},{"location":"advanced/buildflags/#psram","title":"PSRAM","text":"Flag Description BOARD_HAS_PSRAM Enables PSRAM during compilation. Board needs to have PSRAM, not all of them do. WLED_USE_PSRAM Uses PSRAM for several functions. Often slows down LEDs. WLED_USE_PSRAM_JSON \u263e Uses PSRAM only for the JSON decoding buffer. Does not slow down LEDs. This setting also increases JSON_BUFFER_SIZE from 24576 to 60000 when enabled on ESP32 and ESP32-S3 (and 48000 on ESP32-S2 and -C3), allowing for bigger LED remapping files."},{"location":"advanced/buildflags/#moonmodules-specific-flags","title":"MoonModules \u263e Specific Flags","text":""},{"location":"advanced/buildflags/#artifx","title":"Artifx \u263e","text":"Flag Description ARTI_DEBUG Enables ArtiFX debug ARTI_ANDBG ArtiFX debugging ARTI_RUNLOG if set on arduino this will create massive amounts of output (as ran in a loop) ARTI_PRINT will show the printf calls ARTI_ERRORWARNING shows lexer, parser, analyzer and interpreter errors ARTI_MEMORY to do analyses of memory usage, trace memoryleaks (works only on arduino) OPTIMIZED_TREE Optimized tree function for ArtiFX"},{"location":"advanced/buildflags/#pinmanager","title":"Pinmanager \u263e","text":"Flag Description SOC_ADC_CHANNEL_NUM Sets ADC0 or ADC1 for I2C functions MPU6050_INT_GPIO Sets the interrupt pin for the MPU6050. Also uses I2C. Does not work when Four Line Display is enabled."},{"location":"advanced/buildflags/#internals","title":"Internals \u263e","text":"Flag Description WLED_DEBUG_MATH Prints out results of some more complex math functions to the serial console."},{"location":"advanced/buildflags/#moonmodules-usermods","title":"MoonModules Usermods \u263e","text":"Flag Description USERMOD_MPU6050_IMU Enables the Motion Processing Unit - MPU6050 ARTIFX Enables the runtime effects scripting interperter WEATHER Enables the weather display usermod USERMOD_GAMES Enables effects/games that use the MPU6050 chip USERMOD_FASTLED Enables extra effects with a Creative Commons license. Do not enable this if using WLED in a for-profit manner."},{"location":"advanced/buildflags/#generic-wled-flags","title":"Generic WLED Flags","text":""},{"location":"advanced/buildflags/#wled-usermods","title":"WLED Usermods","text":"Flag Description USERMOD_BATTERY usermod_v2_Battery.h USERMOD_DALLASTEMPERATURE usermod_temperature.h USERMOD_SHT usermod_sht.h USERMOD_SN_PHOTORESISTOR usermod_sn_photoresistor.h USERMOD_PWM_FAN usermod_PWM_fan.h USERMOD_BUZZER usermod_v2_buzzer.h USERMOD_SENSORSTOMQTT usermod_v2_SensorsToMqtt.h USERMOD_PIRSWITCH usermod_PIR_sensor_switch.h USERMOD_MODE_SORT usermod_v2_mode_sort.h USERMOD_BH1750 usermod_BH1750.h USERMOD_BME280 usermod_bme280.h USERMOD_FOUR_LINE_DISPLAY usermod_v2_four_line_display.h USERMOD_ROTARY_ENCODER_UI usermod_v2_rotary_encoder_ui.h USE_ALT_DISPlAY Alt versions of the two above instead of normal. You likely want to use this if you are using the above two features. USERMOD_AUTO_SAVE usermod_v2_auto_save.h USERMOD_DHT usermod_dht.h USERMOD_VL53L0X_GESTURES usermod_vl53l0x_gestures.h USERMOD_ANIMATED_STAIRCASE Animated_Staircase.h USERMOD_MULTI_RELAY usermod_multi_relay.h USERMOD_RTC usermod_rtc.h USERMOD_ELEKSTUBE_IPS usermod_elekstube_ips.h USERMOD_ROTARY_ENCODER_BRIGHTNESS_COLOR usermod_rotary_brightness_color.h RGB_ROTARY_ENCODER rgb-rotary-encoder.h USERMOD_ST7789_DISPLAY ST7789_Display.h USERMOD_SEVEN_SEGMENT usermod_v2_seven_segment_display.h USERMOD_SSDR usermod_seven_segment_reloaded.h USERMOD_CRONIXIE usermod_cronixie.h QUINLED_AN_PENTA quinled-an-penta.h USERMOD_WIZLIGHTS wizlights.h USERMOD_WORDCLOCK usermod_v2_word_clock.h USERMOD_MY9291 usermode_MY9291.h USERMOD_SI7021_MQTT_HA usermod_si7021_mqtt_ha.h USERMOD_SMARTNEST usermod_smartnest.h USERMOD_AUDIOREACTIVE audio_reactive.h USERMOD_ANALOG_CLOCK Analog_Clock.h USERMOD_PING_PONG_CLOCK usermod_v2_ping_pong_clock.h USERMOD_ADS1115 usermod_ads1115.h USERMOD_BOBLIGHT boblight.h USERMOD_PWM_OUTPUTS usermod_pwm_outputs.h SD_ADAPTER usermod_sd_card.h USERMOD_KLIPPER_PERCENTAGE usermod_v2_klipper_percentage.h"},{"location":"advanced/buildflags/#disable-features","title":"Disable Features","text":"Flag Description WLED_DISABLE_OTA Disables the feature to update firmware over the web interface. OTA is not possible for boards with 2MB flash only (like some Ai-Thinker ESP32-C3-12F models). WLED_DISABLE_ALEXA Disables Amazon Alexa support WLED_DISABLE_HUESYNC Disables the Philips Hue support WLED_DISABLE_INFRARED Disables Infrared support - also useful to add <code>lib_ignore = IRremoteESP8266</code> to your platformio.ini or platformio_override.ini file WLED_DISABLE_WEBSOCKETS Disables the websockets WLED_DISABLE_MQTT Disables MQTT support. Warning: This may break your build unless you disable several other things as well. WLED_DISABLE_SOUND Disables sound features... but why would you do that? :D WLED_DISABLE_2D Disables 2D Features WLED_DISABLE_LOXONE Disable Loxone support"},{"location":"advanced/buildflags/#audio-responsive-build-flags","title":"Audio Responsive build flags","text":"Flag Description SR_SQUELCH Sets the default squelch setting. Recommend 10 SR_GAIN Sets the defauly gain setting. Recommend 40 AUDIOPIN Analog audio pin SR_DMTYPE 0=none/disabled/analog ; 1=generic I2S I2S_SDPIN Default I2S sd/data/dout input pin I2S_WSPIN Default I2S ws/clk/lrck pin I2S_CKPIN Default I2S sck/bclk pin MCLK_PIN Default I2S master clock/mclk pin I2S_USE_16BIT_SAMPLES Use if I2S input are already 16-bit. Likely not the case for most setups. ES7243_SDAPIN I2C SDA pin for ES7243 boards ES7243_SCLPIN I2C SCL pin for ES7243 boards ES7243_ADDR Sets the ES7243 I2c address. Default is usually correct. ES8388_ADDR Sets the ES8388 I2C address. Default is usually correct. SR_DEBUG Turns on sound-reactive specific debug messages UM_AUDIOREACTIVE_USE_NEW_FFT Turns on the new FFT code. \u263e Should be the default currently in most builds. MIC_LOGGER Turns on mic logging for debug purposes. You may be able to graph this output. FFT_SAMPLING_LOG FFT sampling debug log. I2S_USE_RIGHT_CHANNEL Tells I2S to use the right channel. Defaults to the left. I2S_SAMPLE_DOWNSCALE_TO_16BIT Enabled by default unless <code>I2S_USE_16BIT_SAMPLES</code> is defined."},{"location":"advanced/buildflags/#battery-usermod","title":"Battery usermod","text":"Flag Description USERMOD_BATTERY_MEASUREMENT_PIN Pin to measure the voltage, defaults to GPIO35 on ESP32 and A0 on ESP8266 USERMOD_BATTERY_MEASUREMENT_INTERVAL Interval to measure voltage in ms, defaults to 30s USERMOD_BATTERY_MIN_VOLTAGE Minimal voltage in volt, defaults to 3.2V if use lipo and min voltage is not set, if min voltage is not set and use lipo is set the dafault is 2.6V USERMOD_BATTERY_USE_LIPO Use LiPo discharge curve calculations USERMOD_BATTERY_MAX_VOLTAGE Max voltage in volt, defaults to 4.2V if not set USERMOD_BATTERY_TOTAL_CAPACITY capacity in mAh defaults to 3100mAh if not set USERMOD_BATTERY_CALIBRATION offset or calibration value to fine tune the calculated voltage USERMOD_BATTERY_AUTO_OFF_ENABLED auto-off feature, defaults to true USERMOD_BATTERY_AUTO_OFF_THRESHOLD Percentage theshold to turn power off USERMOD_BATTERY_LOW_POWER_INDICATOR_ENABLED low power indication feature, defaults to true USERMOD_BATTERY_LOW_POWER_INDICATOR_PRESET preset to use when low power threshold is hit - defaults to 0 USERMOD_BATTERY_LOW_POWER_INDICATOR_THRESHOLD percent - defaults to 20 USERMOD_BATTERY_LOW_POWER_INDICATOR_DURATION seconds - defaults to 5"},{"location":"advanced/buildflags/#bh1750-usermod","title":"BH1750 usermod","text":"Flag Description USERMOD_BH1750_MAX_MEASUREMENT_INTERVAL the max frequency to check photoresistorin milliseconds, 10 seconds USERMOD_BH1750_MIN_MEASUREMENT_INTERVAL the min frequency to check photoresistor in milliseconds, 500 ms USERMOD_BH1750_FIRST_MEASUREMENT_AT how many milliseconds after boot to take first measurement, 10 seconds USERMOD_BH1750_OFFSET_VALUE only report if differance grater than offset value, default 1"},{"location":"advanced/buildflags/#boblight-usermod","title":"BOBlight usermod","text":"Flag Description BOB_PORT Boblight port, defaults to 19333"},{"location":"advanced/buildflags/#buzzer-usermod","title":"Buzzer usermod","text":"Flag Description USERMOD_BUZZER_PIN Buzzer pin, defaults to GPIO32"},{"location":"advanced/buildflags/#dht-usermod","title":"DHT usermod","text":"Flag Description USERMOD_DHT_DHTTYPE 11=DHT 11, 21=DHT 21, 22:DHT 22 (AM2302), AM2321 *** default USERMOD_DHT_MEASUREMENT_INTERVAL the frequency to check sensorin milliseconds, 1 minute USERMOD_DHT_FIRST_MEASUREMENT_AT how many seconds after boot to take first measurementin milliseconds, 90 seconds USERMOD_DHT_PIN defaults to 21 onm ESP32 and 4 on esp8266 USERMOD_DHT_MQTT Publish measurements to the MQTT broker USERMOD_DHT_STATS For debug, report delay stats USERMOD_DHT_CELSIUS Display temperatures in Celcius"},{"location":"advanced/buildflags/#bme280-usermod","title":"BME280 usermod","text":"Flag Description Celsius Display temperatures in Celcius"},{"location":"advanced/buildflags/#enclosure-usermod","title":"Enclosure usermod","text":"Flag Description Celsius Display temperatures in Celcius"},{"location":"advanced/buildflags/#mqttswitch-usermod","title":"MQTTSWITCH usermod","text":"Flag Description MQTTSWITCHPINS define MQTTSWITCHPINSe.g. -D MQTTSWITCHPINS=\"12, 0, 2\" MQTTSWITCHINVERT invert the switch pins, default all active high MQTTSWITCHDEFAULTS default behavior, default all off"},{"location":"advanced/buildflags/#multi-relay-usermod","title":"Multi Relay usermod","text":"Flag Description MULTI_RELAY_MAX_RELAYS default to 4 MULTI_RELAY_PINS defaults to -1"},{"location":"advanced/buildflags/#my92xx-usermod","title":"MY92XX usermod","text":"Flag Description DEBUG_MY92XX Enable Debug"},{"location":"advanced/buildflags/#pir-usermod","title":"PIR usermod","text":"Flag Description PIR_SENSOR_PIN defaults to GPIO23 on ESP32 and GPIO13 on ESP8266 PIR_SENSOR_OFF_SEC in milliseconds, defaults to 600ms USERMOD_PIR_SENSOR_SWITCH Enables PIR Usermod"},{"location":"advanced/buildflags/#pwm-fan-usermod","title":"PWM Fan usermod","text":"Flag Description TACHO_PIN defaults to -1 PWM_PIN defaults to -1"},{"location":"advanced/buildflags/#pwm-output-usermod","title":"PWM OUTPUT usermod","text":"Flag Description USERMOD_PWM_OUTPUT_PINS default to 3"},{"location":"advanced/buildflags/#photoresistor-usermod","title":"Photoresistor usermod","text":"Flag Description USERMOD_SN_PHOTORESISTOR_MEASUREMENT_INTERVAL the frequency to check photoresistor in milliseconds, 10 seconds USERMOD_SN_PHOTORESISTOR_FIRST_MEASUREMENT_AT how many milliseconds after boot to take first measurement, 10 seconds USERMOD_SN_PHOTORESISTOR_REFERENCE_VOLTAGE supplied voltage USERMOD_SN_PHOTORESISTOR_ADC_PRECISION defaults to 1024 USERMOD_SN_PHOTORESISTOR_RESISTOR_VALUE defaults to 10k USERMOD_SN_PHOTORESISTOR_OFFSET_VALUE only report if differance grater than offset value, defaults to 5"},{"location":"advanced/buildflags/#sd-card-usermod","title":"SD card usermod","text":"Flag Description WLED_USE_SD_MMC Use when SD card is connected via MMC WLED_USE_SD_SPI Use when SD card is connected via SPI. Use the usermode page to set SPI pins SD_ADAPTER Enables SD card functionality."},{"location":"advanced/buildflags/#st7790-usermod","title":"ST7790 usermod","text":"Flag Description USER_SETUP_LOADED Detects if an external user setup file for the display was used in the library code itself ST7789_DRIVER Enables ST7789 driver TFT_WIDTH TFT display width TFT_HEIGHT TFT display height TFT_MOSI Display MOSI pin TFT_SCLK Display SCLK pin TFT_DC Display DC pin TFT_RST Display reset pin LOAD_GLCD Font 1. Original Adafruit 8 pixel font needs ~1820 bytes in FLASH. Default enabled. LOAD_FONT2 Font 2. Small 16 pixel high font, needs ~3534 bytes in FLASH, 96 characters LOAD_FONT4 Font 4. Medium 26 pixel high font, needs ~5848 bytes in FLASH, 96 characters LOAD_FONT6 Font 6. Large 48 pixel font, needs ~2666 bytes in FLASH, only characters 1234567890:-.apm LOAD_FONT7 Font 7. 7 segment 48 pixel font, needs ~2438 bytes in FLASH, only characters 1234567890:. LOAD_FONT8 Font 8. Large 75 pixel font needs ~3256 bytes in FLASH, only characters 1234567890:-. LOAD_FONT8N Font 8. Alternative to Font 8 above, slightly narrower, so 3 digits fit a 160 pixel TFT LOAD_GFXFF FreeFonts. Include access to the 48 Adafruit_GFX free fonts FF1 to FF48 and custom fonts TFT_BL Display backlight pin"},{"location":"advanced/buildflags/#stairway-whipe-usermod","title":"Stairway whipe usermod","text":"Flag Description STAIRCASE_WIPE_OFF If enabled, fade out versus doing a reverse wipe in the effect"},{"location":"advanced/buildflags/#temperature-usermod","title":"Temperature usermod","text":"Flag Description TEMPERATURE_PIN defaults to 18 on ESP32 and 14 on ESP8266 USERMOD_DALLASTEMPERATURE_MEASUREMENT_INTERVAL the frequency to check temperature in milliseconds, 1 minute"},{"location":"advanced/buildflags/#ttgo-t-display","title":"TTGO T-Display","text":"Flag Description TFT_DISPOFF defaults to 0x28 TFT_SLPIN defaults to 0x10"},{"location":"advanced/buildflags/#autosave-usermod","title":"autosave usermod","text":"Flag Description AUTOSAVE_AFTER_SEC in seconds, default 15s AUTOSAVE_PRESET_NUM defaults to 250 USERMOD_AUTO_SAVE_ON_BOOT defaults to false"},{"location":"advanced/buildflags/#four-line-display-usermod","title":"four line display usermod","text":"Flag Description FLD_PIN_SCL defaults to i2c_scl value FLD_PIN_SDA defaults to i2c_sda value FLD_PIN_CLOCKSPI defaults to spi_sclk value FLD_PIN_DATASPI defaults to spi_mosi value FLD_PIN_CS defaults to spi_cs value FLD_PIN_DC defaults to 19 on esp32 and 12 on esp8266 FLD_PIN_RESET defaults to 26 on esp32 and 16 on esp8266 FLD_TYPE defaults to SSD1306 or SSD1306_SDI if FLD_SPI_DEFAULT is set"},{"location":"advanced/buildflags/#four-line-display-alt-usermod","title":"four line display alt usermod","text":"Flag Description FLD_PIN_SCL defaults to i2c_scl value FLD_PIN_SDA defaults to i2c_sda value FLD_PIN_CLOCKSPI defaults to spi_sclk value FLD_PIN_DATASPI defaults to spi_mosi value FLD_PIN_CS defaults to spi_cs value FLD_PIN_DC defaults to 19 on esp32 and 12 on esp8266 FLD_PIN_RESET defaults to 26 on esp32 and 16 on esp8266 FLD_TYPE defaults to SSD1306 or SSD1306_SDI if FLD_SPI_DEFAULT is set"},{"location":"advanced/buildflags/#encoder-usermod","title":"encoder usermod","text":"Flag Description ENCODER_DT_PIN defaults to 12 ENCODER_CLK_PIN defaults to 14 ENCODER_SW_PIN defaults to 13 USERMOD_ROTARY_ENCODER_GPIO defaults to INPUT_PULLUP"},{"location":"advanced/buildflags/#encoder-alt-usermod","title":"encoder alt usermod","text":"Flag Description ENCODER_DT_PIN defaults to 12 ENCODER_CLK_PIN defaults to 14 ENCODER_SW_PIN defaults to 13 USERMOD_ROTARY_ENCODER_GPIO defaults to INPUT_PULLUP"},{"location":"advanced/buildflags/#vl53l0x-usermod","title":"VL53L0X usermod","text":"Flag Description VL53L0X_MAX_RANGE_MM max range in millimeters to react for motions, defaults to 230 VL53L0X_MIN_RANGE_OFFSET minimal range in millimeters that sensor can detect. Used in long motions to correct brightness calculation, defaults to 60 VL53L0X_DELAY_MS how often to get data from sensor, defaults to 100 VL53L0X_LONG_MOTION_DELAY_MS switch onto \"long motion\" action after this delay,defaults to 1000"},{"location":"advanced/compile-analog/","title":"Compile Analog WLED","text":"<p>Moved, see How to compile WLED</p>"},{"location":"advanced/compile-wled/","title":"Compile WLED","text":"<p>Moved, see How to compile WLED</p>"},{"location":"advanced/compiling-wled/","title":"Compiling WLED","text":"<p>You want to add custom features to WLED, use non-default pins, or add in a usermod? You've found the right place!</p> <p>WLED has come to rely on so many dependencies in the latest versions that building with the Arduino IDE is no longer recommended. Instead, installing Visual Studio Code and its PlatformIO (PIO) extension is easier, as it will install the ESP Arduino core, all the required libraries and the correct compilation settings for you automatically.</p>"},{"location":"advanced/compiling-wled/#installation-guide-platformio-recommended","title":"Installation guide (PlatformIO, recommended)","text":"<ol> <li>Make sure Git client is installed on your system. If it isn't, you can get it here.</li> <li>Download and install the free Visual Studio Code by Microsoft.</li> <li>Open VS Code and go to the Extensions manager (the icon with the stacked blocks in the left bar)</li> <li>Search for <code>platformio ide</code> and install the PlatformIO extension </li> <li> <p>Download the WLED source code by executing <code>git clone https://github.com/Aircoookie/WLED.git</code> in some folder. (You can also use GitHub Desktop or download the latest source code from https://github.com/Aircoookie/WLED under the <code>Code</code> dropdown menu as a .zip file.) Alternatively fork the WLED project first and download it from your fork. </p> </li> <li> <p>Go to <code>File -&gt; Open Folder</code> and open that root WLED folder (the one that contains <code>platformio.ini</code>, NOT the <code>wled00</code> folder)  </p> </li> </ol>"},{"location":"advanced/compiling-wled/#compilation-guide-platformio","title":"Compilation guide (PlatformIO)","text":"<p>Tip</p> <p>Make sure Git Client is installed on your system. You can get it here.</p> <ol> <li>In VS Code, open the file <code>platformio.ini</code>.</li> <li>Add a semicolon in front of the line that says <code>default_envs = travis_esp8266, travis_esp32</code> to comment it out.</li> <li>Select your build environment by un-commenting one of the lines starting with <code>; default_envs =</code>. Please remove BOTH the <code>;</code> and the whitespace behind it to correctly uncomment the line. For most ESP8266 boards, the <code>d1_mini</code> environment is best.</li> <li>In the blue bottom bar, hit the checkmark to compile WLED or the arrow pointing right to compile and upload!</li> </ol> <p>Picture Guide</p> <p>Success!</p> <p>If you get one of these two errors, hit the checkmark icon once again to compile and that time the code should build without problems!</p> <ul> <li><code>error: wled00\\wled00.ino.cpp: No such file or directory</code></li> <li><code>FileNotFoundError: [WinError 2] The system cannot find the file specified: '[...].sconsign37.dblite'</code></li> </ul>"},{"location":"advanced/compiling-wled/#making-a-custom-environment","title":"Making a custom environment","text":"<p>Once you've confirmed VSCode with Platformio is set up correctly, you can add/define overrides to allow you to use non-default pins, add a usermod, or add other custom features.</p> <ol> <li>Copy and paste the contents of <code>platformio_override.ini.sample</code> into a new file called <code>platformio_override.ini</code>. Make sure <code>platformio_override.ini</code> is in the same folder as <code>platformio.ini</code>.</li> <li>Replace the line <code>default_envs = WLED_tasmota_1M</code> with the line you uncommented in <code>platformio.ini</code> in the previous steps (from Compilation guide (PlatformIO)). Example: <code>default_envs = d1_mini</code></li> <li>In <code>platformio.ini</code> scroll down until you see <code>#--------------------  # WLED BUILDS  #--------------------</code></li> <li>Find the section that matches the build environment you selected in previous steps. Example: <code>[env:d1_mini]</code></li> <li>Select the whole section (including the first line in brackets [ ] ), and copy and paste it into <code>platformio_override.ini</code> overwriting the build environment section that was already there.</li> <li>Add a new line under the the line that starts with <code>build_flags =</code></li> <li>Put your <code>-D</code> overrides on this new line, giving each <code>-D</code> it's own new line.</li> <li>Compile your freshly customized WLED image!</li> </ol>"},{"location":"advanced/compiling-wled/#flashing-the-compiled-binary","title":"Flashing the compiled binary","text":"<p>Tip</p> <p>This step is optional and only recommended if you want to install the same binary to multiple boards. For testing, it is easiest to upload directly from PlatformIO</p> <p>The .bin file is located in the subfolder <code>/build_output/firmware</code> in your WLED folder. The binary will have the same name as your environment.</p> <p>All that's left to do is flash this .bin file onto your ESP board and then connect it to WiFi.</p>"},{"location":"advanced/compiling-wled/#compilation-guide-arduino-ide-not-recommended","title":"Compilation guide (Arduino IDE, not recommended)","text":"<p>Warning</p> <p>This method is outdated. The source is no longer officially checked to be buildable with the Arduino IDE. Using PlatformIO is strongly advised.</p> <ul> <li> <p>Follow a guide to setup your Arduino IDE (I am using version 1.8.9) with the ESP8266 libraries. For current compiles I recommend the latest Arduino core version 2.7.4. If you do not wish to install all libraries manually it is recommended to download the PlatformIO extension for VS Code (see above).</p> </li> <li> <p>You will need to install a few libraries:</p> </li> </ul> Library Name Platform NeoPixelBus (2.6.0) All FastLED All ESPAsyncWebServer Aircoookie fork (2.0.0) All IRRemoteESP8266 All ESPAsyncTCP ESP8266 only ESPAsyncUDP ESP8266 only AsyncTCP for ESP32 ESP32 only LITTLEFS_esp32* ESP32 only <p>* Please see the installation guide. You might need to enable a define in the library code.</p> <p>All other dependencies are included with WLED for convenience.</p> <ul> <li>Now compile and flash the software! Make sure you erase everything when you flash! (If your board config does not provide this option, you can <code>Sketch -&gt; Export compiled Binary</code> and upload with any ESP flashing tool.)</li> </ul>"},{"location":"advanced/compiling-wled/#compilation-settings-arduino-ide","title":"Compilation settings (Arduino IDE)","text":"<p>ESP8266:</p> <ul> <li>Arduino Core v2.7.4</li> <li>Board: NodeMCU 1.0 (ESP-12E module) (or select your ESP board)</li> <li>CPU frequency: 80 MHz</li> <li>Flash size : 4MB (1MB SPIFFS)</li> <li>LwIP variant: v1.4 Higher Bandwidth (try 2 if you experience issues)</li> <li>Upload speed: Any, 921600 recommended</li> </ul> <p>ESP8266-07 (External Antenna):</p> <ul> <li>Variants have 512kB or 1MB flash</li> <li>Be sure to use DOUT mode when flashing</li> <li>Flash Size 1MB (128k SPIFFS)</li> <li>512kB variant no longer compatible</li> </ul> <p>ESP-07s (External Antenna):</p> <ul> <li>Variant has 4MB flash</li> <li>Settings as for NodeMCU or Wemos</li> </ul> <p>ESP32:</p> <ul> <li>Arduino Core v1.0.6</li> </ul>"},{"location":"advanced/custom-ap/","title":"Custom Access Point SSID and Password","text":"<p>Warning</p> <p>Note: These options change the documented access point name and password. The WLED community does not recommend changing these settings unless you are familiar with the risks.</p> <p>Three compile time defines are available to modify the access point name. These are <code>WLED_AP_SSID</code>, <code>WLED_AP_PASS</code>, and <code>WLED_AP_SSID_UNIQUE</code>. Defining <code>WLED_AP_SSID</code> will set the SSID to the value of the define. Defining <code>WLED_AP_PASS</code> will set the password to the value of the define. Defining <code>WLED_AP_SSID_UNIQUE</code> will append the last 6 digits of the MAC address to the SSID.</p> <p><code>WLED_AP_SSID</code> and <code>WLED_AP_PASS</code> are string values, and as such need to be defined with <code>\"</code> surrounding them. For example, <code>#define WLED_AP_SSID \"MyWLED\"</code> or <code>-D WLED_AP_SSID='\"MyWLED\"'</code> in the <code>build_flags</code> of <code>platformio.ini</code>.</p>"},{"location":"advanced/custom-ap/#modifying-the-access-point-ssid","title":"Modifying the Access Point SSID","text":"<p>Defining <code>WLED_AP_SSID</code> will set the SSID to the value of the define. This is useful to set a device specific access point name. For example, if you have multiple WLED devices, you can set the SSID to the device name.</p> <p><code>WLED_AP_SSID</code> is a string value, and as such needs to be defined with <code>\"</code> surrounding it. For example, <code>#define WLED_AP_SSID \"MyWLED\"</code> or <code>-D WLED_AP_SSID='\"MyWLED\"'</code> in the <code>build_flags</code> of <code>platformio.ini</code>.</p>"},{"location":"advanced/custom-ap/#modifying-the-access-point-password","title":"Modifying the Access Point Password","text":"<p>Defining <code>WLED_AP_PASS</code> will set the password to the value of the define. This is useful to set a device specific access point password. For example, if you have multiple WLED devices, you can set the password to the device name.</p> <p>Tip</p> <p>If <code>WLED_AP_PASS</code> is defined, but <code>WLED_AP_SSID</code> is not, the compilation will fail. Ensure you define both <code>WLED_AP_SSID</code> and <code>WLED_AP_PASS</code> if you wish to change the access point password. Please also change the SSID if you wish to set a custom password.</p> <p><code>WLED_AP_PASS</code> is a string value, and as such needs to be defined with <code>\"</code> surrounding it. For example, <code>#define WLED_AP_PASS \"MyWLEDPass\"</code> or <code>-D WLED_AP_PASS='\"MyWLEDPass\"'</code> in the <code>build_flags</code> of <code>platformio.ini</code>.</p>"},{"location":"advanced/custom-ap/#modifying-the-access-point-ssid-to-be-unique","title":"Modifying the Access Point SSID to be Unique","text":"<p>Defining <code>WLED_AP_SSID_UNIQUE</code> will append the last 6 digits of the MAC address to the SSID. This is useful to set a device specific access point name with a common prefix. For example, if you have multiple WLED devices, you can set the SSID to <code>ChristmasTree-</code> followed by the last 6 digits of the MAC address.</p> <p><code>WLED_AP_SSID_UNIQUE</code> is a boolean value, and as such only needs to be defined or not. For example, <code>#define WLED_AP_SSID_UNIQUE</code> or <code>-D WLED_AP_SSID_UNIQUE</code> in the <code>build_flags</code> of <code>platformio.ini</code>.</p>"},{"location":"advanced/custom-ap/#example","title":"Example","text":"<p>For custom devices in <code>platformio_override.ini</code>:</p> <pre><code>[env:mywled]\nboard = esp32dev\nplatform = ${esp32.platform}\nplatform_packages = ${esp32.platform_packages}\nbuild_unflags = ${common.build_unflags}\nbuild_flags =\n${common.build_flags_esp32}\n-D WLED_AP_SSID_UNIQUE\n-D WLED_AP_SSID='\"MyWLED\"'\n-D WLED_AP_PASS='\"MyWLEDPass\"'\nlib_deps = ${esp32.lib_deps}\nmonitor_filters = esp32_exception_decoder\nboard_build.partitions = ${esp32.default_partitions}\n</code></pre> <p>In <code>my_config.h</code>:</p> <pre><code>#define WLED_AP_SSID_UNIQUE\n#define WLED_AP_SSID \"MyWLED\"\n#define WLED_AP_PASS \"MyWLEDPass\"\n</code></pre>"},{"location":"advanced/custom-features/","title":"Custom Features","text":"<p>Warning</p> <p>Note: this page is now out of date, see updated functionality in the code (WLED/usermods/EXAMPLE_v2)</p> <p>This page is intended for those wishing to modify the WLED code to add their own functionality.</p>"},{"location":"advanced/custom-features/#basics","title":"Basics","text":"<p>Programming is done in the Arduino IDE. There is a special file, <code>usermod.cpp</code>, to write your own code. (however, if you think your code may be relevant to many users, feel free to code it in directly and open a pull request)</p> <p>This file has three empty methods: - <code>userSetup()</code> is called after loading settings but before connecting to WiFi.  Use it to start own interfaces if it does not depend on WiFi (IR, Sensors, GPIOs,...). Also you can use it to load custom settings or to specify own server pages with the <code>server.on()</code> method. - <code>userConnected()</code> is called once WiFi is connected. Use it to connect to external servers or init interfaces using wiFi. - <code>userLoop()</code> is called by the main <code>loop()</code> function.</p>"},{"location":"advanced/custom-features/#modify-wled-values","title":"Modify WLED values","text":"<p>If you know what you're doing, you may choose to change the value of any global variable declared in <code>wled.h</code>. However, for basic color and brightness changes, these are the most important:</p> Variable Name Type Purpose bri byte (0-255) Master Brightness (0 is off, 255 is maximum) col[0] byte (0-255) Red color value col[1] byte (0-255) Green color value col[2] byte (0-255) Blue color value col[3] byte (0-255) White color value <p>After updating the color, you must call the <code>colorUpdated(int)</code> method. If you want to send a notification with the new color to other ESPs, use <code>colorUpdated(NOTIFIER_CALL_MODE_DIRECT_CHANGE)</code>, otherwise <code>colorUpdated(NOTIFIER_CALL_MODE_NO_NOTIFY)</code>.</p>"},{"location":"advanced/custom-features/#timing","title":"Timing","text":"<p>If you'd just like a simple modification that requires timing (like sending a request every 2 seconds), please never use the <code>delay()</code> function in your <code>userLoop()</code>! It will block everything else and WLED will become unresponsive and effects won't work! Instead, try this instead: <pre><code>long lastTime = 0;\nint delayMs = 2000; //we want to do something every 2 seconds\n\nvoid userLoop()\n{\nif (millis()-lastTime &gt; delayMs)\n{\nlastTime = millis();\n//do something you want to do every 2 seconds\n}\n}\n</code></pre></p>"},{"location":"advanced/custom-features/#internal-segments-api","title":"Internal Segments API","text":"<p>You can use Segments from your code to set different parts of the strip to different colors or effects.  This can be very useful for highly customized installations, clocks, ...   </p> <p>To set a segment, use <code>strip.setSegment(id, start, stop);</code>, where id is the segment ID, start is the first LED of the segment and stop is the LED after the last one in the segment.</p> <p>To edit the configuration of a segment, use: <pre><code>WS2812FX::Segment&amp; seg = strip.getSegment(id);\n//set color (i=0 is primary, i=1 secondary i=2 tertiary)\nseg.colors[i] = ((myWhite &lt;&lt; 24) | ((myRed&amp;0xFF) &lt;&lt; 16) | ((myGreen&amp;0xFF) &lt;&lt; 8) | ((myBlue&amp;0xFF)));\n//set effect config\nseg.mode = myFxI;\nseg.speed = mySpeed;\nseg.intensity = myIntensity;\nseg.palette = myPaletteId;\n</code></pre> Keep in mind that this will not cause interface updates as of 0.8.6. For that, you still need to use <code>colorUpdated(NOTIFIER_CALL_MODE_DIRECT_CHANGE)</code></p>"},{"location":"advanced/custom-features/#create-arti-fx","title":"Create ARTI-FX","text":"<p>It is possible to create your own effects and add them to the FX library. The relevant files for that are <code>FX.cpp</code> and <code>FX.h</code>.</p> <p>Here is a step-by-step guide on how to make your effect:</p> <ol> <li> <p>Take a look at some of the effects in <code>FX.cpp</code> to see how they are implemented!</p> </li> <li> <p>Add your own routine in FX.cpp starting with: <code>uint16_t WS2812FX::mode_custom</code></p> </li> <li> <p>Add to total number of effects in FX.h line 110: <code>#define MODE_COUNT</code> </p> </li> <li> <p>Add your mode number (ie<code>#define FX_MODE_CUSTOM                   110</code>) in FX.h around line 200.</p> </li> <li> <p>Add your mode around line 400 of FX.h, like so: <code>_mode[FX_MODE_CUSTOM]                    = &amp;WS2812FX::mode_custom;</code></p> </li> <li> <p>Add it to the functions in FX.h around line 600:<code>mode_custom(void),</code></p> </li> <li> <p>Give it a name at the bottom (10 modes per line) in <code>JSON_mode_names[]</code>. Wrap your name in quotes just like the others.</p> </li> <li> <p>Compile, upload and enjoy!  Your new effect will automatically be added to the list in the web ui.</p> </li> </ol> <p>If you programmed a nice effect you want to share, submit a pull request!</p>"},{"location":"advanced/custom-features/#changing-web-ui","title":"Changing Web UI","text":"<p>In order to conserve space, the Web UI interface is represented as a series of wled00/html_ui.h, wled00/html_settings.h and wled00/html_other.h files which contain C/C++ strings with specific parts of the Web UI.</p> <p>These files are automatically created from source files available in wled00/data folder. To generate files, install NodeJS 11.0+ globally. After that, recreate <code>html_*.h</code> files by running in the repo directory: <pre><code>&gt; npm install\n&gt; npm run build\n</code></pre></p> <p>If you want to test changes to the UI, it is easiest to work with the local <code>wled00/data/index.htm</code> file. You just need to enter the IP address of a WLED 0.10.0 or newer instance into the popup. If you accidentally input an incorrect IP or want to test with a different instance, clear the local storage (in Chrome: Developer Tools -&gt; Application -&gt; Local Storage)</p> <p>If you continuously modify files in the wled00/data directory, you want to monitor these changes to make local html_*.h files being updated automatically. To do this, run this in repo directory: <pre><code>&gt; npm run dev\n</code></pre> This will start monitoring wled00/data folder for changes.</p> <p>WARNING!! Be careful with changing the javascript in HTML files! For example <code>function GetV() {}</code> must be the last javascript function in the <code>&lt;script&gt;</code> element as it will be replaced by automatically generated code to fetch relevant settings from EEPROM. See <code>tools/cdata.js</code> for the replacement rules which run for every *.htm file in <code>wled00/data</code>.</p> <p>Recompile and flash WLED!</p>"},{"location":"advanced/ddp/","title":"Virtual LEDs via DDP/ArtNet","text":""},{"location":"advanced/ddp/#overview","title":"Overview","text":"<p>Virtual LEDs allow you to \"attach\" LEDs from multiple ESPs to a main, controlling ESP. These LEDs can be added to an ESP just like physical pins.</p> <p>On the controlling ESP, go to Config, LED Preferences. </p> <p>Select DDP RGB (Network) or Art-Net RGB (Network) as the LED type and enter the Length (number of LEDs on that remote ESP), then enter the ESPs IP address.</p> <p>Multiple remote ESPs can be setup this way.</p> <p></p> <p>For DDP the controlling ESP must be running at least 0.13 firmware while the remotes can be older. As usual, best perfomance is obtained by using an ESP32 for the controlling device. You can use an ESP8266, but only with a small number of LEDs (&lt;300).</p> <p>Art-Net is only implemented in MoonModules 0.14.0.b1.18.</p> <p>If your board supports Ethernet, use it instead of WiFi for the most stable performance. </p>"},{"location":"advanced/ddp/#ddp","title":"DDP","text":"<p>Bascially the same info as AArt-Net. The Art-Net section contains details on where DDP differs. </p> <p>Generally speaking, DDP is the better protocol to use, if everything supports it. </p> <p>If you can't use DDP, Art-Net has a much wider adoption.</p>"},{"location":"advanced/ddp/#art-net","title":"Art-Net","text":"<p>\ud83c\udf1c</p> <p>Art-Net universe output starts at zero. This is not currently configurable in WLED. Zero is the commonly expected starting universe for Art-Net. Channel output starts at one and is not currently configurable in WLED. One is the expected first channel in Art-Net.</p> <p>For RGB LEDs, a full universe (170 RGB pixels) produces 510 channels  - channels 511 and 512 will not be transmitted. This is common practice in Art-Net transmit and most (all?) implementations will expect this.</p> <p>Art-Net output follows xLights' implementation of packet sequence numbering and universe-channel alignment, and transmits in RGB order. The first pixel output data will always be 0:1:R, 0:2:G, 0:3:B for universe:channel:colorpart.</p> <p>This Art-Net implementation does ignore the \"always specify length of data as an even number\" part of the official specifications. If you encounter this issue, please file a bug report. Even Art-Net themselves say that this has been widely ignored and receivers should not expect an even value in the data length part of the packet.</p>"},{"location":"advanced/ddp/#background","title":"Background","text":"<p>By Troy</p> <p>First there was DMX (DMX512). It was great for controlling lighting fixtures - \"set light to red\" sort of thing. \"Pan head to the left\". \"Dim the lights.\"</p> <p>Then someone decided that DMX should work over the network rather than RS485 networks (usually over an XLR cable).</p> <p>So Art-Net and E1.31 were born. DDP is essentially the same thing but slightly better and newer.</p> <p>All of these are the same premise as DMX512 - send packets of 8-bit numbers (up to 512 8-bit numbers, or 1440 variable bit numbers for DDP) to remote systems.</p> <p>THEN a bunch of idiots (us) got into the game with massive LED panels.</p> <p>To send LED data over the network, we still use a network form of DMX. E1.31, Art-Net, and DDP are all \"network DMX\".</p> <p>You think of an LED strip (or matrix) as a LOT of dimmable lights:</p> <p>You have a red dimmable light.  You have a green dimmable light.  You have a blue dimmable light.</p> <p>That's channels 1,2, and 3 - and they makes up one RGB LED.</p> <p>A DMX universe is 512 channels. You can fit 170 LEDs into 510 channels (170 LEDs each having 3 channels - R, G, and B) </p> <p>...and then you skip to the next universe and start at channel 1 again.</p>"},{"location":"advanced/ddp/#using-art-netdmxe131-to-contol-the-wled-interface","title":"Using Art-Net/DMX/E1.31 to contol the WLED interface","text":"<p>This is with WLED set to \"Effect\" in: Settings &gt; Sync Interfaces &gt; Network DMX Input &gt; DMX Mode &gt; \"Effect\"</p> <p>Using this table: </p> Channel Property 1 Master Dimmer 2 Effect mode ID 3 Effect speed 4 Effect intensity 5 Effect palette ID 6 Effect option 7 Red Primary 8 Green Primary 9 Blue Primary 10 Red Secondary 11 Green Secondary 12 Blue Secondary 13 Red Tertiary 14 Green Tertiary 15 Blue Tertiary <p></p> <p>So when using Art-Net \"Effect\" mode in WLED, those 15 sliders in QLC+ send control data to the 15 parameters in the table.</p> <ul> <li>Slider 1 is master brightness.</li> <li>Slider 2 is effect.</li> <li>9,10,11 are R,G,B primary color.</li> <li>etc.</li> </ul>"},{"location":"advanced/ddp/#using-art-netdmxe131-to-contol-individual-leds","title":"Using Art-Net/DMX/E1.31 to contol individual LEDs","text":"<p>This is with WLED set to \"Multi RGB\" in: Settings &gt; Sync Interfaces &gt; Network DMX Input &gt; DMX Mode &gt; \"Multi RGB\"</p> <p>Could you use QLC+ to send data to a matrix or strip? Absolutely! (But you shouldn't. Normally you will use something like xLights or Jinx that \"know\" how to talk to massive amounts of LEDs over the network.)</p> <p>The catch is that you need THREE sliders (R/G/B) for every LED.</p> <p></p> <p>1,2,3 = pixel 1. (set to red) 4,5,6 = pixel 2. (set to green) 7,8,9 = pixel 3. (set to blue) 10,11,12 = pixel 4. (set to white, all sliders up)</p> <p>With a panel of 768 pixels, you only need... 2304 sliders to set them all. \ud83d\ude04 </p> <p>All of the \"DMX mode\" settings tell WLED how to interperate the incoming DMX data (through whatever Network DMX protocol you're using)</p> <p>\"Multi RGB\" is for lighting lots of pixels. \"Effect\" is for controlling the WLED instance itself.  ...and the others have their own special methods, some combine both \"Effect\" and \"Multi RGB\" functionality. </p> <p>WLED -&gt; WLED works fine, of course. Mostly tested with the receiving WLED set to \"Multi RGB\". There's better ways to sync control between WLED (like... the \"Sync\" button)</p> <p>xLights -&gt; WLED works fine with any protocol they both speak, and WLED set to \"Multi RGB\"</p> <p>Jinx -&gt; WLED works fine with any protocol they both speak, and WLED set to \"Multi RGB\". Jinx has the absolute worst mapping setup, but some of the coolest effects. </p> <p>WLED -&gt; Jinx technically works, but Jinx only takes a few settings over \"network DMX\" to remote control the GUI. This will require some tinkering and perhaps building a custom WLED for yourself.</p>"},{"location":"advanced/ddp/#todo","title":"TODO","text":"<p>I've proposed \"DMX into WLED via a physical DMX wire (RS485).\" This would be equivalent to \"Effect\" (and will likely be based on that mapping) so that you could plug WLED boards into a DMX512 cable and have it \"do a thing\" when you push a slider on the lighting control board/software. This feature does not currently exist, but is being worked on.</p>"},{"location":"advanced/esp32-recovery/","title":"ESP32 Recovery","text":"<p>In Platformio IDE open a new terminal and type: pio run -v -t upload When you see the \"Connecting........\" abort the upload.</p> <p>Below you can see Esptool commands, that was used by Platformio. Now you able to find all files that we need to build the binary (screenshot for visualization): </p> <ul> <li>Download the official ESP Flash Download Tool: https://www.espressif.com/en/support/download/other-tools</li> <li>Start it and select Developer Mode &gt; ESP32 Download Tool.</li> <li> <p>Prepare files and memory addresses according picture below: </p> </li> <li> <p>Click button \u201cCombineBin\u201d. Now you have your binary file with Bootloader.</p> </li> </ul>"},{"location":"advanced/home-automation/","title":"Home Automation Integration","text":"<p>It is possible to interface WLED with home automation systems and other 3rd party software. You can use any API WLED provides (JSON, HTTP, UDP, MQTT), JSON is preferred. This page is intended for sample code and configs others use to control WLED from various 3rd party software:</p> <p>HomeAssistant and NodeRED flows</p>"},{"location":"advanced/home-automation/#domoticz","title":"Domoticz:","text":"<p>Please see here!</p>"},{"location":"advanced/home-automation/#home-assistant","title":"Home Assistant","text":""},{"location":"advanced/home-automation/#using-the-native-integration","title":"Using the native integration","text":"<p>Compatibility notice</p> <p>WLED devices are not supported by Home Assistant 2022.2 or later if a CCT bus is configured or <code>White Balance Correction</code> is enabled.  </p> <p>We hope to resolve this issue as soon as possible. As a temporary workaround you can enable the option <code>Calculate CCT from RGB</code> in LED settings.</p> <p>WLED can be configured using the integrations in the Home Assistant frontend.</p> <p>Menu: Configuration -&gt; Integrations.</p> <p>In most cases, the WLED devices will be automatically discovered by Home Assistant. Those automatically discovered WLED devices are listed on the integrations page.</p> <p>If for some reason (e.g., due to lack of mDNS support on your network), the WLED device isn't discovered, it can be added manually.</p> <p>Click on the <code>+</code> sign to add an integration and click on WLED. After completing the configuration flow, the WLED integration will be available.</p> <p>WLED integration documentation</p>"},{"location":"advanced/home-automation/#using-mqtt","title":"Using MQTT","text":"<p>Alternatively, MQTT can be used (not recommended). Auto discovery is no longer supported since version 0.9 of WLED. In case you want to configure the device manually:</p> Expand to show MQTT configuration <p><pre><code>light:\n  - platform: mqtt\n    name: \"Kitchen Floor Lights\"\n    command_topic: \"wled/all\"\n    brightness_command_topic: \"wled/all\"\n    rgb_command_topic: \"wled/all/col\"\n    rgb_command_template: \"{{ '#%02x%02x%02x' | format(red, green, blue)}}\"\n    effect_command_topic : \"wled/all/api\"\n    effect_list:\n    - \"FX=0\"\n    - \"FX=1\"\n    - \"FX=2\"\n    - \"FX=3\"\n    - \"FX=4\"\n    - \"FX=5\"\n    - \"FX=6\"\n    - \"FX=7\"\n    - \"FX=8\"\n    - \"FX=9\"\n    - \"FX=10\"\n    - \"FX=11\"\n    - \"FX=12\"\n    - \"FX=13\"\n    - \"FX=14\"\n    - \"FX=15\"\n    - \"FX=16\"\n    - \"FX=17\"\n    - \"FX=18\"\n    - \"FX=19\"\n    - \"FX=20\"\n    - \"FX=21\"\n    - \"FX=22\"\n    - \"FX=23\"\n    - \"FX=24\"\n    - \"FX=25\"\n    - \"FX=26\"\n    - \"FX=27\"\n    - \"FX=28\"\n    - \"FX=29\"\n    - \"FX=30\"\n    - \"FX=31\"\n    - \"FX=32\"\n    - \"FX=33\"\n    - \"FX=34\"\n    - \"FX=35\"\n    - \"FX=36\"\n    - \"FX=37\"\n    - \"FX=38\"\n    - \"FX=39\"\n    - \"FX=40\"\n</code></pre> by @acid2000</p> <p>Config json which is sent via autodiscovery: <pre><code>{\n\"name\": \"WLED Light\",\n\"stat_t\": \"wled/840d8e989815/c\",\n\"cmd_t\": \"wled/840d8e989815\",\n\"rgb_stat_t\": \"wled/840d8e989815/c\",\n\"rgb_cmd_t\": \"wled/840d8e989815/col\",\n\"bri_cmd_t\": \"wled/840d8e989815\",\n\"bri_stat_t\": \"wled/840d8e989815/g\",\n\"fx_cmd_t\": \"wled/840d8e989815/api\",\n\"fx_stat_t\": \"wled/840d8e989815/api\",\n\"bri_val_tpl\": \"{{value}}\",\n\"rgb_cmd_tpl\": \"{{'#%02x%02x%02x' | format(red, green, blue)}}\",\n\"rgb_val_tpl\": \"{{value[1:3]|int(base=16)}},{{value[3:5]|int(base=16)}},{{value[5:7]|int(base=16)}}\",\n\"qos\": 0,\n\"opt\": true,\n\"pl_on\": \"ON\",\n\"pl_off\": \"OFF\",\n\"fx_val_tpl\": \"{{value}}\",\n\"fx_list\": [\n\"[FX=00] Solid\", \"[FX=01] Blink\", \"[FX=02] Breathe\", \"[FX=03] Wipe\", \"[FX=04] Wipe Random\", \"[FX=05] Random Colors\", \"[FX=06] Sweep\", \"[FX=07] Dynamic\", \"[FX=08] Colorloop\", \"[FX=09] Rainbow\", \"[FX=10] Scan\", \"[FX=11] Dual Scan\", \"[FX=12] Fade\", \"[FX=13] Chase\", \"[FX=14] Chase Rainbow\", \"[FX=15] Running\", \"[FX=16] Saw\", \"[FX=17] Twinkle\", \"[FX=18] Dissolve\",\n\"[FX=19] Dissolve Rnd\", \"[FX=20] Sparkle\", \"[FX=21] Dark Sparkle\", \"[FX=22] Sparkle+\", \"[FX=23] Strobe\", \"[FX=24] Strobe Rainbow\", \"[FX=25] Mega Strobe\", \"[FX=26] Blink Rainbow\", \"[FX=27] Android\", \"[FX=28] Chase\", \"[FX=29] Chase Random\", \"[FX=30] Chase Rainbow\", \"[FX=31] Chase Flash\", \"[FX=32] Chase Flash Rnd\", \"[FX=33] Rainbow Runner\", \"[FX=34] Colorful\", \"[FX=35] Traffic Light\", \"[FX=36] Sweep Random\", \"[FX=37] Running 2\", \"[FX=38] Red &amp; Blue\", \"[FX=39] Stream\", \"[FX=40] Scanner\", \"[FX=41] Lighthouse\", \"[FX=42] Fireworks\", \"[FX=43] Rain\", \"[FX=44] Merry Christmas\", \"[FX=45] Fire Flicker\", \"[FX=46] Gradient\", \"[FX=47] Loading\", \"[FX=48] In Out\", \"[FX=49] In In\", \"[FX=50] Out Out\", \"[FX=51] Out In\", \"[FX=52] Circus\", \"[FX=53] Halloween\", \"[FX=54] Tri Chase\", \"[FX=55] Tri Wipe\", \"[FX=56] Tri Fade\", \"[FX=57] Lightning\", \"[FX=58] ICU\", \"[FX=59] Multi Comet\", \"[FX=60] Dual Scanner\", \"[FX=61] Stream 2\", \"[FX=62] Oscillate\", \"[FX=63] Pride 2015\", \"[FX=64] Juggle\", \"[FX=65] Palette\", \"[FX=66] Fire 2012\", \"[FX=67] Colorwaves\", \"[FX=68] BPM\", \"[FX=69] Fill Noise\", \"[FX=70] Noise 1\", \"[FX=71] Noise 2\", \"[FX=72] Noise 3\", \"[FX=73] Noise 4\",\n\"[FX=74] Colortwinkle\", \"[FX=75] Lake\", \"[FX=76] Meteor\", \"[FX=77] Smooth Meteor\", \"[FX=78] Railway\", \"[FX=79] Ripple\"\n]\n}\n</code></pre></p>"},{"location":"advanced/home-automation/#indigo-domotics","title":"Indigo Domotics:","text":"<p>Please see here!</p>"},{"location":"advanced/home-automation/#openhab","title":"openHAB:","text":"<p>In openHAB 3 based environments you are able to use the native openHAB WLED Binding, which also supports discovery of your WLED devices.</p> <p>For older openHAB (2.5.x) environmantes the connection can be configured via MQTT broker &amp; Openhab MQTT Binding (2.5x) with configuration files  Please find the details here</p>"},{"location":"advanced/longdata/","title":"Long Data Line configurations","text":"<p>Addressable LEDs are controlled over a data line(s) based on 5V TTL (Transistor-Transistor-Logic) signals.  Over long distances (&gt; 5m) keeping those signals \"clean\" and well defined for the LED they're meant to drive can be difficult.  While there are many methods used to get good results over 10m and longer runs (in-line resistors, voltage boosters, sacrificial pixels, etc.) they are often problematic and unreliable. There is a method specifically designed to send high speed (~1Mhz) TTL data over long (10's to 100's of meter) distances: using a differential pair.</p> <p>Commonly known as RS485, differential pair transmission for LED's takes the single data line from your MCU (ESP32, ESP8266, etc) and translates that into a differential signal that is sent across two wires instead of one.  A transmitter unit (Tx) at the MCU takes in the single data signal and outputs 2 lines usually called A+ and B-.  At the LED strip a matching receiver unit (Rx) takes the A+, B- signals as inputs and outputs clean and accurate 5V LED data that can directly feed the strip.  The only thing that needs to connect the TxRx pair is a pair of wires and a common ground.  The wires don't carry much current at all (~50mA) and can often be a light wire pair from a length of Cat5e or 22/4 alarm wire.</p> <p></p> <p>The distance between the Tx and Rx devices can easily be 30m.  With Cat5e UTP wire you can reliably reach 150m or more.</p> <p>Note, there is no need for a level shifter with the Tx module.  Typical transmitters are spec'd for a minimum 2.4V High level input which is well within the output range of a 3.3V MCU. The only other thing to note about the TxRx pair is that they usually require 5V to operate and often have a 120 ohm termination resistor across the A+,B- connections. Those resistors are important to maintain the integrity of the transmitted data.</p> <p>A TxRx pair can also be used in the middle of a run of LED's when the distance to the next strip is long.  Just put a Tx unit at the end of the first strip and the Rx unit at the start of the next strip.</p> <p>The individual Tx and Rx units are fairly inexpensive and can found on Amazon or via Aliexpress usually for less than $2 USD each (try \"RS485 TTL interface\").</p>"},{"location":"advanced/mapping/","title":"Mapping","text":"<p>WLED now has the ability to remap your LED strip programmatically.</p>"},{"location":"advanced/mapping/#what-is-it","title":"What is it?","text":"<p>This allows us to treat the WLED strip as if it is wired in any way - we can then use the mapping feature to address the strip in any order. This allows for matrix support, serpentine runs and such.</p>"},{"location":"advanced/mapping/#how-do-we-do-it","title":"How do we do it?","text":"<p>Navigate to the edit page for your WLED device by adding <code>/edit</code> to its' address - for example, https://my-led-device.local/edit Use this edit page to create a file called <code>ledmap.json</code>.</p> <p><code>ledmap.json</code> file needs to be a JSON formatted file with the the key being \"map\" and the value being an array of numbers representing the new order of pixels. The position of values in the array is the \"natural\" order of LEDs and the value entered is the new position.</p> <p>The ArduinoJSON library is *extremely*** white-space sensitive. If your <code>ledmap.json</code> file is not working, check for white-spaces where they should not be. The LED positions are zero-indexed.</p> <p>Multiple maps are supported in the latest versions by using <code>ledmapx.json</code> where x is a number. Maps can be selected in a preset using <code>{\"ledmap\":x,...</code>.</p> <p>Use -1 in the map for gaps/blank/nul LEDs.</p>"},{"location":"advanced/mapping/#examples","title":"Examples","text":"<p>In the below example (formatted multiple ways), we remap a strip of four LEDs from a physical order of 0 1 2 3 into a new order of 0 2 1 3.</p> <pre><code>{\"map\":[0,2,1,3]}\n\n{\"map\":[\n0,2,1,3\n]}\n\n{\"map\":[\n0,2,\n1,3\n]}\n</code></pre> <p>This is another example that switches direction every 5 LEDs. It could be formatted any of the three ways demonstrated above.</p> <pre><code>{\"map\":[0, 1, 2, 3, 4, 9, 8, 7, 6, 5, 10, 11, 12, 13, 14,\n19, 18, 17, 16, 15, 20, 21, 22, 23, 24, 29, 28, 27, 26, 25]}\n</code></pre>"},{"location":"advanced/mapping/#014-ac","title":"0.14 AC","text":"<ul> <li>In 2D, physical mapping of map coordinates to panels (see 2D settings page) is done using ledmaps (using customMappingTable)</li> <li>Custom Ledmaps therefore only possible in 1D not in 2D (changed in recent build: custom ledmaps overwrite panel setup)</li> <li>If ledmap files are uploaded you need to reboot in order for them to become effective !!!</li> <li>A ledmap can be applied in a preset or 'global' (global is in segments tab)</li> <li> <p>A ledmap is specified in a dropdown which can have the following values:  </p> </li> <li> <p>Unchanged: nothing will happen (if a ledmap is active, that ledmap will stay active)</p> </li> <li>Default: no ledmap applied (or if ledmap0.json is present that will be applied)</li> <li>Ledmap1.json to ledmap9.json. The ledmap to be applied</li> </ul>"},{"location":"advanced/mapping/#014-mm","title":"0.14 MM \u263e","text":"<ul> <li>Support of ledmaps in 2D using the customMappingTable both for physical mapping and for ledmapping (The map isn't in 2D coordinates, it's just linear remapping) </li> <li>Ledmap properties:</li> </ul> <ul> <li>n (name) and physical is not used yet</li> <li> <p>width and height define the total width and height of the 2D coordinate space (this overrides 2D configuration settings)</p> </li> <li> <p>Repository of ledmap examples: WLED-Effects/Ledmaps containing irregular 2D shapes (clouds and cube) and rings remapping (rings). For testing the different ledmaps upload presets.json in this folder to /edit</p> </li> </ul>"},{"location":"advanced/net-debug/","title":"Net debug","text":""},{"location":"advanced/net-debug/#overview","title":"Overview","text":"<p>Example to enable Net debug  , compile with the following flags </p> <p>-D WLED_DEBUG </p> <p>-D WLED_DEBUG_HOST='\"192.168.x.y\"' ;; to send debug messages over network to host 192.168.x.y - FQDN is also possible</p> <p>-D WLED_DEBUG_NET_PORT=1878 ;; port for network debugging. default = 7868</p> <p>To access net debug from the host type the following  netcat   example : </p> <p>nc -l 1878 -u</p> <p>Debug can be switched on and off in the Info tab:</p> <p></p>"},{"location":"advanced/net-debug/#fork-specific-info","title":"Fork Specific info","text":""},{"location":"advanced/net-debug/#wled-mm","title":"WLED MM","text":"<p>No need to specify ip address and port in platformio.ini and therefor hardcode in bin/esp32. Go to Sync Interfaces / Net debug and specify there. Set output to network pressing Net Debug in the info tab (default off after reboot).</p> <p>See release notes v0.14.0-b15/manage netdebug serial logging in settings</p>"},{"location":"advanced/remote-access-ifttt/","title":"Remote Access / IFTTT","text":"<p>WLED is open-source, DIY software. This means all services are hosted locally on your ESP8266/32. Therefore you can only control your lights from within your local (home) network.</p> <p>If you need to control WLED from anywhere (the public internet) you can do so in multiple ways, some requiring additional hardware:</p>"},{"location":"advanced/remote-access-ifttt/#1-home-automation-systems","title":"1. Home Automation systems","text":"<p>If you add your WLED device to your Home Automation system (e.g. Home Assistant or ioBroker), you can control WLED remotely if you have set up remote access for your Home Automation system, for example via Nabu Casa.</p>"},{"location":"advanced/remote-access-ifttt/#2-amazon-echo-device","title":"2. Amazon Echo device","text":"<p>If you have set up your Alexa device to control WLED, you can just use the Alexa App or another Echo device linked to your account to control your lights (on/off and brightness only)</p>"},{"location":"advanced/remote-access-ifttt/#3-port-forwarding","title":"3. Port Forwarding","text":"<p>Warning: An insecure HTTP connection is used, please do NOT edit sensitive info like the WiFi settings when connected via port forwarding!  This method offers more flexibility, but is also more involved.  Keep in mind this causes anyone with your IP address to have access to your ESP8266!  Setting up an OTA lock password is a must to prevent attackers from acquiring your WiFi credentials!</p> <p>To expose WLED to the internet, create a port forwarding rule for your ESP's IP local ip and port (80) in your router configuration. It is not recommended to use port 80 on your public IP address since 80 is scanned constantly by bots good and bad. Use a 5 digit port for better securuty. If your public IP changes a lot, make sure to also use a dynamic DNS service so your lights are always accessible. Unsure what any of this means or how to do it? Google for \"[your router model] port forwarding\"!</p> <p>Additionally, this opens up many new possibilities for automation! You can use a service like IFTTT Webhooks to send automated WLED API calls that can do anything from turning on the lights at a set time to changing their color if you get a new email!</p>"},{"location":"advanced/remote-access-ifttt/#4-hue-sync","title":"4. Hue sync","text":"<p>If you have a Philips hue setup and sync WLED to it, you can control your WLED lights in any way it's possible to control your hue lights (hue App, Alexa (including colors), any other service that uses Philips hue API)</p>"},{"location":"advanced/security/","title":"Security","text":"<p>WLED was designed in a way that you should be safe to have a router port forwarding to control the system from the public internet. This page will tell you what you can expect by WLEDs security.</p>"},{"location":"advanced/security/#tldr-what-to-do","title":"TLDR - what to do?","text":"<p>A: If you just operate WLED within a local network and/or with a secured Access Point (change the default password \"wled1234\"!!) you are fine.</p> <p>If you have configured a port forwarding to control WLED from outside your local subnet, please make sure the setting \"OTA Lock\" is enabled and you have changed the default OTA password \"wledota\"! Also, NEVER edit sensitive data (like WiFi credentials) while connected via the port forwarding!</p>"},{"location":"advanced/security/#1-is-the-connection-itself-safe","title":"1: Is the connection itself safe?","text":"<p>A: Technically not. The ESP8266 uses unencrypted HTTP traffic. Implementing HTTPS would take too much processing power and memory on this little device. This means an attacker could read your passwords during transmit. Therefore, to be safe, please do NOT change the AP/Client WiFi/OTA password from outside of your LAN via a forwarded port. If you are at home, you should be safe if your WiFi is secured. You can change any other setting while you're away, though. WLED doesn't send your actual password to the settings page, just its length.</p>"},{"location":"advanced/security/#2-what-do-you-mean-by-secure-then","title":"2: What do you mean by secure then?","text":"<p>A: WLED comes with the ability to carry out a software update via WiFi (OTA). However, no one must be able to flash a malicious new binary firmware to steal your WiFi credentials or make your ESP part of a botnet. Therefore, you should enable the \"OTA Lock\" setting and change its default passphrase \"wledota\".</p>"},{"location":"advanced/security/#3-can-i-protect-the-light-configuration-or-the-settings-page","title":"3: Can I protect the light configuration or the settings page?","text":"<p>A: Currently not. This is not sensitive information like your WiFi password. Anyone with your IP and port can control the lights. Open an issue if it should ever happen that somebody plays with your lights. I might consider adding an optional password lock then. For now, it is way too cumbersome for what it does.</p>"},{"location":"advanced/security/#4-i-want-to-do-a-software-update-but-it-says-ota-lock-active","title":"4: I want to do a software update, but it says \"OTA lock active\"?","text":"<p>A: You need to go to the settings page. Untick the \"OTA Lock\" setting and input your passphrase in the field below it. Now apply the settings and reboot. After that you can carry out the software update. Don't forget to re-enable OTA Lock afterwards! To enable, you don't have to enter the passphrase, unless you want to change it. For the lock to work you need to apply and reboot again.</p>"},{"location":"advanced/security/#5-why-is-this-ota-lock-stuff-that-important","title":"5: Why is this OTA lock stuff that important?","text":"<p>A: Your unencrypted WiFi password is stored in the module's EEPROM. It would be easy to \"update\" the software to a malicious version which sends your password to the attacker. OTA Lock makes sure only those with the passphrase may carry out a software update. And yes, while you can disable OTA lock by doing a factory reset, this would also kill the WiFi connection to the attacker.</p>"},{"location":"advanced/security/#6-anything-else","title":"6: Anything else?","text":"<p>A: A personal tip from me is not to give anyone your IP to control the software who you do not wish to do so on a regular basis. It is not critical from a security standpoint, but it can be very annoying if someone plays with your lights, or even worse, change your AP credentials to the point where you can no longer access the module except via USB.</p>"},{"location":"advanced/wiring/","title":"Overview","text":"<p>RGB LEDs can draw a lot of current (amps). While most people usually worry about the dangers from high voltage, low voltage + high amperage can be dangerous too, as it can easily become a fire hazard in certain circumstances. Depending on your setup size (the number of LEDs you want to drive), use these tips to help guide your wiring.</p> <p>There are plenty of guides out there to help with power supply selection, which is out of scope of this page. Size your power supply to your installation both up and down, so you both provide them with enough current and don't introduce unnecessary risk. It's better to power 30 LEDs from a 10W (2A @5V) power supply than a 100W power supply, as you don't need to worry about the potential for as much energy flowing through small wires.</p> <p>As you increase the number of LEDs, you increase the amps your power supply will need to be able to provide. The more amps you're working with, the more you need to be cautious about your wiring and fusing.</p> <p>For example, if you want to power your LEDs off a sealed lead acid battery (e.g. a car battery), you need to be very careful about current. These kinds of batteries can supply hundreds of amps, so you need to ensure that you use fuses along the way to protect against shorts. If you're using USB pocket chargers on the other hand, they tend to be current limited (most provide only 1-2A max) so you can worry less about fusing there.</p> <p>Make sure to also check out this great list of resources to help you learn!</p>"},{"location":"advanced/wiring/#small-setups-30-rgb-leds","title":"Small Setups (&lt; 30 RGB LEDs)","text":"<p>WLED has a great built-in automatic current-limiting feature, set to 850mA by default. If you have a very small setup (&lt; 30 LEDs), you can use this feature to help simplify your wiring and keep things safe.</p> <p>In most circumstances, it's best to power your LED strip directly from the power supply and wire power to your WLED control board in parallel.</p> <p>{insert diagram here}</p> <p>With the current limiting feature turned on and for very small setups (on the smaller side of 1-30 LEDs), you can power the LED strip directly through the USB port of D1 mini or similar board. That is, power comes in to the control board through the USB port and out to a 5V pin. Each board will be a little different, so it would be wise to verify that you can do this for your specific board. You want to ensure that there are no voltage regulators, diodes, or other components between the 5V pin and the USB port input that are going to be damaged by the high-current draw of the LEDs. You also want to ensure that any PCB traces are big enough that they don't heat up with increased current. Never try to draw more than 1A through a board's USB port like this; the boards really aren't designed for large amounts of current to flow through them.</p> <p>When using this technique, make sure to add strain relief to your wires so that they don't flex and break. The easiest way to do this is to use hot glue. While you want to use plenty of hot glue, just be careful to not cover any components that are going to get hot with hot glue.</p>"},{"location":"advanced/wiring/#medium-setups-30-300-rgb-leds","title":"Medium Setups (30-300 RGB LEDs)","text":"<p>For a medium-sized setup of 30-300 LEDs, you should find a power supply that can provide enough current (see the link above) and make sure to power the strip directly. For setups with more than 150 LEDs, you should consider power injection.</p>"},{"location":"advanced/wiring/#power-injection","title":"Power injection","text":"<p>Power injection is where you connect multiple wires from your power supply to the strip in multiple places, usually once at the beginning and once at the end. This is needed because the LED strips can only pass a small amount of current through them and you need to ensure that all your power-hungry LEDs get fed enough power. If your LEDs are dim or discolored at one end of the strip, you should add power injection.</p> <p>When doing power injection, make sure your wires are rated for the amperage you wish to send over them. You should also check the voltage drop if you're doing a particularly long run. As a rough guide, you should never use anything thinner than 22AWG wire for power injection.</p> <p>For medium-sized setups, you should add fuses if your power supply is over 100W. Considering an inline fuse on each power injection line.</p>"},{"location":"advanced/wiring/#inline-fuses","title":"Inline Fuses","text":"<p>You should place the fuse as close to the power supply as possible, on the positive lead, so that as much of the current flows through it as possible. That will cause the fuse to blow if the power injection line shorts or if the strip shorts, instead of causing your power injection wire or strip to heat up. Buy a fuse that's rated just over what you expect your LED strip to draw. For example, if you calculate that your LEDs will draw at most 4.5A, buy a 5A fuse.</p> <p>First match your power injection wire size with the inline fuse's wire. If the inline fuse comes with 16AWG wire (it's usually printed on the wire itself in small type), you should use 16AWG or thicker wire for your power injection wire. If you use thinner wire, you weaken the utility of the inline fuse and risk your power injection wire heating up in the case of a failure.</p> <p>To wire in an inline fuse, trim back the positive wire (not ground) of your power injection line enough to allow the inline fuse to be spliced in. Place a cut of heat-shrink tubing over the wire so that the cable can be insulated once your solder joint is complete. Strip and bend both wires of your splice so that they create hooks to mechanically reinforce the joint, then solder. Cover with the heat-shrink tubing and you're done! Now you have a beautiful, professional-looking fused power injection line.</p>"},{"location":"advanced/wiring/#larger-setups-300-rgb-leds","title":"Larger Setups (300+ RGB LEDs)","text":"<p>The more power you're working with, the more you need to be careful about your wiring. If you're using a 150W or higher power supply or multiple power supplies, check out these tips:</p>"},{"location":"advanced/wiring/#wire-ferrules","title":"Wire ferrules","text":"<p>If you're using stranded wire and lever-lock or screw terminals, all your wire \u2192 terminal connections should be terminated with a wire ferrule of the appropriate wire gauge.</p> <p>This is because stranded wires can splay and lose tension over time, creating a weaker connection that could lead to sparking. Loose strands can also cause shorts or break off. The same is true for tinned stranded wires: the solder can deform (especially if it's heated), loosening the screw terminal, and cause a weaker electrical connection or complete failure. That said, untinned stranded wire in a screw terminal actually creates a better connection than tinned stranded wire, so for high current applications where they could possibly heat up, don't tin them if you don't have ferrules.</p> <p>Shrouded wire ferrules also act as strain relief, minimizing mechanical damage if the wire moves at all. This is especially important for any installations that are mobile, could experience vibrations, or are installed/removed seasonally.</p>"},{"location":"advanced/wiring/#multiple-power-supplies","title":"Multiple power supplies","text":"<p>When doing power injection with multiple power supplies never mix two power supplies on the same LED strip. You can connect grounds together, just never the positive rails. This means you need to segment your LEDs based on power supplies, including your power injection. For the same reasons listed below, never connect multiple power supplies to the same strip for power injection purposes, always fork one power supply and route it to the start/mid/end of the same strip.</p> <p>Because multiple power supplies could have subtle variations in their positive voltages (e.g. 12.1V and 12.3V), this could lead to power flowing in ways that aren't expected or which could be damaging to your equipment. In general, wired power supplies don't like to be directly connected to other power supplies unless they are explicitly designed for that purpose. This is not true for cell batteries, which are usually fine with being connected in parallel provided all the battery voltage + chemistry are the same.</p>"},{"location":"advanced/wiring/#even-more-tips","title":"Even more tips","text":"<ul> <li>Always check wire gauge + amp ratings and make sure to overcompensate by 2-3\u00d7</li> <li>more, lower-current wires are better than fewer, higher-current wires</li> <li>Ensure that all strips are fused just above their max current. Fuses should be located as close to the power supply as possible.</li> <li>Make sure all distribution wires are neat, tidy, and mounted to a structure. If it needs to be loose to bridge an air gap, minimize the amount of dangling wire as much as possible. This ensures that if you were to have a wire become disconnected, it'll be easy to see where it is.</li> <li>Did you add fuses? Add fuses. Seriously.</li> </ul>"},{"location":"basics/compatible-controllers/","title":"Compatible controllers","text":"<p>Currently (as of summer 2023) only the microcontrollers from Espressif, types ESP8266 and ESP32 (with dual core) are fully supported. Some of the newer types like ESP32-C3, ESP32-S2 and ESP32-S3 are experimentally supported, but productive use is not recommended yet because some bugs are suspected. In addition, the installation of these newer types is not that easy: there are several hardware variations/boards for which the SW must be specially compiled. It should also be mentioned that some ESP32-C3 boards (so-called C3 mini V1.0.0) are still being sold on the market where WLAN does not work properly.</p> <p>To try out WLED with 5V addressable strip a simple microcontroller board like ESP8266 D1 mini or ESP32 D1 mini is sufficient. The simplest setup might be like: </p> <p>However, there are a few other things to keep in mind for a proper setup: 1. A level shifter is required for reliable data transmission from the controller to the LED strip (this is mandatory, especially with 12V or 24V LED strips). Then you have to solder something together or you can buy a ready-made WLED controller right away. 2. For safety reasons, the correct cabling (length, cross-section, contacts) and the fuses to be integrated must be considered. Especially with LED strips, it gets more complicated because you need the so-called intermediate feeds. These must be planned and implemented correctly. LED power, wiring and fuse calculator can be used as an starting point.  3. LED strips can get quite warm during operation and even overheat in the event of a fault. Again, for safety reasons, you have to protect the area around it: you shouldn't just lay LED strips like that, ideally you should integrate them into aluminum profiles or something similar. In normal operation, these act like a heat sink and thus extend the service life of the LEDs. In the event of a fault, they can protect the surroundings. 4. To save energy while LEDs are off, you might integarte relays that switch the voltage of LEDs off completely.</p> <p>In the following some third-party controllers are listed. Please use a decent and neutral description when adding things to this list.</p> <p>Tip</p> <p>Lists are in alphabetical order. The position of an item in the list does not indicate how good it is or if it will fit your use case. Please carefully compare all items in the category you are interested in, and you should find the one that suits your needs best in just a few minutes! </p>"},{"location":"basics/compatible-controllers/#controllers-with-wled-pre-installed","title":"Controllers with WLED pre-installed","text":"<p>Info</p> <p>Unless otherwise noted, controllers feature everything you need for most WLED setups, except a power supply, wiring and fuses, and of course the LEDs themselves!</p> Name Description 8 Port LED Distro This is an 8 port ESP32 based LED distro board running WLED. Distributing both power and data in 1 board. The WT32-ETH01 provides support for Wi-Fi or ethernet connections. It can be used with either 5v or 12v or 24v LED pixels. Also includes a USB-C port for programming, level shifter, 5 amp fuse on every port, multiple voltage inputs with no jumpers to set and phoenix connectors for easy wiring. A1-SLWF-02 WLED controller WLED dedicatedly designed Controller that supports 5V-12V addressable strips from Ukrainian developers. Based on ESP8266. Slim design, sensor button, powered either by type-C or screw-terminal. Screwdriver included. Worldwide delivery. ABC! WLED Controller / ESP8266 Commercial controller for 5V LED strips. Based on ESP8266 uC. Two outputs. Ready to use. Additional Relay&amp;Fuse board available. (German shop &amp; shipping only within Germany.). A similar one is available at WLED.SHOP ABC! WLED Controller / ESP32 Commercial controller for 5V LED strips. Based on ESP32 uC. Two outputs. Option for digital microphone or line-in-to-I2S Adapter for sound reactive WLED. Ready to use. Additional Relay&amp;Fuse board available. (German shop &amp; shipping only within Germany.). A similar one is available at WLED.SHOP. ABC! WLED Controller V43 / ESP32 based / 5V-24V Commercial controller board for 5V / 12V / 24V LED strips from creator of LED power, wiring and fuse calculator. Based on ESP32 uC. Preflashed SW. Up to four outputs. Option for digital microphone or line-in-to-I2S Adapter for sound reactive WLED. Automatic 5V/12V/24V recognition (no jumper/switch etc. required). Ethernet adapter is available . Enclosure is available too.  German shop &amp; shipping only within Germany. Worldwide shipping available soon at WLED.SHOP. ABC! WLED mini Controller V70 / ESP32 based / 5V-12V Commercial controller board for 5V / 12V LED strips from creator of LED power, wiring and fuse calculator. Based on ESP32 uC. Preflashed SW. Up to four outputs. Option for digital microphone or line-in-to-I2S Adapter for sound reactive WLED. Automatic 5V/12V recognition (no jumper/switch etc. required). Enclosure is available.  German shop &amp; shipping only within Germany.. Athom Light Strip Controller Simple controller with enclosure for reliably driving 3 pin 5V LEDs. Uses 2M ESP8266. Athom High Power Addressable LED Strip Controller Higher power options than the above system. Supports optional clock output. Athom LS8P ESP32 Music Controller ESP32 based controller with dual output, microphone and IR. Comes with WLED preinstalled Athom RGBW Light Strip Controller Has outputs for individual color channels. Cadsbi Motion Smart Ready to use solution with 3 output ports, an external antenna, in a high quality metal enclosure cod.m Wi-Fi Pixel Controller Fully completed control PCB with level shifter, terminals and case - pre-flashed with WLED! ESP8266 Pixel Controller DIY board for 5V/12V LED strips with TTL or RS485 output using a Wemos D1 mini, integrated fuse, pluggable terminal block, 3D printed module case ESPthings.io ET-AL01 DIY board for 5 Analog channels and/or up to 5 Digital LED channels (or a combination of the latter as required), Integrated level shifter, 5v/12/24v compatibility, 4x pull-up/down GPIO, serial interface and power distribution terminals. Can be used with Wemos D1-style ESP8266 or ESP32 boards. ESP32 WLED pico board ESP32 WLED pico board,super small form factor, ready to buy on Tindie and Tindie EU. Integrated level shifter, exposed pins for extending functionality , on board I2S microphone, Firmware is here. Project page is here IOT4WLED Ready to use hardware for WLED! Laterna Based on an ESP32 for digital LED and RBG/RGBW LED strips with support for 5V, 12V and 24V LED strips. (Up to 4 channels) Laterna Mini V3 Small ESP32 based controller with optional digital microphone integrated for digital 5V LED strips. Laterna Stick USB Stick like ESP32 based controller for digital 5V LED strips. LedBox V2 LedBox V2 by StanleyProjects is a fully contained, sound reactive, ESP32 based module for controlling 5-12V addressable LED strips (WS2812, SK6812, etc.), supporting both 3-(VDD,DAT,GND) and 4-(VDD,DAT,CLK,GND) pin configuration. It includes a digital MEMS microphone, button and IR control, and a safety resettable fuse, all in a compact 3D printable case. The board comes all setup, flashed with sound reactive WLED fork, and can be purchased here. Luminxa v2.2.2 ESP32 My Baby's Got LED Certified open hardware. Easy plug-and-play WLED board for those that don't want to figure out the hardware - you won't even need a screwdriver to get started. PC power supply (ATX) powers three 5V injection points on 8A fuses. For sale now on Tindie! Full details on the github repo and maker's website. QuinLED Dig2go Designed to be the quickest and easiest 5v addressable LEDs controller available! Powered simply by using a USB-C input (just like your phone!) for a true plug and play experience. Recommended for small projects up to 15W and very complete with built-in \"power cut\" circuit when the LEDs are off to minimize idle power consumption, LED data level-shifter, built in protection circuits (including fuses), IR receiver, high quality digital microphone with audio reactive effects and even has some easy to use expansion ports for extra buttons or for instance an I2C screen! All of this is housed in a high-quality custom plastic case (not 3D printed) and small enough to fit in the palm of your hand! Comes ready to go, pre-flashed with WLED and even combined with power supply and/or LED strip in different bundles! Buy here! QuinLED Dig-Uno 2021 updated version! DIY/Pre-Assembled board for digital LED driving. Integrated level shifters, temperature sensor option, Auto 5v-24v compatibility, pull-up/down GPIO and safety features such as a onboard fuse. Recommended to use (and comes with) with custom QuinLED-ESP32. Pre-assembled and pre-flashed with WLED available to buy!. Aircoookie's personal recommendation for medium-size WLED projects. QuinLED Dig-Quad 2021 updated version! DIY/Pre-Assembled board for 4 (5) channel digital LED driving. Integrated level shifters, temperature sensor option, Auto 5v-24v compatibility, pull-up/down GPIO and power distribution terminals with 5x onboard fuses for easy LED power injection. Recommended to use (and comes with) with custom QuinLED-ESP32. Pre-assembled and pre-flashed with WLED available to buy!. Aircoookie's personal recommendation for large-size WLED projects with advanced power and output requirements. QuinLED Dig-Octa The Dig-Octa system is for your medium to very large projects! It comes fully pre-assembled and is the ideal board to drive 5v-24v digitally addressable LEDs. The system is composed of brain- and power-boards and is designed to be fully stackable in various configurations of both types of boards, to perfectly adapt to your needs. Some features are: 8 LED data-channels, built-in level-shifters and resistor switchers, Ethernet and external antenna WiFi, auto 5v-24v compatibility, high current handling (up to 50A to 100A!), fully fused inputs and outputs, dedicated relay circuit, I2C temperature sensor, and much more! Comes pre-flashed with WLED and is highly recommended for medium to very large projects. Buy here! Simple WLED Board Very simple DIY board, minimum of required components, option for 5V/12V LEDs. Easy to solder (no SMT components). Simple to understand connection schematics and pictures. Can be used with ESP8266 or ESP32 in D1 mini Format. sjm autoprod rgbw, rgbw2+, rgbw4 Complete, fully-sealed, analog and digital controllers for vehicular use. rgbw has one RGBW channel, rgbw2+ has two analog, RGBW channels plus two/four addressable outputs (requires external 5V source for 5V LEDs). rgbw4 has four analog RGBW channels. 2+ and 4 support 12V or PWM/analog inputs and have internal PTC \"fuses\". WiFi Controlled Desk Lamp Open source PCB for WLED WLED ESP32 universal controller ready to buy on Tindie, 100% compatible with WLED project. Integrated level shifter, 2 outputs for LEDs strips, 1 fused out for LED strip, relay for energy-saving, temperature sensor, PWM fan header, USB port for re-programing. Headers for shields to extend functionality. Available shields for controller is here,  Firmware is here. WLED Wemos mini shield shield board, ready to buy on Tindie also Tindie EU. Integrated level shifter, 2 outputs for LEDs strips, 1 fused out for LED strip, resettable fuse for the development board, exposed I2C interface for display or sensors. Exposed pins Digital microphones. Works with Wemos D1 mini and D1-style ESP32 boards. Firmware is here. WLED waterproof controller with external antenna DIY board, designed for use outside permanently and for longer range Wi-Fi connection. No SMD components means it is easier to solder for DIYers. 100% compatible with WLED project. Level shifter, fuse for LED strip, resettable fuse for Wi-Fi module, exposed I2C interface for display or sensors, relay for energy-saving and 1-wire temperature sensor. Build around ESP-07S module. Firmware is here Yet Another WLED Controller Small and simple device for 5V addressable LED strips with minimum components and fully assembled by PCB manufacturing service in standard case. Firmware is here HighSet WLED Controller India ESp32 Based Ready to use WLED device for 5V Pixel LEDs with Shift Resistor Pre-Installed &amp; 4 Outputs in Premium Quality Sealed Enclosure, Customized Orders also Welcomed."},{"location":"basics/compatible-controllers/#controllers-wled-can-be-installed-to","title":"Controllers WLED can be installed to","text":"<p>Warning</p> <p>If the controller does not have a USB port and no firmware supporting wireless updates pre-installed, installing WLED to it requires an FTDI flasher and in some cases, soldering.</p> Name Chip Description ESPixelStick v3 ESP8266 The ESPixelStick V3 is a WiFi Pixel and DMX single output controller built around the ESP8266 platform. It utilizes industry standard E1.31 sACN and DDP protocols for control of up to 680 WS2811 pixels (4 Universes) or 63 GECE Pixels.  The output passes through a built-in RS485 transceiver, allowing for driving DMX and differential Renard inputs (or using a differential receiver for long-distance between board and first pixel). The on board switching regulator allows you to power the ESPixelStick with 5V-24V -- Just match the voltage of the pixels you are using, no voltage configuration is required.  Note: Does not come preconfigured with WLED, you must flash the ESP8266 yourself. SP108e v2 ESP8285 Hardware-Modification required and different versions exists! 8285-based 2M Controller that supports addressable RGBWW LED strips, also with CLK line (like ATA102). 5-24v DC input, 85mm x 45mm x 23mm. Vendors list spledapps 'Led Shop' as the supporting mobile application. Board is silk screened with 'SP108e'. No pads are exposed and a second processor is used to control the LEDs. Pin7 of that processor needs to be grounded to hold it in reset state. Then you can connect GPIO0 to GND and TX, RX, VCC, GND for flashing. Connect GPIO2 to R4 for DATA out and GPIO13 to R3 for CLK out. Flashed via PlatformIO, esptool. OTA updates work. Pics of pinout here: https://github.com/psxde/sp108e-led-controller/raw/main/sp108ev2_inside.png SP501e ESP8285 8285-based 1M Controller that supports both Addressable and PWM-based RGBWW LED strips. Note that recent versions have 2M. 5-24v DC input, 55mm x 26mm, sold under BTF lighting, RGBZone, etc. Vendors all list 'Fairynest' as the supporting mobile application. Board is silk screened with 'SP5XXe' but no other markings. Serial pads are exposed on the back-side of the board with GND and GPIO0 right next to each other and thus Flash access fairly straight forward. GPIO 0 must be pulled to GND at boot and throughout the flashing process.  I/O configuration: LEDPIN is 'GPIO3' for addressable (note this pin is limited to approx. 250 LEDs), BTNPIN is GPIO 1. PWM pin out for RGBWW: CW: 14, WW: 12, B: 13, R: 15 and G: 4. Flashed via PlatformIO, ESPHome and Tasmotizer. Pics of board here: https://github.com/Operation760/SP501e-RGB-LED-Controller-/blob/master/SP501e_top_bottom_traced.jpg  Flashing Connections: https://github.com/tonyn0/sp501e-flashing/blob/main/sp501e%20flash.png SP511e ESP8285 An ESP8285 2MB controller with 3 case buttons, built in mic, IR receiver, 38 key remote, and dual outputs. The dual outputs are connected to the same data pin. There is a step-by-step guide for Installing WLED on SP511E Controller. ESP LED Strip WIFI Control Board [ESP Version] ESP8266 Controller for addressable or analog LEDs (RGBW), 6-27VDC input, no level shifter, reset and boot buttons, enclosure. NOTE: Although this uses high-current transistors, they used jumpers on two of the connections so you are limited to their current rating (3A?)."},{"location":"basics/compatible-controllers/#wled-shields-to-be-use-with-esp8266esp32-controllr-boards","title":"WLED shields to be use with ESP8266/ESP32 controllr boards","text":"Name Description ABC! WLED Shield, all-purpose, for ESP8266/ESP32 Commercial WLED Shield for 5V/12V LED strips. To be used with ESP8266 or ESP32 in D1 mini format. Two outputs. Option for digital microphone or line-in-to-I2S Adapter for sound reactive WLED (with ESP32 only!). Automatic 5V/12V recognition (no jumper/switch etc. required). Enclosure is available too. German shop &amp; shipping currently only within Germany. ESP-01 WLED shield shield board for ESP-01 board, ready to buy on Tindie. Integrated level shifter, 3 outputs for various configurations, mosfet for 1 analog channel, Firmware is here. WLED Wemos shield shield board, ready to buy on Tindie also Tindie EU or DIY 100% compatible with WLED project and WLED sound reactive fork. Integrated level shifter, 4 outputs for LEDs strips, 1 fused out for LED strip, resettable fuse for the development board, exposed I2C interface for display or sensors, relay for energy-saving and 1-wire temperature sensor. Exposed pins for Analog and Digital microphones. Works with Wemos D1 mini and D1-style ESP32 boards. Firmware is here."},{"location":"basics/compatible-controllers/#other-products-wled-can-be-installed-to","title":"Other products WLED can be installed to","text":"Name Chip Description Merkury MI-BW210-999W ESP8285 Tuya Style WiFi Led light bulb, Warm White + RGB. There are two versions of this same bulb sold in the same packaging only way to check is to look at the bulb, EBEQPW92 uses PWM led control and is compatible with WLED however EBEQPW06 uses an SM16716 chip and is not currently compatible with WLED. Managed to flash using tuya-convert and a custom WLED build with the following analog pinout: B:4, G:5, R:13, W:14. Extras disabled to allow OTA, OTA only way to flash this, programming headers are not internally available. Shelly RGBW2 ESP8266 For \"analog\" LED use only! Runs on 12-24VDC. One button and one input. Pins: R=12, G=15, B=14, W=4. Finished, commercial product that can be flashed. More info and flashing docs Athom 15W bulb ESP8266 (2M flash) 15W bulb with RGB, warm white, and cold white LEDs. Compatible with all voltages, available form factors E27, B22 and GU10"},{"location":"basics/compatible-controllers/#raw-esp8266esp32-boards","title":"Raw ESP8266/ESP32 boards","text":"<p>Tip</p> <p>While these can work like the controllers above without extra hardware, you might get flickering without adding an external levelshifter. Using them without a controller board/shield is only recommended if you like tinkering with electronic projects.</p> Name Chip Description Adafruit Feather Huzzah ESP8266 General-purpose ESP8266 Board with USB, battery connector, etc. D1 mini-style ESP32 ESP32 A nice compact ESP32 development board. D1 mini compatible layout. ESP32 DevKitC v4 ESP32 The original ESP32 Development Board made by Espressif Systems. H803 WiFi ESP8266 ESP8266EX based controller with level shifter inside. Data pin GPIO1 Clock pin GPIO14. Tested with WS2813 strip and Firmware fork is here. NodeMCU-32s ESP32 The most common ESP32 development board. Works well, depending on the board you might have to press the \"Boot\" button while USB flashing Heltec WiFi Kit 8 ESP8266 Another alternative of ESP8266 board. OLED display 128X32 pixel, battery charger on board. Almost the same functionality and price as the Wemos board. Plus it can be used in projects with external batteries. NodeMCU ESP8266 Another popular ESP8266 development board. A bit bigger than the D1 and has pins pre-soldered. There are multiple versions with slight differences, not all are tested. ESP-01 ESP8266 One of the first and cheapest ESP8266 boards available. Not recommended for general WLED installs (needs external USB/serial chip, voltage converter, only has 1mb of flash, so soon no wireless updates possible) Olimex ESP32 POE ESP32 Ethernet (PoE) and WiFi, though usage of the ethernet port requires a custom compile. The PoE should not be used to power LEDs due to a maximum throughput of 4W. For most installations, standard ethernet should be used, supplying power through the 5V pin. QuinLED-ESP32 Custom design D1 Mini32 formfactor ESP32 module Fed up with the bad quality of generic ESP32 modules on the market, designed my own \"beefed up\" version. Available in multiple versions: QuinLED-ESP32-AB (Antenna Board), QuinLED-ESP32-AE (Antenna External), QuinLED-ESP32-ABE (Antenna Board + Ethernet). Aircoookie's recommendation for running WLED. RE5V1C ESP8285 5v DC input - onboard 10A relay TwilightLord-ESP32 ESP32 ESP32 Dev Board with latest WROOM-32E module, USB Type-C, 800mA LDO, 8MB flash and PTC fused. D1 Mini32 form factor and compatible pin out.16MB Flash version also available ESP32 mini dev board 16mb by SerKo (aka Serg) ESP32 ESP32 Dev Board with latest WROOM-32E module, USB Type-C, PTC fused, over-voltage protection. D1 Mini32 form factor and compatible pin out Wemos D1 mini ESP8266 An affordable ESP8266 development board. Aircoookie's recommendation for running WLED if you want an ESP8266 board. Current version: 3.1.0 Wemos D1 mini Pro ESP8266 A newer development board with an external antenna connector. Works very well with WLED. Recommended if your signal strength is too low with another board. Current version: 2.0.0. Version 1.0.0 has the same form factor as the D1 mini. WT32-ETH01 ESP32 Under development! Ethernet (non-PoE) and WiFi enabled alternative to the Olimex boards, for 1/4 the cost. Features no PoE, and requires initial flashing of a custom compiled image using a FTDI or similar USB to serial converter."},{"location":"basics/compatible-hardware/","title":"Other Hardware","text":"<p>Still under construction, feel free to add to the list!</p> <p>This page lists some third-party hardware and/or tools that are working with WLED!</p> <p>Please use a decent and neutral description when adding things to this list.</p> <p>Tip</p> <p>Lists are in alphabetical order. The position of an item in the list does not indicate how good it is or if it will fit your use case. Please carefully compare all items in the category you are interested in, and you should find the one that suits your needs best in just a few minutes! </p>"},{"location":"basics/compatible-hardware/#addressable-led-strips","title":"Addressable LED Strips","text":"<p>Sorting: 5v data only, 5v Data + Clock, 12v data only</p> Type Voltage Comments SK6812 5v/12v RGBW WS2811 5v usually found in IP68 sealed 12mm pixel strings WS2812B 5v WS2813 5v has a backup data line APA102 5v using 2 data pins, Clock and Data LPD8806 5v using 2 data pins, Clock and Data WS2801 5v using 2 data pins, Clock and Data SK9822 5v using 2 data pins, Clock and Data GS8208 12v TM1814 12v RGBW WS2811 12v usually 3-LED segments, has data-line resistor WS2815 12v has a backup data line"},{"location":"basics/compatible-hardware/#non-addressable-led-strips","title":"Non-Addressable LED Strips","text":"<p>WLED supports non-addressable LED strips as well. Unlike addressable strips, non-addressable strips require a pin for each \"color\" channel. To drive these strips, additional circuits (MOSFETs) are required. As of v0.13.1, WLED supports single color, CCT, RGB, RGBW and RGBCCT strips. These strips are commonly found at 12 or 24 volts. The default PWM frequency for dimming is 880 Hz on ESP8266 and 19531 Hz for ESP32.</p>"},{"location":"basics/compatible-hardware/#controllers-with-wled-pre-installed","title":"Controllers with WLED pre-installed","text":"<p>Info</p> <p>Unless otherwise noted, controllers feature everything you need for most WLED setups, except a power supply, wiring and fuses, and of course the LEDs themselves!</p> Name Description 8 Port LED Distro This is an 8 port ESP32 based LED distro board running WLED. Distributing both power and data in 1 board. The WT32-ETH01 provides support for Wi-Fi or ethernet connections. It can be used with either 5v or 12v or 24v LED pixels. Also includes a USB-C port for programming, level shifter, 5 amp fuse on every port, multiple voltage inputs with no jumpers to set and phoenix connectors for easy wiring. A1-SLWF-02 WLED controller WLED dedicatedly designed Controller that supports 5V-12V addressable strips from Ukrainian developers. Based on ESP8266. Slim design, sensor button, powered either by type-C or screw-terminal. Screwdriver included. Worldwide delivery. ABC! WLED Controller / ESP8266 Commercial controller for 5V LED strips. Based on ESP8266 uC. Two outputs. Ready to use. Additional Relay&amp;Fuse board available. (German shop &amp; shipping only within Germany). A similar one is available at WLED.SHOP ABC! WLED Controller / ESP32 Commercial controller for 5V LED strips. Based on ESP32 uC. Two outputs. Option for digital microphone / sound reactive. Ready to use. Additional Relay&amp;Fuse board available. (German shop &amp; shipping only within Germany). A similar one is available at WLED.SHOP. ABC! WLED Shield, all-purpose, for ESP8266/ESP32 Commercial WLED Shield for 5V/12V LED strips. To be used with ESP8266 or ESP32 in D1 mini format. Two outputs. Option for digital microphone / sound reactive (with ESP32). Automatic 5V/12V recognition (no jumper/switch etc. required). Enclosure is available too. German shop &amp; shipping currently only within Germany. Athom Light Strip Controller Simple controller with enclosure for reliably driving 3 pin 5V LEDs. Uses 2M ESP8266. Athom High Power Addressable LED Strip Controller Higher power options than the above system. Supports optional clock output. Athom LS8P ESP32 Music Controller ESP32 based controller with dual output, microphone and IR. Comes with WLED preinstalled Athom RGBW Light Strip Controller Has outputs for individual color channels. Cadsbi Motion Smart Ready to use solution with 3 output ports, an external antenna, in a high quality metal enclosure cod.m Wi-Fi Pixel Controller Fully completed control PCB with level shifter, terminals and case - pre-flashed with WLED! ESP8266 Pixel Controller DIY board for 5V/12V LED strips with TTL or RS485 output using a Wemos D1 mini, integrated fuse, pluggable terminal block, 3D printed module case ESPthings.io ET-AL01 DIY board for 5 Analog channels and/or up to 5 Digital LED channels (or a combination of the latter as required), Integrated level shifter, 5v/12/24v compatibility, 4x pull-up/down GPIO, serial interface and power distribution terminals. Can be used with Wemos D1-style ESP8266 or ESP32 boards. ESP32 WLED pico board ESP32 WLED pico board,super small form factor, ready to buy on Tindie and Tindie EU. Integrated level shifter, exposed pins for extending functionality , on board I2S microphone, Firmware is here. Project page is here IOT4WLED Ready to use hardware for WLED! Laterna Based on an ESP32 for digital LED and RBG/RGBW LED strips with support for 5V, 12V and 24V LED strips. (Up to 4 channels) Laterna Mini V3 Small ESP32 based controller with optional digital microphone integrated for digital 5V LED strips. Laterna Stick USB Stick like ESP32 based controller for digital 5V LED strips. LedBox V2 LedBox V2 by StanleyProjects is a fully contained, sound reactive, ESP32 based module for controlling 5-12V addressable LED strips (WS2812, SK6812, etc.), supporting both 3-(VDD,DAT,GND) and 4-(VDD,DAT,CLK,GND) pin configuration. It includes a digital MEMS microphone, button and IR control, and a safety resettable fuse, all in a compact 3D printable case. The board comes all setup, flashed with sound reactive WLED fork, and can be purchased here. Luminxa v2.2.2 ESP32 My Baby's Got LED Certified open hardware. Easy plug-and-play WLED board for those that don't want to figure out the hardware - you won't even need a screwdriver to get started. PC power supply (ATX) powers three 5V injection points on 8A fuses. For sale now on Tindie! Full details on the github repo and maker's website. QuinLED Dig2go Designed to be the quickest and easiest 5v addressable LEDs controller available! Powered simply by using a USB-C input (just like your phone!) for a true plug and play experience. Recommended for small projects up to 15W and very complete with built-in \"power cut\" circuit when the LEDs are off to minimize idle power consumption, LED data level-shifter, built in protection circuits (including fuses), IR receiver, high quality digital microphone with audio reactive effects and even has some easy to use expansion ports for extra buttons or for instance an I2C screen! All of this is housed in a high-quality custom plastic case (not 3D printed) and small enough to fit in the palm of your hand! Comes ready to go, pre-flashed with WLED and even combined with power supply and/or LED strip in different bundles! Buy here! QuinLED Dig-Uno 2021 updated version! DIY/Pre-Assembled board for digital LED driving. Integrated level shifters, temperature sensor option, Auto 5v-24v compatibility, pull-up/down GPIO and safety features such as a onboard fuse. Recommended to use (and comes with) with custom QuinLED-ESP32. Pre-assembled and pre-flashed with WLED available to buy!. Aircoookie's personal recommendation for medium-size WLED projects. QuinLED Dig-Quad 2021 updated version! DIY/Pre-Assembled board for 4 (5) channel digital LED driving. Integrated level shifters, temperature sensor option, Auto 5v-24v compatibility, pull-up/down GPIO and power distribution terminals with 5x onboard fuses for easy LED power injection. Recommended to use (and comes with) with custom QuinLED-ESP32. Pre-assembled and pre-flashed with WLED available to buy!. Aircoookie's personal recommendation for large-size WLED projects with advanced power and output requirements. QuinLED Dig-Octa The Dig-Octa system is for your medium to very large projects! It comes fully pre-assembled and is the ideal board to drive 5v-24v digitally addressable LEDs. The system is composed of brain- and power-boards and is designed to be fully stackable in various configurations of both types of boards, to perfectly adapt to your needs. Some features are: 8 LED data-channels, built-in level-shifters and resistor switchers, Ethernet and external antenna WiFi, auto 5v-24v compatibility, high current handling (up to 50A to 100A!), fully fused inputs and outputs, dedicated relay circuit, I2C temperature sensor, and much more! Comes pre-flashed with WLED and is highly recommended for medium to very large projects. Buy here! Simple WLED Board Very simple DIY board, minimum of required components, option for 5V/12V LEDs. Easy to solder (no SMT components). Simple to understand connection schematics and pictures. Can be used with ESP8266 or ESP32 in D1 mini Format. sjm autoprod rgbw, rgbw2+, rgbw4 Complete, fully-sealed, analog and digital controllers for vehicular use. rgbw has one RGBW channel, rgbw2+ has two analog, RGBW channels plus two/four addressable outputs (requires external 5V source for 5V LEDs). rgbw4 has four analog RGBW channels. 2+ and 4 support 12V or PWM/analog inputs and have internal PTC \"fuses\". WiFi Controlled Desk Lamp Open source PCB for WLED Yet Another WLED Controller Small and simple device for 5V addressable LED strips with minimum components and fully assembled by PCB manufacturing service in standard case. Firmware is here"},{"location":"basics/compatible-hardware/#controllers-on-tindie","title":"Controllers on Tindie","text":"<p>\ud83c\udf1c</p> Name Description WLED ESP32 universal controller ready to buy on Tindie, 100% compatible with WLED project. Integrated level shifter, 2 outputs for LEDs strips, 1 fused out for LED strip, relay for energy-saving, temperature sensor, PWM fan header, USB port for re-programing. Headers for shields to extend functionality. Available shields for controller is here,  Firmware is here. ESP-01 WLED shield shield board for ESP-01 board, ready to buy on Tindie. Integrated level shifter, 3 outputs for various configurations, mosfet for 1 analog channel, Firmware is here. WLED Wemos mini shield shield board, ready to buy on Tindie also Tindie EU. Integrated level shifter, 2 outputs for LEDs strips, 1 fused out for LED strip, resettable fuse for the development board, exposed I2C interface for display or sensors. Exposed pins Digital microphones. Works with Wemos D1 mini and D1-style ESP32 boards. Firmware is here. WLED Wemos shield shield board, ready to buy on Tindie also Tindie EU or DIY 100% compatible with WLED project and WLED sound reactive fork. Integrated level shifter, 4 outputs for LEDs strips, 1 fused out for LED strip, resettable fuse for the development board, exposed I2C interface for display or sensors, relay for energy-saving and 1-wire temperature sensor. Exposed pins for Analog and Digital microphones. Works with Wemos D1 mini and D1-style ESP32 boards. Firmware is here. WLED waterproof controller with external antenna DIY board, designed for use outside permanently and for longer range Wi-Fi connection. No SMD components means it is easier to solder for DIYers. 100% compatible with WLED project. Level shifter, fuse for LED strip, resettable fuse for Wi-Fi module, exposed I2C interface for display or sensors, relay for energy-saving and 1-wire temperature sensor. Build around ESP-07S module. Firmware is here"},{"location":"basics/compatible-hardware/#controllers-wled-can-be-installed-to","title":"Controllers WLED can be installed to","text":"<p>Warning</p> <p>If the controller does not have a USB port and no firmware supporting wireless updates pre-installed, installing WLED to it requires an FTDI flasher and in some cases, soldering.</p> Name Chip Description ESPixelStick v3 ESP8266 The ESPixelStick V3 is a WiFi Pixel and DMX single output controller built around the ESP8266 platform. It utilizes industry standard E1.31 sACN and DDP protocols for control of up to 680 WS2811 pixels (4 Universes) or 63 GECE Pixels.  The output passes through a built-in RS485 transceiver, allowing for driving DMX and differential Renard inputs (or using a differential receiver for long-distance between board and first pixel). The on board switching regulator allows you to power the ESPixelStick with 5V-24V -- Just match the voltage of the pixels you are using, no voltage configuration is required.  Note: Does not come preconfigured with WLED, you must flash the ESP8266 yourself. SP108e v2 ESP8285 Hardware-Modification required and different versions exists! 8285-based 2M Controller that supports addressable RGBWW LED strips, also with CLK line (like ATA102). 5-24v DC input, 85mm x 45mm x 23mm. Vendors list spledapps 'Led Shop' as the supporting mobile application. Board is silk screened with 'SP108e'. No pads are exposed and a second processor is used to control the LEDs. Pin7 of that processor needs to be grounded to hold it in reset state. Then you can connect GPIO0 to GND and TX, RX, VCC, GND for flashing. Connect GPIO2 to R4 for DATA out and GPIO13 to R3 for CLK out. Flashed via PlatformIO, esptool. OTA updates work. Pics of pinout here: https://github.com/psxde/sp108e-led-controller/raw/main/sp108ev2_inside.png SP501e ESP8285 8285-based 1M Controller that supports both Addressable and PWM-based RGBWW LED strips. Note that recent versions have 2M. 5-24v DC input, 55mm x 26mm, sold under BTF lighting, RGBZone, etc. Vendors all list 'Fairynest' as the supporting mobile application. Board is silk screened with 'SP5XXe' but no other markings. Serial pads are exposed on the back-side of the board with GND and GPIO0 right next to each other and thus Flash access fairly straight forward. GPIO 0 must be pulled to GND at boot and throughout the flashing process.  I/O configuration: LEDPIN is 'GPIO3' for addressable (note this pin is limited to approx. 250 LEDs), BTNPIN is GPIO 1. PWM pin out for RGBWW: CW: 14, WW: 12, B: 13, R: 15 and G: 4. Flashed via PlatformIO, ESPHome and Tasmotizer. Pics of board here: https://github.com/Operation760/SP501e-RGB-LED-Controller-/blob/master/SP501e_top_bottom_traced.jpg  Flashing Connections: https://github.com/tonyn0/sp501e-flashing/blob/main/sp501e%20flash.png SP511e ESP8285 An ESP8285 2MB controller with 3 case buttons, built in mic, IR receiver, 38 key remote, and dual outputs. The dual outputs are connected to the same data pin. There is a step-by-step guide for Installing WLED on SP511E Controller. ESP LED Strip WIFI Control Board [ESP Version] ESP8266 Controller for addressable or analog LEDs (RGBW), 6-27VDC input, no level shifter, reset and boot buttons, enclosure. NOTE: Although this uses high-current transistors, they used jumpers on two of the connections so you are limited to their current rating (3A?)."},{"location":"basics/compatible-hardware/#other-products-wled-can-be-installed-to","title":"Other products WLED can be installed to","text":"Name Chip Description Merkury MI-BW210-999W ESP8285 Tuya Style WiFi Led light bulb, Warm White + RGB. There are two versions of this same bulb sold in the same packaging only way to check is to look at the bulb, EBEQPW92 uses PWM led control and is compatible with WLED however EBEQPW06 uses an SM16716 chip and is not currently compatible with WLED. Managed to flash using tuya-convert and a custom WLED build with the following analog pinout: B:4, G:5, R:13, W:14. Extras disabled to allow OTA, OTA only way to flash this, programming headers are not internally available. Shelly RGBW2 ESP8266 For \"analog\" LED use only! Runs on 12-24VDC. One button and one input. Pins: R=12, G=15, B=14, W=4. Finished, commercial product that can be flashed. More info and flashing docs Athom 15W bulb ESP8266 (2M flash) 15W bulb with RGB, warm white, and cold white LEDs. Compatible with all voltages, available form factors E27, B22 and GU10"},{"location":"basics/compatible-hardware/#raw-esp8266esp32-boards","title":"Raw ESP8266/ESP32 boards","text":"<p>Tip</p> <p>While these can work like the controllers above without extra hardware, you might get flickering without adding an external levelshifter. Using them without a controller board/shield is only recommended if you like tinkering with electronic projects.</p> Name Chip Description Adafruit Feather Huzzah ESP8266 General-purpose ESP8266 Board with USB, battery connector, etc. D1 mini-style ESP32 ESP32 A nice compact ESP32 development board. D1 mini compatible layout. ESP32 DevKitC v4 ESP32 The original ESP32 Development Board made by Espressif Systems. H803 WiFi ESP8266 ESP8266EX based controller with level shifter inside. Data pin GPIO1 Clock pin GPIO14. Tested with WS2813 strip and Firmware fork is here. NodeMCU-32s ESP32 The most common ESP32 development board. Works well, depending on the board you might have to press the \"Boot\" button while USB flashing Heltec WiFi Kit 8 ESP8266 Another alternative of ESP8266 board. OLED display 128X32 pixel, battery charger on board. Almost the same functionality and price as the Wemos board. Plus it can be used in projects with external batteries. NodeMCU ESP8266 Another popular ESP8266 development board. A bit bigger than the D1 and has pins pre-soldered. There are multiple versions with slight differences, not all are tested. ESP-01 ESP8266 One of the first and cheapest ESP8266 boards available. Not recommended for general WLED installs (needs external USB/serial chip, voltage converter, only has 1mb of flash, so soon no wireless updates possible) Olimex ESP32 POE ESP32 Ethernet (PoE) and WiFi, though usage of the ethernet port requires a custom compile. The PoE should not be used to power LEDs due to a maximum throughput of 4W. For most installations, standard ethernet should be used, supplying power through the 5V pin. QuinLED-ESP32 Custom design D1 Mini32 formfactor ESP32 module Fed up with the bad quality of generic ESP32 modules on the market, designed my own \"beefed up\" version. Available in multiple versions: QuinLED-ESP32-AB (Antenna Board), QuinLED-ESP32-AE (Antenna External), QuinLED-ESP32-ABE (Antenna Board + Ethernet). Aircoookie's recommendation for running WLED. RE5V1C ESP8285 5v DC input - onboard 10A relay TwilightLord-ESP32 ESP32 ESP32 Dev Board with latest WROOM-32E module, USB Type-C, 800mA LDO, 8MB flash and PTC fused. D1 Mini32 form factor and compatible pin out.16MB Flash version also available Wemos D1 mini ESP8266 An affordable ESP8266 development board. Aircoookie's recommendation for running WLED if you want an ESP8266 board. Current version: 3.1.0 Wemos D1 mini Pro ESP8266 A newer development board with an external antenna connector. Works very well with WLED. Recommended if your signal strength is too low with another board. Current version: 2.0.0. Version 1.0.0 has the same form factor as the D1 mini. WT32-ETH01 ESP32 Under development! Ethernet (non-PoE) and WiFi enabled alternative to the Olimex boards, for 1/4 the cost. Features no PoE, and requires initial flashing of a custom compiled image using a FTDI or similar USB to serial converter."},{"location":"basics/compatible-hardware/#esp32-boards-on-tindie","title":"ESP32 boards on Tindie","text":"<p>\ud83c\udf1c</p> Name Description ESP32 mini dev board 16mb by SerKo (aka Serg). Buy on Tindie US or Tindie EU. ESP32 Dev Board with latest WROOM-32E module, USB Type-C, PTC fused, over-voltage protection. D1 Mini32 form factor and compatible pin out ESP32 pico board with digital microphone by SerKo (aka Serg). Buy on Tindie US or Tindie EU. ESP32-pico-D4 development board with integrated ics-43434 microphone"},{"location":"basics/compatible-hardware/#microphones-on-tindie","title":"Microphones on Tindie","text":"<p>\ud83c\udf1c</p> Name Description Digital I2S microphone ICS-43434 by SerKo (aka Serg). Buy on Tindie US or Tindie EU. Digital I2S PDM microphone SPM1423 by SerKo (aka Serg). Buy on Tindie EU."},{"location":"basics/compatible-hardware/#useful-boards-and-addons","title":"Useful boards and addons","text":"Name Description TwilightLord-ESP32 Ethernet Shield Ethernet Shield (10/100Mbps) for ESP32 boards. Stackable with D1 Mini32 form factor boards. Wemos D1 mini Level Shifter Shield A level shifter shield (74HCT125) - by Evil Genius Labs LLC. WIZmote remote control Remote control using radio network. Compatible with WLED (vesions 0.14.0-beta3 and above). No additional receiver required."},{"location":"basics/compatible-hardware/#compatible-pc-rgb-fans-and-argb-accessories","title":"Compatible PC RGB Fans and ARGB accessories","text":"Brand Model Comments Corsair HD120 Fan Uses WS2812B, data-in only PCCOOLER Moonlight 5-pack Fans Uses WS2812B, includes Data-out connector to keep each fan uniquely addressable if wired in series like traditional LED strips Any 5v 3-pin ARGB for PC Any PC RGB device that supports the 5v 3-pin ARGB motherboard header should work fine with WLED. All the major motherboard vendors support the Corsair HD120 and PCCOOLER fans listed, so we can safely assume any device that supports motherboard ARGB 5V 3-Pin standard will work with WLED."},{"location":"basics/compatible-hardware/#levelshifters","title":"Levelshifters","text":"Name Description SN74AHCT125 Aircoookie's recommended levelshifter. Often used in DIY and commercial controllers. SN74AHCT32 Same pinout as above can be used. This is just an OR gate, but any AHCT gate can be used if inputs are connected appropriately. ;) SN74HCT125N Slower, cheaper version. Works just as well for WS2812, but not recommended for APA102. SN74LVC2T45 Modern bus transceiver with voltage translation Yet Another WLED Controller TXS0102, TXS0108 Bidirectional levelshifters that may work fine with WLED (if possible, 74AHCT gates should be preferred as they support both longer data lines and faster protocols) F-Amp Level shifter/data booster <p>Warning</p> <p>I2C shifters are generally too slow for addressable LEDs, so don't use them.</p> <p>Further reading: Logic Level Shifters for Driving LED Strips</p> <p>How to connect Levelshifters:  </p>"},{"location":"basics/compatible-hardware/#usbttl-adapters","title":"USB/TTL adapters","text":"Name Description CH340 CH340 module instead of CP2102, PL2303 or FTDI/FTDT. The CH340 can deliver more current which is needed while the flash process depending on the board type. The timing is also much more stable. For boards with an USB/TTL adapter onboard this is NOT needed ESP uploader CP2102N module. Same USB to UART converter as many recent Dev boards using. Featuring latest USB-C connector. For use with many ESP32, ESP8266, ESP8255 and Tuya based modules. 3.3V logic and 5V power pass through for custom boards."},{"location":"basics/compatible-hardware/#miscellaneous","title":"Miscellaneous","text":"<p>Sorting: Sensors, Displays, Actuators</p> Name Description HC-SR501 \u00a0PIR sensor with adjustable sensitivity and on time delay (suitable as a button). HC-SR602 \u00a0PIR sensor (not suitable as a button but can be used with PIR sensor usermod). TSOP38238 IR receiver compatible with most IR remotes. SSD1305 I2C display, can be used with 4 Line Display usermod. SSD1306 I2C &amp; SPI display, can be used with 4 Line Display usermod. DS18B20 Recommended temperature sensor for use with WLED. Compatible with the Temperature usermod Display shield Various configurations. Compatible with the ESP32 WLED dev board also can be used with ESP32 mini dev boards. 12V Relay &amp; Fuse board Integrates two relays and two 10 A fuses. Suitable for WLED setups with 12 V LED Strips. 5V relay Relay module. Some will require 5V to trigger so you will need level-shifted output (similar as for LEDs) for proper functionality or a circuit with transistor or MOSFET. 5V Relay &amp; Fuse board Integrates two relays and two 10 A fuses. Suitable for WLED setups with 5V LED Strips."},{"location":"basics/compatible-led-strips/","title":"Compatible LED strips","text":"<p>WLED supports two types of LED strips: the so-called digital addressable LED strips and the so-called analog non-addressable LED strips.</p>"},{"location":"basics/compatible-led-strips/#addressable-led-strips","title":"Addressable LED Strips","text":"<p>Addressable LED Strips allows to control individual LEDs separately. This enables you to use many effects. The supported types are listed below. There are sometimes new types coming onto the market that have a compatible control protocol.</p> <p>Sorting: 5v data only, 5v Data + Clock, 12v data only</p> Type Voltage Comments SK6812 5v/12v RGBW WS2811 5v usually found in IP68 sealed 12mm pixel strings WS2812B 5v WS2813 5v has a backup data line APA102 5v using 2 data pins, Clock and Data LPD8806 5v using 2 data pins, Clock and Data WS2801 5v using 2 data pins, Clock and Data SK9822 5v using 2 data pins, Clock and Data UCS8903 5v GS8208 12v TM1814 12v RGBW WS2811 12v usually 3-LED segments, has data-line resistor WS2814 12v/24v RGBW, 3-LED groups (12V) / 6-LED groups (24V) as one logical LED. Must be controlled as SK6812 type, color order: BRG, swap W and G (this option is available since WLED 0.14.0-b1) WS2815 12v has a backup data line LPD6803 12v P9813 5-24 v TM1829 5-24 v UCS8904 5-24 v RGBW"},{"location":"basics/compatible-led-strips/#non-addressable-led-strips","title":"Non-Addressable LED Strips","text":"<p>WLED supports non-addressable LED strips as well. Unlike addressable strips, non-addressable strips require a pin for each \"color\" channel and all LEDs are controlled the same way. To drive these strips, additional circuits (MOSFETs) are required. A basic circuit diagram is shown here. You need one MOSFET and one GPIO per color. It should be noted that the MOSFETs are destroyed very quickly in the event of an overload. To reduce the risk of fire and prevent personal injury, additional circuit elements should be implemented to protect MOSFETs from overtemperature and overload. Depending on the type, fuses are too slow for this! You might consider using self-protected MOSFETs too.  As of v0.13.1, WLED supports single color, CCT, RGB, RGBW and RGBCCT strips. These strips are commonly found at 12 or 24 volts. The default PWM frequency for dimming is 880 Hz on ESP8266 and 19531 Hz for ESP32.</p>"},{"location":"basics/compatible-software/","title":"Compatible Software","text":"<p>Still under construction, feel free to add to the list!</p> <p>This page lists some third-party software that can interface with WLED!</p>"},{"location":"basics/compatible-software/#controllers","title":"Controllers","text":"<p>Controllers use the WLED API to change the current light settings.</p> Name Description Home Assistant Versatile and feature rich home automation system. Out-of-the-box WLED integration with automatic discovery. Homey pro with the D.A.L.O.R App Home automation system, WLED integration via the D.A.L.O.R. app  with automatic discovery. ioBroker adapter Versatile and feature rich home automation system. Out-of-the-box WLED integration with automatic discovery. Lumia Stream Allows for control of your lights from streaming software node-red-contrib-wled Node-RED nodes for WLED OctoPrint-WLED Connect your OctoPrint install to your WLED install using this plugin to show things like printer status, progress and more! openHAB Another more professional feature rich home automation system. WLED integration made easy. Link 2 WLED-GUI This is a cross-platform desktop app for WLED. You can use it on Windows, Linux and Mac. wledQuickControl macOS 11.0+ Menu Bar app for controlling power and brightness."},{"location":"basics/compatible-software/#sources","title":"Sources","text":"<p>Source programs generate light data and stream them to WLED in real time.</p> Name Description LedFx A music visualization tool written in Python. Connects to WLED via E1.31 or UDP. Dr.Zzs tutorial video Prismatik WLED-WiFi (native) Ambilight via WiFi or serial - natively supports UDP (WARLS, DRGB, DNRGB protocols). Prismatik WLED-WiFi (plugin) Ambilight via WiFi - a Plugin alternative for Prismatik WLED support. xLights xLights is a Light Sequencer and Show scheduler which works with WLED. Dr.Zzs has made some videos to set it up. Intro Video Hyperion.ng Hyperion is an open-source Bias or Ambient Lighting implementation which you might know from TV manufacturers. It supports many LED devices and video grabbers. Support for WLED through UDPraw at port 19446 or E1.31. Tutorial video, Dr.Zzs video Hyperion (Classic) Hyperion is an open-source Bias or Ambient Lighting implementation which you might know from TV manufacturers. It supports many LED devices and video grabbers. Support for WLED through UDPraw at port 19446 or E1.31. Enigmalight Ambilight clone for broadcom based linux receivers.  It supports many LED devices. Support for WLED through USB Adalight/Momo. Download to various forums use the WEB search function of your browser. Q Light Controller+ QLC+ is a free and cross-platform software to control DMX or analog lighting systems like moving heads, dimmers, scanners etc. QLC+ runs on Linux, Windows (XP+), macOS (10.7+) and the Raspberry Pi. WLED can be used with E1.31 (sACN). use major version 4, as 5 is in development."},{"location":"basics/compatible-software/#various","title":"Various","text":"Name Description Logitech WLED Sync Windows tray application to sync Logitech gaming peripherals to WLED."},{"location":"basics/compiling-wled/","title":"Compiling WLED","text":"<p>Moved, see How to compile WLED</p>"},{"location":"basics/faq/","title":"FAQ","text":"<p>This page will continually get updated with questions often asked.</p>"},{"location":"basics/faq/#contents","title":"Contents","text":""},{"location":"basics/faq/#installation","title":"Installation","text":"<ul> <li>What binary should I use?</li> <li>I've flashed a bin, but i get no response at all</li> </ul>"},{"location":"basics/faq/#connection-issues","title":"Connection issues","text":"<ul> <li>Once I attach LEDs, I can't connect to the ESP anymore!</li> <li>I have entered my WiFi credentials and rebooted, but I can not connect to the module now!</li> <li>The module once was connected, but I can no longer reach it.</li> <li>The wled-xxx.local address (mDNS) does not work.</li> <li>Is it safe to do a port forwarding to the public internet to control the lights from anywhere?</li> <li>My device is unresponsive or animations lag!</li> <li>I'm having a bootloop! (LEDs turn on every ~5seconds)</li> <li>I am running realtime (e.g. E1.31) and not all of my LEDs are driven fluently!</li> <li>Still having connection issues/connection dropping: what more can i check?</li> </ul>"},{"location":"basics/faq/#compilation-issues","title":"Compilation issues","text":"<ul> <li>When compiling WLED in VS Code using platformio, I get an error.</li> </ul>"},{"location":"basics/faq/#led-issues","title":"LED issues","text":"<ul> <li>My LEDs don't turn on at all.</li> <li>My LEDs don't get as bright as they should!</li> <li>My LEDs are unable to be set into an consistent solid color.</li> <li>When I select green, the LEDs turn red!</li> <li>My LEDs act funny and flicker randomly.</li> <li>Not all my LEDs turn on.</li> <li>How to turn off the bright blue onboard LED?</li> <li>Why is gpio2/D4 the default LED pin?</li> <li>Why can I only use 500 LEDs on the ESP8266 GPIO pin 3?</li> <li>What LED strip hardware is supported by WLED?</li> </ul>"},{"location":"basics/faq/#general-questions","title":"General questions","text":"<ul> <li>What does the name WLED mean?</li> <li>What do the WLED version names mean?</li> <li>What is the difference between the brightness sliders in the web UI?</li> <li>My Segments are gone after a reboot!</li> <li>May I sell a product running WLED?</li> </ul>"},{"location":"basics/faq/#my-question-or-solution-is-not-on-this-page","title":"My question or solution is not on this page","text":"<ul> <li>Check out the WLED forum!</li> <li>Look through the Issues</li> <li>If I report a new Issue, what do i need to share?</li> </ul>"},{"location":"basics/faq/#installation_1","title":"Installation","text":""},{"location":"basics/faq/#what-binary-should-i-use","title":"What binary should I use?","text":"<p>Please see this page.</p>"},{"location":"basics/faq/#ive-flashed-a-bin-but-i-get-no-response-at-all","title":"I've flashed a bin, but i get no response at all","text":"<p>Some users report first erasing the flash (yes, even on a new device) sometimes helps .</p>"},{"location":"basics/faq/#connection-issues_1","title":"Connection issues","text":""},{"location":"basics/faq/#once-i-attach-leds-i-cant-connect-to-the-esp-anymore","title":"Once I attach LEDs, I can't connect to the ESP anymore!","text":"<p>The gpio2/D4 pin needs to be high (pullup) at powerup time for the controller to boot successfully. If you accidentally connected the strip the wrong way (if it has arrows printed on, make sure they face away from the pin, otherwise pay attention to the DIN printing). Most strips have the 3-pin male JST connector with 3 holes on the input side. Some users have reported troubles booting even with the direction being correct. In that case, please try adding a 3.3 or 4.7kOhms resistor between the data pin and 3v3 pin!</p>"},{"location":"basics/faq/#i-have-entered-my-wifi-credentials-and-rebooted-but-i-can-not-connect-to-the-module-now","title":"I have entered my WiFi credentials and rebooted, but I can not connect to the module now!","text":"<p>If you did not enter a static IP, the module will automatically obtain a dynamic IP from the router. You can check it in the router configuration or in the settings page, if the Access Point is still enabled. An easier way is to use the WLED Android app which features automatic discovery!</p>"},{"location":"basics/faq/#the-module-once-was-connected-but-i-can-no-longer-reach-it","title":"The module once was connected, but I can no longer reach it","text":"<p>First, make sure you can reach the connected WiFi yourself (with another device). See if you can connect to the Access Point, then go to 4.3.2.1/reset. Else, power-cycle the module manually.</p>"},{"location":"basics/faq/#the-wled-xxxlocal-address-mdns-does-not-work","title":"The wled-xxx.local address (mDNS) does not work","text":"<p>This only works with Apple devices out of the box. You can install Bonjour to make it work in Windows. For Android there is no convenient way to achieve it, though you can use apps like \"Bonjour search\" to find the IP. I highly recommend you install the WLED app, which makes automatic discovery easy!</p>"},{"location":"basics/faq/#is-it-safe-to-do-a-port-forwarding-to-the-public-internet-to-control-the-lights-from-anywhere","title":"Is it safe to do a port forwarding to the public internet to control the lights from anywhere?","text":"<p>See this page.</p>"},{"location":"basics/faq/#my-device-is-unresponsive-or-animations-lag","title":"My device is unresponsive or animations lag!","text":"<p>You are probably using too many sync interfaces. Please only enable one of Hue sync, MQTT, or Blynk at a time. For optimal performance, use two devices and sync them via the UDP notifier. Maybe you are also using a very high amount of LEDs. 750 is the recommended maximum. If using E1.31 feature on an ESP32, try \"Disabling WiFi Sleep\" in the WiFi setup section to reduce lag/stuttering of visual effects.</p>"},{"location":"basics/faq/#im-having-a-bootloop-leds-turn-on-every-5seconds","title":"I'm having a bootloop! (LEDs turn on every ~5seconds)","text":"<p>Please open an issue or message me on Discord to resolve your issue. Most of the time, wiping the flash (Arduino IDE compile setting: Erase flash -&gt; All flash contents) resolves the issue. Unfortunately it will also reset all your settings and presets. You can also try if using a different ESP resolves the issue. If you compiled with lwip version 2, try version 1.4 Higher Bandwidth instead!</p>"},{"location":"basics/faq/#still-having-connection-issuesconnection-dropping-what-more-can-i-check","title":"Still having connection issues/connection dropping: what more can i check?","text":"<p>Try disabling \"Emulate Alexa device\" in Sync settings before entering your home Wifi credentials. Check whether mDNS is on or off and toggle it: does it make a difference? Same for 'NTP'. Same for 'Sync Send'. Check your router: is your 2.4Ghz on band 1: if not, try it please. If you have the possibility to try another 8266, please try it.</p>"},{"location":"basics/faq/#i-am-running-realtime-eg-e131-and-not-all-of-my-leds-are-driven-fluently","title":"I am running realtime (e.g. E1.31) and not all of my LEDs are driven fluently!","text":"<p>Realtime effect streaming uses a rather large bandwidth as data is transmitted uncompressed. For example, to drive 1000 LEDs at 30 fps, you will need a data rate of 720 kBit/s, which is difficult to achieve with most cheap ESP boards over WiFi. Even if you split the total amount of LEDs across multiple controllers, your WiFi network could become the limiting factor quickly. The best way to ensure a low-latency, reliable, fluid stream when using large quantities of LEDs is to invest in a wired Ethernet ESP32 board like QuinLED-Dig boards with ethernet or the Olimex ESP32-POE.</p> <p>There is a 9 DMX universe limit by default in WLED. You can raise it in line 240 of const.h (E131_MAX_UNIVERSE_COUNT 9) and compile your own binary, but the performance of 2000 LEDs over WiFi will likely not be good unless you use an Ethernet enabled board.</p> <p>If Ethernet is not an option, decrease your LED count as far as possible, lower the frame rate in the sending software and make sure the WiFi signal reception of the board is good. Even without Ethernet, a board with an external antenna is significantly better than a PCB antenna board.</p> <p>Furthermore I suggest using the DDP protocol if available in your sender software (available in xLights). DDP has a smaller packet header and because of the reduced overhead the fluidity of your animations will be a bit better.</p>"},{"location":"basics/faq/#compilation-issues_1","title":"Compilation issues","text":""},{"location":"basics/faq/#when-compiling-wled-in-vs-code-using-platformio-i-get-an-error","title":"When compiling WLED in VS Code using platformio, I get an error","text":"<p>Try building again. If the error says the <code>wled00.ino.cpp</code> or <code>.sconsign27.db.dblite</code> file could not be found, this often helps. You can also try this!</p>"},{"location":"basics/faq/#led-issues_1","title":"LED issues","text":""},{"location":"basics/faq/#my-leds-dont-turn-on-at-all","title":"My LEDs don't turn on at all.","text":"<p>Please make sure you have connected the strip to GPIO2 and it is sufficiently powered.</p>"},{"location":"basics/faq/#my-leds-dont-get-as-bright-as-they-should","title":"My LEDs don't get as bright as they should!","text":"<p>If the brightness slider in the UI is already at maximum, try checking the auto brightness limiter in the LED settings. Set the milliamp limit to slightly below the rating of your power supply. If the LEDs are still too dim or change color towards the end of the strip, there may be a significant voltage drop. Try injecting 5v power at the end or middle of the strip with some appropriate cabling.</p>"},{"location":"basics/faq/#my-leds-are-unable-to-be-set-into-an-consistent-solid-color","title":"My LEDs are unable to be set into an consistent solid color","text":"<p>If the LEDs should be individually addressable, like the SK6812, but instead they only behave as either RED,GREEN OR BlUE pixels (in a row). You might not have enabled (settings -&gt; led preferences) \"LEDs are 4-channel type (RGBW)\"  for an RGBW/RGBWW/RGBNW strip. This behaviour is accompanied by WLED being unable to address all LEDs, if you specify the exact amount of LEDs in the strip.</p>"},{"location":"basics/faq/#when-i-select-green-the-leds-turn-red","title":"When I select green, the LEDs turn red!","text":"<p>Depending on the type of LEDs used, Red and Green or other colors might be reversed. You can change the order in LED settings. WS2812B and most related chips use GRB, WS2811 uses RGB in most cases.</p>"},{"location":"basics/faq/#my-leds-act-funny-and-flicker-randomly","title":"My LEDs act funny and flicker randomly","text":""},{"location":"basics/faq/#reason-1","title":"Reason 1","text":"<p>If you use an external 5V power supply for your LEDs, please connect the GND of power supply, LEDs, and ESP. Otherwise, the LEDs can't read the data signal from the ESP.</p>"},{"location":"basics/faq/#reason-2","title":"Reason 2","text":"<p>The ESP8266 is a 3.3V microcontroller while the WS2812B LED uses 5V. I have personally got away with this in most cases, but you should technically add a level shifter. A string of WS2811 did not work in one case (pure static white). A possible workaround is chaining a single WS2812B pixel in front and checking \"Skip first LED\" in the settings. My recommended levelshifter is the SN74AHCT125N, also used in the QuinLED Dig-Uno board. If you don't have a level shifter, you can use this creative workaround.</p>"},{"location":"basics/faq/#reason-3","title":"Reason 3","text":"<p>Your data line can only be so long. Try out with less or thicker wire between your data pin on your controller and the LED strip, or add (see video) some voltage booster (which can make even 40m data wire length work ;-)).</p>"},{"location":"basics/faq/#reason-4","title":"Reason 4","text":"<p>If they don't flicker, but display funny colors, try switching between RGB/RGBW modes in LED settings.</p>"},{"location":"basics/faq/#not-all-my-leds-turn-on","title":"Not all my LEDs turn on","text":""},{"location":"basics/faq/#reason-1_1","title":"Reason 1","text":"<p>By default the LED count is set to 30. If you have more and can power them, go to LED settings and increase the LED count! Please also enter the milliamp rating of your 5v power supply for optimal brightness in the field below it. Do not increase the mA number if you power LEDs directly from the 5V pin of the ESP!</p> <p>See here for maximum recommended LED counts.</p>"},{"location":"basics/faq/#reason-2_1","title":"Reason 2","text":"<p>An LED in your chain may be broken. Try another strip or removing the first LED that doesn't light up. Make sure you are in solid effect mode and the LED count is set high enough first!</p>"},{"location":"basics/faq/#how-to-turn-off-the-bright-blue-onboard-led","title":"How to turn off the bright blue onboard LED?","text":"<p>This LED can be very distracting. Unfortunately it can't easily be disabled as it shares the gpio2/D4 pin with the LED output. It is turned off together with your LEDs (unless they require <code>Off Refresh</code> to be active) Currently there are 3 workarounds:</p> <ul> <li>Cover the LED</li> <li>Remove the LED permanently (desolder or apply pressure with e.g. a flathead screwdriver)</li> <li>Use a different <code>LEDPIN</code>, although the default is recommended for stable operation</li> </ul>"},{"location":"basics/faq/#why-is-gpio2d4-the-default-led-pin","title":"Why is gpio2/D4 the default LED pin?","text":"<p>Although pins D1 and D2 are usually regarded the best GPIO pins to use in an ESP8266 project, D4 is the default in WLED, despite having two major and one minor drawback. The major drawbacks are the permanently lit blue onboard LEDs and the fact that the pin level needs to be high (pullup) at powerup or the controller will not boot. A minor drawback is that the <code>Serial1</code> bus can not be used, but this is irrelevant in most cases, as the USB/serial converter is connected to the other <code>Serial</code> interface. The reason for using this pin is that it uses UART hardware driving, which increases stability and decreases CPU overhead especially with larger amounts of pixels.</p>"},{"location":"basics/faq/#why-can-i-only-use-500-leds-on-the-esp8266-gpio-pin-3","title":"Why can I only use 500 LEDs on the ESP8266 GPIO pin 3?","text":"<p>The problem is the DMA hardware driving method used on (just) that pin. It works well, but uses 4x (!) as much RAM memory as the UART hardware driving on pin 2 and the bitbang driver on all other pins.</p>"},{"location":"basics/faq/#what-led-strip-hardware-is-supported-by-wled","title":"What LED strip hardware is supported by WLED?","text":"<p>The compatible chipsets for the color-coding are</p> <ul> <li> <p>1 pin:</p> </li> <li> <p>WS2812B (5V)</p> </li> <li>WS2811 (12V power, with 5V signal)</li> <li>WS2813 (WS2812 with redundant data on 2 wires DI and BI, to resist LEDs failure)</li> <li>WS2815 (like WS2813 but 12V), send 5V signal on BI.</li> <li>BTF2815 (cheaper 12V)</li> <li>SK6813 (redundant like WS2813)</li> <li>SK6812 (can support up to 4 colors, commonly GRBW)</li> <li> <p>SK6805 (3 colors)</p> </li> <li> <p>2 pins (clock CI and data DI) chips:</p> </li> <li> <p>APA102</p> </li> <li>SK9822</li> <li>WS2801 (uses gpio0 and 2)</li> <li>LPD8806</li> </ul> <p>Beside the digital addressable LED strips the good old analog LED strips are supported, too:</p> <ul> <li>4 pins: RGB</li> <li>5 pins: RGBW / RGBWW / RGBCW / RGBNW (RGB + one white channel)</li> <li>6 pins: RGBCT (RGB + 2 white channels) Note: Support is only for Alexa.</li> </ul>"},{"location":"basics/faq/#general-questions_1","title":"General Questions","text":""},{"location":"basics/faq/#what-does-the-name-wled-mean","title":"What does the name WLED mean?","text":"<p>WiFi Lighting Effects Driver. Also it has LED in the name and is similar to the official term for WiFi, WLAN!</p>"},{"location":"basics/faq/#what-do-the-wled-version-names-mean","title":"What do the WLED version names mean?","text":"<p>WLED version names are Japanese! Here is a nice list of their meanings:</p> Version Name Kanji Meaning 0.10 Namigai \u6d6a\u8c9d Geoduck (don't google it!) 0.11.0 Mirai \u672a\u6765 Future 0.11.1 Fumikiri \u8e0f\u5207 Railroad crossing 0.12 Hikari \u5149 Light 0.13 Toki \u6642 Time N/A Kuuhaku \u7a7a\u767d Blank"},{"location":"basics/faq/#what-is-the-difference-between-the-brightness-sliders-in-the-web-ui","title":"What is the difference between the brightness sliders in the web UI?","text":"<p>There are three brightness slider types in the web UI. The white one in the top bar is the master brightness - it scales down every single color and all effects, palettes and segments by the same factor.  </p> <p>In contrast, the slider underneath the color wheel only applies to the currently selected color and will not affect the brightness of other colors or Palettes. It is recommended to use this slider only if you like a darker version of a color alongside other, brighter colors. It should not be used to control the overall brightness, so it is preferable to leave it on maximum and instead use the master brightness control.  </p> <p>There is a third brightness slider in each Segment panel. This serves the same purpose as master brightness, but limited to that segment. Please note that this does not override the master brightness, but instead is an additional downscaling. (If you set both Master and Segment brightness sliders to 50%, the resulting brightness is 25%)</p>"},{"location":"basics/faq/#my-segments-are-gone-after-a-reboot","title":"My Segments are gone after a reboot!","text":"<p>Segments are non-persistant by default. If you want to load your preset at every startup, just do the following:</p> <ul> <li>Set your segments up as desired</li> <li>Go into the Favorites tab in the web UI, click the save checkbox and save the config to preset slot number <code>16</code></li> <li>In LED settings, set <code>Boot Preset</code> to <code>16</code></li> </ul> <p>This will be improved in a future release, so that you will be able to save multiple segment configurations!</p>"},{"location":"basics/faq/#may-i-sell-a-product-running-wled","title":"May I sell a product running WLED?","text":"<p>WLED is licensed under the MIT license, thus you are free to use it in any way you wish as long as you retain the copyright notice and accept that I am not to be held liable for anything regarding your use of the software. For product pages, a link to the WLED GitHub repository would be hugely appreciated !</p>"},{"location":"basics/faq/#my-question-or-solution-is-not-on-this-page_1","title":"My question or solution is not on this page","text":""},{"location":"basics/faq/#check-out-the-wled-forum","title":"Check out the WLED forum!","text":"<p>You can check out and use the WLED Discourse forum.</p>"},{"location":"basics/faq/#look-through-the-issues","title":"Look through the Issues","text":"<p>Maybe someone already reported your issue, so everybody supplying support would be grateful if you take some time to search through the existing issues.</p>"},{"location":"basics/faq/#if-i-report-a-new-issue-what-do-i-need-to-share","title":"If I report a new Issue, what do i need to share?","text":"<p>When you create a ticket, please share:</p> <ul> <li>exact controller, maybe a link to the shop you bought it from</li> <li>LED-strip type and amount of LEDs</li> <li>Specifications of your power supply (max. current/voltage)</li> <li>how you wired up all components (a diagram and/or picture often helps)</li> <li>the BIN-file you tried to flash (version and file name) or your IDE version if compiling from source</li> <li>Have you followed the quick start and compile settings at https://docs.wled.me?</li> <li>Has it worked before?</li> <li>Does it works without any LEDs connected? (for instance the controller just connected to your PC over USB)</li> <li>Are you using/trying to use DHCP or static IP?</li> <li>Did you try to use a mobile hotspot instead of your WLAN AP/home wifi?</li> </ul>"},{"location":"basics/getting-started/","title":"Getting Started","text":""},{"location":"basics/getting-started/#welcome-to-the-wled-wiki","title":"Welcome to the WLED wiki!","text":"<p>Version Info</p> <p>Unless noted otherwise, all information applies to the latest release (v0.13.3).</p>"},{"location":"basics/getting-started/#quick-start-guide","title":"Quick start guide","text":"<p>1. Connect a  WS2812B-compatible RGB(W) led strip to <code>GPIO2</code>. On most ESP8266 based development boards this pin is labeled <code>D4</code>, on ESP32 based boards use <code>IO16</code> or <code>G16</code> or <code>16</code>. If the connecting wire cannot be kept short, use a level shifter/translator. Optionally connect a normally open pushbutton to <code>GPIO0</code> (NodeMCU/Wemos pin <code>D3</code>, on ESP32 use <code>IO17</code>) and ground for configurable actions. Note: Board pin naming varies depending on the manufacturer. Please use the board pinout from the specific board you purchased and use the GPIO PINS to reference this guide. Make sure to connect ESP and LED-strip grounds together!</p> <p></p> <p>While using an ESP8266 and LEDs that have clock and data, you can either use hardware SPI (mostly faster) or software SPI.   - hardware SPI: use <code>GPIO14</code> (SCLK) for clock and <code>GPIO13</code> (MOSI) for data.   - software SPI: since all pins can be changed in the Hardware section of LED settings, you can use any pins. Recommend is to use <code>GPIO1</code> (TxD) for clock and <code>GPIO2</code> (D4) for data. </p> <p>For safe operation it is recommended to size your power wires correctly and to integrate fuses. For reference, you may use this LED power, wiring and fuse calculator.</p> <p>For analog LEDs, the MOSFETs IRLZ44N or STP55NF06L are good candidates. Partial, example circuit...</p> <p> </p> <p>2. Flash the software to your ESP module! There are two options for this step:</p> <p>I just want to use WLED! (install release binary)</p> <p>I want to modify WLED (compile from source code)</p> <p>If everything worked the first thirty LEDs will light up in bright orange to stimulate courage, friendliness and success!</p> <p>3. Use a WiFi device to connect to the access point <code>WLED-AP</code> using the default password <code>wled1234</code>. You can also just scan this QR code:</p> <p></p> <p>WLED-AP is not showing up!</p> <p>If you do not see the <code>WLED-AP</code> SSID, the default SSID may have been changed at compile time.</p> <p>Go to the IP <code>4.3.2.1</code> in your browser to control your lights! You should also be able to connect to <code>wled.me</code> if in access point mode (embedded DNS server).</p>"},{"location":"basics/getting-started/#wifi-setup","title":"Wifi Setup","text":"<p>To connect your WLED module to your home Wifi:</p> <p>1. Click on the Config (gear) icon to edit your WLED module settings and choose 'Wifi Setup'.</p> <p>2. For most home networks, simply enter your Wifi network's name and network password. You can also change the mDNS address for your WLED module here.</p> <p>3. Click Save &amp; Connect at the bottom of the page.</p> <p>4. Reconnect your device to your home's Wifi network.</p> <p>5.  Check the device list in your router's user interface for the IP of the WLED device within your local network. For easy automatic discovery, use the WLED app! Have fun with the WLED software!</p>"},{"location":"basics/getting-started/#default-gpio-usage","title":"Default GPIO Usage","text":"<p>These are only defaults</p> <p>All pins can be changed in the Hardware section of LED settings. Please note that these are GPIO numbers, please consult a pinout for your board to find the labeled pin (e.g <code>D4</code> = <code>GPIO2</code> on most ESP8266 boards). When using an ESP8266 board, it's recommended to use pins <code>GPIO1</code>, <code>GPIO2</code>, or <code>GPIO3</code> for LED Data; using other pins will require bit-banging and may cause slow performance and/or issues elsewhere (such as with IR decoding).</p> Function GPIO Suggested pin LED Data 2 ESP8266: 1, 2 (3 if &lt;= 100 LEDs), ESP32: 1, 2, 3, 4, 16 Button 0 IR Remote None 4 Relay None 12"},{"location":"basics/getting-started/#software-update-procedure","title":"Software update procedure","text":"<p>Method 1: Reflashing the new update like a new install (see above).</p> <p>Method 2: The software has an integrated OTA software update capability. First you have to enable it by typing in the correct OTA passphrase (default: \"wledota\") in the settings menu. Remove the tick in the checkbox \"OTA locked\". Then save settings and reboot the ESP. Then you can select \"Manual OTA update\" in Security settings and upload a release binary. After you are done, it is recommended to lock the OTA function again. To do so, tick the checkbox again (you can change the passphrase by typing in a new one now). Reboot. If you try to access the update page now, you should see the message \"OTA lock active\".</p> <p>Method 3: ArduinoOTA is also supported.</p> <p>If you own multiple devices and want to update them</p> <p>Since v0.13 of WLED source code includes shell/command prompt scripts which is allow you to update multiple devices with a single command. Please check <code>tools</code> subfolder for <code>multi-update</code> scripts (.cmd or .sh). You will need to modify them to include IP addresses of your WLED devices and assign firmware binary file for each device. If you are using Windows, make sure you install <code>curl</code> utility somewhere in your <code>PATH</code> (curl is included with Windows 10 since build 17063). This will only work if \"OTA Lock\" is disabled.</p>"},{"location":"basics/install-binary/","title":"Install WLED Binary","text":""},{"location":"basics/install-binary/#flashing-method-1-wled-web-installer","title":"Flashing method 1: WLED web installer","text":"<p>Tip</p> <p>This is by far the easiest and fastest way to get WLED up and running!</p> <p>Make sure you are running a recent desktop Chrome or Edge browser and head over to the WLED installer site! If you are updating an existing version of WLED, make sure to uncheck \"Clean install\" so that your settings are kept. This installer is not yet available for ESPs with flash chips smaller than 4MB (e.g. ESP01)</p> <p>Tip</p> <p>After using the standard WLED installer, microphone hardware sometimes cannot be initialized properly by WLED. For flashing the MoonModules version of WLED, we recommend using this installer site: https://wled-install.github.io/</p>"},{"location":"basics/install-binary/#flashing-method-2-esptool","title":"Flashing method 2: esptool","text":"<ul> <li>First of all, please follow the steps to install esptool.py here.</li> <li>Download the latest release binary file!</li> <li>Make sure only one ESP device/microcontroller is connected to your computer! Otherwise you could accidentally overwrite the wrong one. If you know the serial port, you can also add the <code>-port COM3</code> attribute after <code>write_flash</code></li> <li>Execute this command:</li> </ul>"},{"location":"basics/install-binary/#esp8266","title":"ESP8266","text":"<pre><code>esptool.py write_flash 0x0 ./WLED_XXX.bin\n</code></pre>"},{"location":"basics/install-binary/#esp32","title":"ESP32","text":"<p>Firstly, flash the version 4 bootloader file, which you can find here. This step only has to be done once, to update afterwards the bootloader does not have to be re-installed.</p> <pre><code>esptool.py write_flash 0x0 ./esp32_bootloader_v4.bin\n</code></pre> <p>Caution</p> <p>This boolader file is only for \"classic ESP32\" boards. You need a different bootloader for esp32-S3/-S2/-C3.</p> <p>Now you can flash the actual firmware binary. Keep in mind the bootloader needs to have a flash offset of 0, but the firmware 0x10000.</p> <pre><code>esptool.py write_flash 0x10000 ./WLED_XXX.bin </code></pre> <p>When esptool.py says <code>Connecting...</code>, some ESP32 boards require you to hold the boot button (to the right of the USB port) for a few seconds  </p> <ul> <li>If you experience issues, run this command before trying <code>write_flash</code> again (Note: this will erase all settings stored on the ESP!)</li> </ul> <pre><code>esptool.py erase_flash\n</code></pre> <p>If you have a MagicHome controller, here is a good video tutorial on how to flash it.</p>"},{"location":"basics/install-binary/#esp8266-flashing-method-3-esp-home-flasher-tool","title":"ESP8266 Flashing method 3: ESP Home Flasher tool","text":"<p>Warning</p> <p>Don't use ESP Home Flasher for ESP32 boards.  On ESP32, ESP Home Flasher will make the filesystem very small (61kB), which leads to issues making presets.  Please consider using WLED ESP Flasher, or the web installer or esptool.</p> <p>This is a GUI-based tool recommended by some users as easier to use than esptool. For some boards, you might have to press some buttons after uploading:</p> <p>Hold both buttons down, plug it in, start flashing, then when it tries to detect, let go of the button to the left of the USB as you look at it, then when it detects the board type, let go of the other button.</p> <p>If running Windows, you need a driver from here: https://www.wemos.cc/en/latest/ch340_driver.html before your computer will show the COM port in ESPhome Flasher. With a Wemos D1 mini you do not need to hold down the reset button while flashing.</p> <p>Tip</p> <p>For ESP32 boards, you can use this WLED ESP Flasher instead of ESP Home Flasher. Please wait at least 90 seconds after installing, to be sure you don't interrupt WLED when formatting its flash filesystem.</p>"},{"location":"basics/install-binary/#flashing-method-4-ota-update","title":"Flashing method 4: OTA update","text":"<p>You can alternatively use my basic HTTP OTA updater sketch and upload the binary! This requires the Arduino IDE and ESP8266 core installed. If your device is already running a firmware with built-in OTA capability, you can probably use that as well.</p>"},{"location":"basics/install-binary/#what-binary-should-i-use","title":"What binary should I use?","text":"<p>I always recommend to use the latest release. Starting from WLED 0.12.0, pins can be configured in LED settings and specific binaries for different LED pins or types are no longer needed. Please use the following binary for these boards respectively:</p> Binary Name For devices WLED_0.x.x_ESP8266.bin NodeMCU, Wemos D1 mini, ESP-12, all ESP8266 with 4MB flash. Recommended. WLED_0.x.x_ESP32.bin All ESP32 devices (try this if the WLED-AP doesn't appear after flashing) WLED_0.x.x_ESP32_Ethernet.bin ESP32 devices with an Ethernet interface. Also works with WiFi only. WLED_0.x.x_ESP01.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has the full feature set, but wireless updates will not work. WLED_0.x.x_ESP02.bin All ESP8266 with 2MB flash, Athom bulbs esp32_bootloader.bin Not a WLED release. To be flashed to a brand new ESP32 before flashing the WLED binary itself. <p>Legacy binary format (up to 0.11.1)</p> Binary Name For devices WLED_0.x.x_ESP8266_1M_ota.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has some interfaces disabled (Alexa, Blynk, Hue sync, Infrared) in order for wireless updates to continue working. WLED_0.x.x_ESP8266_1M_full.bin ESP-01 (black PCB), most Sonoff devices, ESP8265, all ESP8266 with 1MB flash. This binary has the full feature set, but wireless updates will not work. WLED_0.x.x_ESP8266_512k.bin ESP-01 (blue PCB), older Sonoff devices, all ESP8266 with 512kB flash. Interfaces (Alexa, Blynk, Hue sync, Infrared) disabled, no OTA. Support will not be possible in future versions. WLED_0.x.x_ESP8266_ledpinY.bin Custom build for 4MB flash ESP8266 and WS2812B. LED pin is changed (default is GPIO2). (This is GPIOY and not DY for the D to GPIO mapping, check your boards spec!) WLED_0.x.x_ESP8266_apa102.bin Custom build for 4MB flash ESP8266 and APA102 LEDs (clock pin GPIO0, data GPIO2). WLED_0.x.x_ESP8266_ws2801.bin Custom build for 4MB flash ESP8266 and WS2801 LEDs (clock pin GPIO0, data GPIO2). WLED_0.x.x_ESP32_ledpinY.bin Custom build for ESP32 and WS2812b. LED pin is changed (default is GPIO2). LED pin 16 is useful for the QuinLed-Dig-Uno board with ESP32."},{"location":"basics/install-gui/","title":"Installation using ESP GUI","text":""},{"location":"basics/install-gui/#1-downloading-the-firmware-bin-file","title":"1. Downloading the firmware bin file","text":"<p>You can find precompiled .bin files on the release page. Be sure to download the latest version. This file looks something like this:</p> <p><code>WLED_[...]_ESP[...].bin</code></p> <p>If you are not sure what binary you should use look at this page: What binary should I use?</p>"},{"location":"basics/install-gui/#2-downloading-the-flash-download-tools","title":"2. Downloading the Flash Download Tools","text":"<p>Espressif has an official GUI tool for Windows. It has a lot of options and can be used for the ESP8266 and ESP32. You can find it on Espressif's download page here! (if the link changed, just search for <code>esp flash download tool</code> on Google)</p> <p></p> <p>After downloading the file, unzip it and start <code>flash_download_tools_v3.6.8.exe</code>.</p>"},{"location":"basics/install-gui/#3-flashing-the-firmware-bin-files","title":"3. Flashing the firmware bin files","text":"<p>After starting <code>flash_download_tools_v[...].exe</code> there should pop up two small windows. Now just click on the <code>Developer Mode</code> and<code>ESP8266 DownloadTool</code> button. Now a new window opens.</p> <ul> <li>Under the SPIDownload section select the <code>WLED_[...]_ESP[...].bin</code> file by clicking on the first <code>...</code> button</li> <li>In the Textfield next to the \"@\" char put in this adress: <code>0x0</code></li> <li>Than make sure that the file is checked (click on the checkbox)</li> <li>Click on the <code>Default</code> button</li> <li>Set SPI Speed to <code>80Mhz</code></li> <li>Set Flash Size to <code>32Mbit</code></li> <li>Select the COM Port of your ESP (usually it's not <code>COM1</code>)</li> <li>BAUD can be set to <code>921600</code></li> <li> <p>Verify that everything looks like the two picture below \u00b0ESPTool settings</p> </li> <li> <p>(optionally) click on ERASE to erase the entire flash chip</p> </li> <li>click on <code>START</code></li> </ul> <p>Now the firmware will be flashed to the ESP. When the firmware flashing was successful you see this: . Finally restart your board.</p> <p>Next steps: Quick start guide</p>"},{"location":"basics/install-wled-flasher/","title":"Installation using ESP GUI - WLED Flasher","text":""},{"location":"basics/install-wled-flasher/#1-downloading-wled-firmware-bin-file","title":"1. Downloading WLED firmware bin file","text":"<p>You can find precompiled .bin files on the official release page. Also available alternative with precompiled usermods</p> <p>If you are not sure what binary you should use look at this page: What binary should I use?</p>"},{"location":"basics/install-wled-flasher/#2-downloading-the-esp-wled-flasher","title":"2. Downloading the ESP WLED Flasher","text":"<p>You can find and download flasher here!</p> <p>After downloading a file, unzip it and start</p>"},{"location":"basics/install-wled-flasher/#3-flashing-firmware-bin-files","title":"3. Flashing firmware bin files","text":"<p>When flasher start, choose <code>Serial port</code> (it must be a port your board is connected to).</p> <p></p> <p>Next , choose <code>downloaded BIN file</code>.</p> <p></p> <p>Click on <code>Flash ESP</code>.</p> <p></p> <p>Now WLED firmware will be flashed to the ESP. Wait until process is finished and you will see <code>Ada</code> message.</p> <p></p> <p>Next steps: Quick start guide</p>"},{"location":"basics/tutorials/","title":"Tutorials","text":"<p>Don't know yet how to solder? Unsure how to connect your LEDs safely? How to find the perfect power supply? No worries, we have collected a few helpful links for you to learn more about these and more topics:</p>"},{"location":"basics/tutorials/#wled-specific-tutorials","title":"WLED specific tutorials","text":"Resource Maker Type Date Info Beginner's guide to freak'n cool Holiday LEDs DrZzs Video (23:22) 12 Oct 2019 Excellent guide for getting started with WLED! How to Set Colors and Effects, Save Presets, Make Sync Groups, add a Button, &amp; Macros for Scheduling DrZzs Video (23:39) 29 Oct 2019 Learn about some cool additional WLED features! Make your LEDs dance to music! DrZzs Video (11:30) 17 Nov 2019 How to install LedFx and connect it to WLED for quick sound reactive effects! Getting started with WLED tynick Article 11 Mar 2019 Complete and excellent guide on how to flash and get WLED up and running! How to Compile WLED (from scratch) Quindor Video (02:15:00) 22 Dec 2020 How to compile WLED yourself from scratch (most info in first 30 minutes) WLED with QuinLED-Dig-Uno Install Tutorial Quindor Video (11:13) 21 Sept 2019 Initial flash and setup of WLED on QuinLED-Dig-Uno board Integrating WLED into Home Assistant Quindor Video (8:22) 25 Nov 2019 How to use a WLED node in Home Assistant Holiday LEDs Step-by-step with WLED &amp; Home Assistant KPeyanski Video (20:38) 28 Oct 2020 Complete and great wiring, installation and HA setup tutorial HOW-TO: Holiday LED Strip Lights, Home Assistant and WLED KPeyanski Article 23 Jul 2022 Same as the above video, but in text form! Smart Ping Pong LED Lamp - Quick&amp;Simple DIY bitluni Video (18:19) 13 Sept 2020 Construction, wiring and flashing of a cool looking and easy to make lamp WLED tutorial series (in Russian/\u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c) Gelmer Article Series 11 Jun 2023 \u0421\u0435\u0440\u0438\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432 \u043f\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c: \u041a\u0430\u043a \u043f\u0440\u043e\u0448\u0438\u0442\u044c WLED \u0438 LED FX \u0432 ESP01 \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f WLED: \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0437\u0435\u0440\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u0443\u043d\u043d\u0435\u043b\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0442\u043e\u043b\u0438\u043a\u0430 IKEA Lack Alchemist Video (9:16) / Video (13:09) 19 Aug 2022 \u041f\u0440\u043e\u0448\u0438\u0432\u043a\u0430, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432 \u0438 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u0436\u0438\u043c\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b. \u041f\u0440\u0438\u043c\u0435\u0440 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0445\u0435\u043c\u044b. ESP8266 based LED controller for WS2812b strip. WLED Firmware + OpenHAB (in Russian) Room31 Video (17:04) 11 Mar 2020 How to use WLED on an ESP32 (German) Bitbastelei/Adlerweb Video (11:00) 1 Nov 2020 DIY Ambilight using WLED and a Relay jangrewe Article ? Wiki page with schematics and instructions for Hyperion, etc. Adding Smarts and Color to an IKEA Lamp apop880 Article 21 May 2021 Tutorial on upgrading a basic IKEA lamp with WLED"},{"location":"basics/tutorials/#digital-led-knowledge","title":"Digital LED knowledge","text":"Resource Maker Type Info Adafruit NeoPixel \u00dcberguide Adafruit Article Everything that's important at a glance. Highly recommended for newcomers to digital LEDs Digital LED Power Usage Quindor Article/Spreadsheet/Video Helps you plan the power usage of your installation Power calculation and injection live stream Quindor Video (2:24:52) Tons of great questions and answers. Live calculations, drawings, 5v vs 12v, strip comparisons, etc. Difference between LED strip types The Hook Up Video (14:41) What is the best LED strip for your project? 7 Common LED Strip FAILS and How To Avoid Them The Hook Up Video (12:14) Make your project look much better! Power Injection demystified Spiker Lights Article What is power injection and how much do I need? Common(sharing) Ground / Multiple power supplies Article When using more than one power supply."},{"location":"basics/tutorials/#tools-skills","title":"Tools &amp; Skills","text":"Resource Maker Type Info How to Solder Beauty and the Bolt Video (9:50) Soldering new leads to LED strip Quindor Video (8:24) Soldering Tutorial Part 2 EEVblog Video (34:05) Detailed tutorial on soldering, see parts 1 and 3 for even more info) Voltage Drop Calculator Tool Another Voltage Drop Calculator Tool Pixel/Bullet Voltage Drop Calc Tool 5 and 12V Combined Wire Gauge Calculator Tool Wire Size/Ampacity Tool Use chassis wiring <p>Add more categories as needed :)</p>"},{"location":"features/cct/","title":"White handling","text":""},{"location":"features/cct/#white-channels-handling","title":"White channel(s) handling","text":"<p>Besides addressable RGB and RGBW bus types, WLED 0.13.0 also supports PWM CCT (correlated color temperature) lights.</p>"},{"location":"features/cct/#auto-white-handling","title":"Auto white handling","text":"<p>Many effects and realtime sources are based on an RGB color model, which necessitates a method to calculate a white channel value from the RGB value for lights that support more than RGB.</p> <p>WLED offers four auto white modes, one of which can be selected in LED settings using the option <code>Auto-calculate white channel from RGB</code>. This option is only shown if at least one bus with White channel support is present.</p> Auto White mode Description Accurate This mode subtracts the calculated white value from the RGB channels. This gets rid of the \"RGB-white\" but means that the light is less bright with only the white channel and not the RGB channels being utilized for pure white. Brighter This does the exact opposite and not touch the RGB channels at all, just mix in the dedicated white. None No auto white calculation is performed. The white channel of colors can be manually set using the <code>White channel</code> slider in the user interface, RGB-only effects and most realtime sources will leave the white channel off. Dual The <code>White channel</code> slider is present in the UI and works the same as in <code>None</code> mode, however if the slider value is 0 (far left), the <code>Brighter</code> mode is used for auto white calculation. This is the default auto white mode. <p><code>Accurate</code> and <code>Brighter</code> methods are applied on a per-pixel basis, so they also work in color palettes and realtime effects!</p>"},{"location":"features/cct/#white-balance-correction","title":"White Balance correction","text":"<p>If enabled in LED settings, WB correction allows either making all pixels colder or warmer on a per-segment basis using a slider in the main user interface. This is applied to the RGB color only, after the auto white channel calculation.</p>"},{"location":"features/cct/#cct-handling","title":"CCT handling","text":"<p>WLED starting with version 0.13.0 also supports bus types with two white channels, one with a warm color temperature (e.g. 2700 Kelvin, reddish white) and one with a cold white color temperature (e.g. 8000 Kelvin, bluish white).</p> <p>Since as of the release of version 0.13.0 no adjustable CCT addressable LEDs are supported*, this only applies to PWM analog LED outputs.</p> <p>*SK6812 WWA (with 3 channels, warm white, cold white and amber) are supported, but treated as if RGB using the <code>WS281x</code> bus type. White spectrum support for this LED type will be added at a later point.</p> <p>The overall brightness of the white channels is determined from the auto-white calculation outlined above, and as such is identical in behavior to that of single white channel busses.</p> <p>The color temperature is set either on a per-segment basis via a dedicated slider in the UI, or if <code>Calculate CCT from RGB</code> is enabled in LED settings, is estimated on a per-pixel basis from the set RGB color (e.g. setting Red results in the warmest, setting Blue results in the coldest possible white). The former has the advantage of granular white spectrum control independent of the set RGB color, while the latter enables control of the color temperature from all effects and realtime sources.</p>"},{"location":"features/cct/#cct-additive-blending","title":"CCT additive blending","text":"<p>Setting this to 0% results in a more even brightness output across the supported temperature range, as the fading between the warm and cold white channels is linear.</p> <p>Setting this to 100% results in the highest peak brightness output at the neutral white point (CCT value <code>127</code>), as both white channels are active at 100%.</p> <p></p> <p>Warning<p>Make sure your setup can handle driving both white channels at maximum output simultaneously. This results in a higher heat output and might reduce the lifetime of your LEDs. For example, bulbs by Athom are designed for linear blending (0%) and may be damaged by attempting to use additive blending.</p> </p> <p>You can limit the maximum allowed additive blending at build time using the <code>WLED_MAX_CCT_BLEND</code> macro. For example, add <code>-D WLED_MAX_CCT_BLEND=0</code> to your build flags to force linear blending only.</p>"},{"location":"features/cct/#ic-cct","title":"IC CCT","text":"<p>By default, PWM CCT bus types set the value of the warm and cold white channels. If your hardware uses an IC that controls the color temperature based on one PWM signal and the overall brightness on the other, please use the build flag <code>-D WLED_USE_IC_CCT</code> in a custom compilation. (the 15W bulb by Athom uses this method)</p>"},{"location":"features/cct/#cct-in-the-json-api","title":"CCT in the JSON API","text":"<p>Please see here for more info on how to handle WLED CCT from integrations.</p>"},{"location":"features/effects/","title":"Effects","text":"<p>Version Info</p> <p>Effects above 117 are only available 0.14+ or Sound Reactive forks. Retired Effects - Can't find an old favorite? Look here.</p>"},{"location":"features/effects/#effect-overlay","title":"Effect Overlay","text":"<p>Some effects can be overlaid on the background of another effect. To use overlay, set up segments with overlapping pixels. The overlay effect must be playing on the segment with the higher id.  If the Overlay option is checked, the background will not be painted and the effect from the lower segment will be displayed.</p> <p>To aid in showing where colors vs palettes are used, all effects are rendered with the  Party palette  and the colors:   Primary (Fx)  (or black) Secondary  (Bg)  Tertiary (Cs).</p> ID Effect Description Flags Colors Parms 0 Solid Solid primary color on all LEDs  \u22ee 1 Blink Blinks between primary and secondary color  \u22ee \ud83c\udfa8 Fx, Bg Speed, Duty cycle 2 Breathe Fades between primary and secondary color  \u22ee \ud83c\udfa8 Fx, Bg Speed 3 Wipe Switches between primary and secondary, switching LEDs one by one, start to end  \u22ee \ud83c\udfa8 Fx, Bg Speed, Intensity 4 Wipe Random Same as Wipe, but uses random colors  \u22ee \ud83c\udfa8 Speed 5 Random Colors Applies a new random color to all LEDs  \u22ee \ud83c\udfa8 Speed, Fade time 6 Sweep Switches between primary and secondary, switching LEDs one by one, start to end to start  \u22ee \ud83c\udfa8 Fx, Bg Speed, Intensity 7 Dynamic Sets each LED to a random color  \u22ee \ud83c\udfa8 Speed, Intensity, Smooth 8 Colorloop Cycle all LEDs through the rainbow colors  \u22ee \ud83c\udfa8 Speed, Saturation 9 Rainbow Displays rainbow colors along the whole strip  \u22ee \ud83c\udfa8 Speed, Size 10 Scan A single primary colored light wanders between start and end  \u22ee \ud83c\udfa8 Fx, Bg, Cs Speed, # of dots, Overlay 11 Scan Dual Same as Scan but uses two lights starting at both ends  \u22ee \ud83c\udfa8 Fx, Bg, Cs Speed, # of dots, Overlay 12 Fade Fades smoothly between primary and secondary color  \u22ee \ud83c\udfa8 Fx, Bg Speed 13 Theater Pattern of one lit and two unlit LEDs running  \u22ee \ud83c\udfa8 Fx, Bg Speed, Gap size 14 Theater Rainbow Same as Theater but uses colors of the rainbow  \u22ee \ud83c\udfa8 Bg Speed, Gap size 15 Running Sine Waves scrolling  \u22ee \ud83c\udfa8 Fx, Bg Speed, Wave width 16 Saw Sawtooth Waves scrolling  \u22ee \ud83c\udfa8 Fx, Bg Speed, Width 17 Twinkle Random LEDs light up in the primary color with secondary as background  \u22ee \ud83c\udfa8 Fx, Bg Speed, Intensity 18 Dissolve Fills LEDs with primary in random order, then off again  \u22ee \ud83c\udfa8 Fx, Bg Repeat speed, Dissolve speed, Random 19 Dissolve Rnd Fills LEDs with random colors in random order, then off again  \u22ee \ud83c\udfa8 Bg Repeat speed, Dissolve speed 20 Sparkle Single random LEDs light up in the primary color for a short time, secondary is background  \u22ee \ud83c\udfa8 Fx, Bg Speed, Overlay 21 Sparkle Dark All LEDs are lit in the primary color, single random LEDs turn off for a short time  \u22ee \ud83c\udfa8 Bg, Fx Speed, Intensity, Overlay 22 Sparkle+ All LEDs are lit in the primary color, multiple random LEDs turn off for a short time  \u22ee \ud83c\udfa8 Bg, Fx Speed, Intensity, Overlay 23 Strobe All LEDs are lit in the secondary color, all LEDs flash in a single short burst in primary color  \u22ee \ud83c\udfa8 Fx, Bg Speed 24 Strobe Rainbow Same as strobe, cycles through the rainbow  \u22ee \ud83c\udfa8 Bg Speed 25 Strobe Mega All LEDs are lit in the secondary color, all LEDs flash in several short bursts in primary color  \u22ee \ud83c\udfa8 Fx, Bg Speed, Intensity 26 Blink Rainbow Same as blink, cycles through the rainbow  \u22ee \ud83c\udfa8 Fx, Bg Frequency, Blink duration 27 Android Section of varying length running  \u22ee \ud83c\udfa8 Fx, Bg Speed, Width 28 Chase 2 LEDs in primary color running on secondary  \u22ee \ud83c\udfa8 Fx, Bg, Cs Speed, Width 29 Chase Random Like Chase but leaves trail of random color  \u22ee \ud83c\udfa8 Fx, Cs Speed, Width 30 Chase Rainbow Like 28 but leaves trail of rainbow  \u22ee \ud83c\udfa8 Fx, Bg Speed, Width 31 Chase Flash 2 LEDs flash in secondary color while the rest is lit in primary. The flashing LEDs wander from start to end  \u22ee \ud83c\udfa8 Bg, Fx Speed 32 Chase Flash Rnd Like Chase Flash, but the 2 LEDs flash in random colors and leaves a random color behind  \u22ee \ud83c\udfa8 Fx, Bg Speed 33 Rainbow Runner Like Chase, but the 2 LEDs light up in rainbow colors and leave a primary color trail  \u22ee \ud83c\udfa8 Bg Speed, Size 34 Colorful Shifting Red-Amber-Green-Blue pattern  \u22ee \ud83c\udfa8 1, 2, 3 Speed, Saturation 35 Traffic Light Emulates a traffic light  \u22ee \ud83c\udfa8 Bg Speed, US style 36 Sweep Random Like Sweep, but uses random colors  \u22ee \ud83c\udfa8 Speed 37 Chase 2 Pattern of n LEDs primary and n LEDs secondary moves along the strip  \u22ee \ud83c\udfa8 Fx, Bg Speed, Width 38 Aurora Simulation of the Aurora Borealis  \u22ee \ud83c\udfa8 1, 2, 3 Speed, Intensity 39 Stream Flush bands random hues along the string  \u22ee \ud83c\udfa8 Speed, Zone size 40 Scanner Dot moves between ends, leaving behind a fading trail  \u22ee \ud83c\udfa8 Fx, Bg Speed, Fade rate 41 Lighthouse Dot moves from start to end, leaving behind a fading trail  \u22ee \ud83c\udfa8 Fx, Bg Speed, Fade rate 42 Fireworks Random color blobs light up, then fade again  \u22ee \u25a6 \ud83c\udfa8 Fx, Bg Frequency 43 Rain Like Fireworks, but the blobs move  \u22ee \u25a6 \ud83c\udfa8 Fx, Bg Speed, Spawning rate 44 Tetrix Falling blocks stack  \u22ee \ud83c\udfa8 Fx, Bg Speed, Width, One color 45 Fire Flicker LEDs randomly flickering  \u22ee \ud83c\udfa8 Fx Speed, Intensity 46 Gradient Moves a saturation gradient of the primary color along the strip  \u22ee \ud83c\udfa8 Fx, Bg Speed, Spread 47 Loading Moves a sawtooth pattern along the strip  \u22ee \ud83c\udfa8 Fx, Bg Speed, Fade 49 Fairy Inspired by twinkle style Christmas lights.  \u22ee \ud83c\udfa8 Fx, Bg Speed, # of flashers 50 Two Dots Two areas sweeping  \u22ee \ud83c\udfa8 1, 2, Bg Speed, Dot size, Overlay 51 Fairytwinkle Like Colortwinkle, but starting from all lit  \u22ee \ud83c\udfa8 Fx, Bg Speed, Intensity 52 Running Dual Sine waves in both directions  \u22ee \ud83c\udfa8 L, Bg, R Speed, Wave width 54 Chase 3 Like Chase, but with 3 colors  \u22ee \ud83c\udfa8 1, 2, 3 Speed, Size 55 Tri Wipe Like Wipe but turns LEDs off as \"third color\"  \u22ee \ud83c\udfa8 1, 2, 3 Speed 56 Tri Fade Fades the whole strip from primary color to secondary color to off  \u22ee \ud83c\udfa8 1, 2, 3 Speed 57 Lightning Short random white strobe similar to a lightning bolt  \u22ee \ud83c\udfa8 Fx, Bg Speed, Intensity, Overlay 58 ICU Two \"eyes\" running on opposite sides of the strip  \u22ee \ud83c\udfa8 Fx, Bg Speed, Intensity, Overlay 59 Multi Comet Like Scanner, but creates multiple trails  \u22ee 60 Scanner Dual Like Scanner, but with two dots running on opposite sides  \u22ee \ud83c\udfa8 Fx, Bg, Cs Speed, Fade rate 61 Stream 2 Flush random hues along the string  \u22ee Speed 62 Oscillate Areas of primary and secondary colors move between opposite ends, combining colors where they touch  \u22ee 63 Pride 2015 Rainbow cycling with brightness variation  \u22ee Speed 64 Juggle Eight colored dots running, leaving trails  \u22ee \ud83c\udfa8 Speed, Trail 65 Palette Running color palette  \u22ee \ud83c\udfa8 Cycle speed 66 Fire 2012 Simulates flickering fire in red and yellow  \u22ee \ud83c\udfa8 Cooling, Spark rate, Boost 67 Colorwaves Like Pride 2015, but uses palettes  \u22ee \ud83c\udfa8 Fx Speed, Hue 68 Bpm Pulses moving back and forth on palette  \u22ee \ud83c\udfa8 Fx Speed 69 Fill Noise Noise pattern  \u22ee \ud83c\udfa8 Fx Speed 70 Noise 1 Fast Noise shift pattern  \u22ee \ud83c\udfa8 Fx Speed 71 Noise 2 Fast Noise shift pattern  \u22ee \ud83c\udfa8 Fx Speed 72 Noise 3 Noise shift pattern  \u22ee \ud83c\udfa8 Fx Speed 73 Noise 4 Noise sparkle pattern  \u22ee \ud83c\udfa8 Fx Speed 74 Colortwinkles LEDs light up randomly in random colors and fade off again  \u22ee \ud83c\udfa8 Fade speed, Spawn speed 75 Lake Calm palette waving  \u22ee \ud83c\udfa8 Fx Speed 76 Meteor The primary color creates a trail of randomly decaying color  \u22ee \ud83c\udfa8 Fx Speed, Trail length 77 Meteor Smooth Smoothly animated meteor  \u22ee \ud83c\udfa8 Fx Speed, Trail length 78 Railway Shows primary and secondary color on alternating LEDs. All LEDs fade to their opposite color and back again  \u22ee \ud83c\udfa8 1, 2 Speed, Smoothness 79 Ripple Effect resembling random water ripples  \u22ee \u25a6 \ud83c\udfa8 Bg Speed, Wave #, Overlay 80 Twinklefox FastLED gentle twinkling with slow fade in/out  \u22ee \ud83c\udfa8 Speed, Twinkle rate 81 Twinklecat Twinkling with fast in / slow out  \u22ee \ud83c\udfa8 Speed, Twinkle rate 82 Halloween Eyes One Pair of blinking eyes at random intervals along strip  \u22ee \u25a6 \ud83c\udfa8 Fx, Bg Duration, Eye fade time, Overlay 83 Solid Pattern Speed sets number of LEDs on, intensity sets off  \u22ee \ud83c\udfa8 Fg, Bg Fg size, Bg size 84 Solid Pattern Tri Solid Pattern with three colors  \u22ee 1, 2, 3 Size 85 Spots Solid lights with even distance  \u22ee \ud83c\udfa8 Fx, Bg Width, Overlay 86 Spots Fade Spots, getting bigger and smaller  \u22ee \ud83c\udfa8 Fx, Bg Spread, Width, Overlay 87 Glitter Rainbow with white sparkles  \u22ee \ud83c\udfa8 1, 2, Glitter color Speed, Intensity, Overlay 88 Candle Flicker resembling a candle flame  \u22ee \ud83c\udfa8 Fx, Bg Speed, Intensity 89 Fireworks Starburst Exploding multicolor fireworks  \u22ee \ud83c\udfa8 Bg Chance, Fragments, Overlay 90 Fireworks 1D one dimension fireworks with flare  \u22ee \u25a6 \ud83c\udfa8 Fx, Bg Gravity, Firing side 91 Bouncing Balls Bouncing ball effect  \u22ee \ud83c\udfa8 Fx, Bg, Cs Gravity, # of balls, Overlay 92 Sinelon Fastled sinusoidal moving eye  \u22ee \ud83c\udfa8 Fx, Bg, Cs Speed, Trail 93 Sinelon Dual Sinelon from both directions  \u22ee \ud83c\udfa8 Fx, Bg, Cs Speed, Trail 94 Sinelon Rainbow Sinelon in rainbow colours  \u22ee \ud83c\udfa8 Cs Speed, Trail 95 Popcorn popping kernels  \u22ee \ud83c\udfa8 Fx, Bg, Cs Speed, Intensity, Overlay 96 Drip Water dripping effect  \u22ee \ud83c\udfa8 Fx, Bg Gravity, # of drips, Overlay 97 Plasma Plasma lamp  \u22ee \ud83c\udfa8 Fx Phase, Intensity 98 Percent Lights up a percentage of segment  \u22ee \ud83c\udfa8 Fx, Bg % of fill, One color 99 Ripple Rainbow Like ripple, but with a dimly lit changing background  \u22ee \u25a6 \ud83c\udfa8 Speed, Wave # 100 Heartbeat led strip pulsing rhythm similar to a heart beat  \u22ee \ud83c\udfa8 Fx, Bg Speed, Intensity 101 Pacifica Gentle ocean waves  \u22ee \ud83c\udfa8 Speed, Angle 102 Candle Multi Like candle effect, but each LED has it's own flicker pattern  \u22ee \ud83c\udfa8 Fx, Bg Speed, Intensity 103 Solid Glitter Like Glitter, but with solid color background  \u22ee Bg, Glitter color Intensity 104 Sunrise Simulates a gradual sunrise or sunset. Speed sets: 0 - static sun, 1 - 60: sunrise time in minutes,60 - 120: sunset time in minutes - 60, above: \"breathing\" rise and set  \u22ee \ud83c\udfa8 Time [min], Width 105 Phased Sine waves (in sourcecode)  \u22ee \ud83c\udfa8 Fx, Bg Speed, Intensity 106 Twinkleup Twinkle effect with fade-in  \u22ee \ud83c\udfa8 Fx, Bg Speed, Intensity 107 Noise Pal Peaceful noise that's slow and with gradually changing palettes  \u22ee \ud83c\udfa8 Speed, Scale 108 Sine Controllable sine waves  \u22ee 109 Phased Noise Noisy sine waves  \u22ee \ud83c\udfa8 Fx, Bg Speed, Intensity 110 Flow Blend of palette and spot effects  \u22ee \ud83c\udfa8 Speed, Zones 111 Chunchun Birds flying in a circle formation  \u22ee \ud83c\udfa8 Fx, Bg Speed, Gap size 112 Dancing Shadows Moving spotlights  \u22ee \ud83c\udfa8 Fx Speed, # of shadows 113 Washing Machine Spins, slows, reverses directions  \u22ee \ud83c\udfa8 Speed, Intensity 115 Blends Blends random colors across palette  \u22ee \ud83c\udfa8 Shift speed, Blend speed 116 TV Simulator TV light spill simulation  \u22ee Speed, Intensity 117 Dynamic Smooth Like Dynamic, but with smooth palette blends  \u22ee \ud83c\udfa8 Speed, Intensity 118 Spaceships Circling ships with fading trails. Homage to 80s spaceship shooter games.  \u25a6 \ud83c\udfa8 Speed, Blur 119 Crazy Bees Bees darting from flower to flower.  \u25a6 Speed, Blur 120 Ghost Rider Color changing ghost riding a kite... in a tornado.  \u25a6 \ud83c\udfa8 Fade rate, Blur 121 Blobs No really, they are blobs.  \u25a6 \ud83c\udfa8 Fx Speed, # blobs, Blur 122 Scrolling Text Edit segment name to set text (#DATE and #TIME to include those)  \u25a6 \ud83c\udfa8 Fx, Bg, Gradient Speed, Y Offset, Trail, Font size, Gradient, Overlay 123 Drift Rose Spinning arms that adds and removes nodes as it winds and unwinds.  \u25a6 Fade, Blur 124 Distortion Waves Distorted sine waves with a psychedelic flair.  \u25a6 Speed, Scale 125 Soap Like soap bubbles, but lasts longer.  \u25a6 \ud83c\udfa8 Speed, Smoothness 126 Octopus A cephalopod stuck in a whirlpool.  \u25a6 \ud83c\udfa8 Speed, Offset X, Offset Y, Legs 127 Waving Cell If a bunch of eucaryotes went to a sports stadium and did the wave, it would look exactly like this.  \u25a6 \ud83c\udfa8 Speed, Amplitude 1, Amplitude 2, Amplitude 3 128 Pixels Random pixels  \u22ee \u266a \ud83c\udfa8 Fx, Bg Fade rate, # of pixels 129 Pixelwave Pixels emanating from center  \u22ee \u266a \ud83c\udfa8 Fx, Bg Speed, Sensitivity 130 Juggles Juggling balls.  \u22ee \u266a \ud83c\udfa8 Fx, Bg Speed, # of balls 131 Matripix Similar to Matrix.  \u22ee \u266a \ud83c\udfa8 Fx, Bg Speed, Brightness 132 Gravimeter Volume reactive vu-meter with gravity and perlin noise.  \u22ee \u266a \ud83c\udfa8 Fx, Bg Rate of fall, Sensitivity 133 Plasmoid Sine wave based plasma.  \u22ee \u266a \ud83c\udfa8 Fx, Bg Phase, # of pixels 134 Puddles Blast coloured puddles based on volume.  \u22ee \u266a \ud83c\udfa8 Fx, Bg Fade rate, Puddle size 135 Midnoise Perlin noise emanating from center.  \u22ee \u266a \ud83c\udfa8 Fx, Bg Fade rate, Max. length 136 Noisemeter Volume reactive vu-meter.  \u22ee \u266a \ud83c\udfa8 Fx, Bg Fade rate, Width 137 Freqwave Maps the major frequencies from the incoming signal to colors in the HSV color space.  \u22ee \u266b Time delay, Sound effect, Low bin, High bin, Pre-amp 138 Freqmatrix The temporal tail for this animation starts at the beginning of the Segment rather than in the center of the segment.  \u22ee \u266b Time delay, Sound effect, Low bin, High bin, Sensivity 139 GEQ A 16x16 graphic equalizer.  \u25a6 \u266b \ud83c\udfa8 Fx, Peaks Fade speed, Ripple decay, # of bands, Color bars 140 Waterfall A volume AND FFT version of a Waterfall that has 'beat' support.  \u22ee \u266b \ud83c\udfa8 Fx, Bg Speed, Adjust color, Select bin, Volume (min) 141 Freqpixels Random pixels coloured by frequency.  \u22ee \u266b Fade rate, Starting color and # of pixels 143 Noisefire A perlin noise based volume reactive fire routine.  \u22ee \u266a Speed, Intensity 144 Puddlepeak Blast coloured puddles randomly up and down the strand with the 'beat'.  \u22ee \u266a \ud83c\udfa8 Fx, Bg Fade rate, Puddle size, Select bin, Volume (min) 145 Noisemove Using perlin noise as movement for different frequency bins.  \u22ee \u266b \ud83c\udfa8 Fx, Bg Speed of perlin movement, Fade rate 146 Noise2D \u25a6 \ud83c\udfa8 Speed, Scale 147 Perlin Move Using Perlin Noise for movement.  \u22ee \ud83c\udfa8 Fx, Bg Speed, # of pixels, Fade rate 148 Ripple Peak Peak detection triggers ripples.  \u22ee \u266a \ud83c\udfa8 Fx, Bg Fade rate, Max # of ripples, Select bin, Volume (min) 149 Firenoise Using Perlin Noise for fire.  \u25a6 \ud83c\udfa8 X scale, Y scale 150 Squared Swirl Boxes moving around  \u25a6 \ud83c\udfa8 Blur 152 DNA A very cool DNA like pattern.  \u25a6 \ud83c\udfa8 Scroll speed, Blur 153 Matrix The Matrix, on a 2D matrix.  \u25a6 Spawn, Trail Speed, Spawning rate, Trail, Custom color 154 Metaballs A cool plasma type effect.  \u25a6 \ud83c\udfa8 Speed 155 Freqmap Map the loudest frequency throughout the length of the LED's.  \u22ee \u266b \ud83c\udfa8 Fx, Bg Fade rate, Starting color 156 Gravcenter Volume reactive vu-meter from center with gravity and perlin noise.  \u22ee \u266a \ud83c\udfa8 Fx, Bg Rate of fall, Sensitivity 157 Gravcentric Volume reactive vu-meter from center with gravity. Volume provides index to (time rotating) palette colour.  \u22ee \u266a \ud83c\udfa8 Fx, Bg Rate of fall, Sensitivity 158 Gravfreq VU Meter from center. Log of frequency is index to center colour.  \u22ee \u266b \ud83c\udfa8 Fx, Bg Rate of fall, Sensivity 159 DJ Light An effect emanating from the center to the edges.  \u22ee \u266b Speed 160 Funky Plank A 2D wall of reactivity running from bottom to top  \u25a6 \u266b Scroll speed, # of bands 162 Pulser Travelling waves.  \u25a6 \ud83c\udfa8 Speed, Blur 163 Blurz Flash an fftResult bin per frame and then blur/fade.  \u22ee \u266b \ud83c\udfa8 Fx, Color mix Fade rate, Blur 164 Drift A rotating kaleidoscope.  \u25a6 \ud83c\udfa8 Rotation speed, Blur amount 165 Waverly Noise waves with some sound.  \u25a6 \u266a \ud83c\udfa8 Amplification, Sensitivity 166 Sun Radiation The sun! Doesn't support segments.  \u25a6 Variance, Brightness 167 Colored Bursts Rotating rays of color.  \u25a6 \ud83c\udfa8 Speed, # of lines, Blur, Gradient, Dots 168 Julia Animated Julia set fractal named after mathematician Gaston Julia.  \u25a6 \ud83c\udfa8 Fx Max iterations per pixel, X center, Y center, Area size 172 Game Of Life Scrolling game of life.  \u25a6 \ud83c\udfa8 Fx, Bg Speed 173 Tartan Plaid pattern of horizontal and vertical bands. Makes a great kilt.  \u25a6 \ud83c\udfa8 X scale, Y scale 174 Polar Lights The northern lights.  \u25a6 Speed, Scale 175 Swirl Several blurred circles. Looks good with pink plasma palette. Supports AGC.  \u25a6 \u266a \ud83c\udfa8 Bg Swirl Speed, Sensitivity, Blur 176 Lissajous A frequency based Lissajous pattern.  \u25a6 \ud83c\udfa8 Fx X frequency, Fade rate 177 Frizzles Moving patterns.  \u25a6 \ud83c\udfa8 X frequency, Y frequency, Blur 178 Plasma Ball A ball of plasma.  \u25a6 \ud83c\udfa8 Speed, Fade, Blur 179 Flow Stripe Strip with rotating colours.  \u22ee Hue speed, Effect speed 180 Hiphotic A moving plasma.  \u25a6 \ud83c\udfa8 Fx X scale, Y scale, Speed 181 Sindots Dots revolving in a circle while the 'camera'   \u25a6 \ud83c\udfa8 Speed, Dot distance, Fade rate, Blur 182 DNA Spiral Spiraling DNA pattern  \u25a6 \ud83c\udfa8 Scroll speed, Y frequency 183 Black Hole Colorful dots orbiting a white black hole.  \u25a6 Fade rate, Outer Y freq., Outer X freq., Inner X freq., Inner Y freq. 184 Wavesins Beat waves and phase shifting. Looks OK in 2D'ish as well.  \u22ee \ud83c\udfa8 Fx Speed, Brightness variation, Starting color, Range of colors, Color variation 185 Rocktaves Colours the same for each note between octaves, with sine wave going back and forth.  \u22ee \u266b \ud83c\udfa8 Fx, Bg 186 Akemi The WLED mascot rocking to your tunes.  \u25a6 \u266b Head palette, Arms &amp; Legs, Eyes &amp; Mouth Color speed, Dance"},{"location":"features/effects/#retired-effects","title":"Retired Effects","text":"<p>Some effects get retired when they can be recreated with newer, more general effects.</p> Removed Effect Replacement Retired After Candy Cane Chase 2 0.14.0 Dissolve Rnd Dissolve 0.14.0 Dynamic Smooth Dynamic 0.14.0 Halloween Chase 2 0.14.0 Merry Christmas Chase 2 - red/green 0.12.0 Police Two Dot 0.14.0 Police All Two Dots - red/blue w/ full intensity 0.13.0 Two Areas Two Dots - full intensity 0.13.0"},{"location":"features/macros/","title":"Macros","text":"<p>Info</p> <p>Also see Presets for 0.11.0+.</p> <p>You are able to set custom actions (\"Macros\") in Time &amp; Macro settings for the following events:</p> <ul> <li>Specific time of day</li> <li>Button short/long/double press</li> <li>HTTP API call executing a macro with <code>&amp;M=</code></li> <li>Alexa On/Off</li> <li>Countdown over</li> <li>Timed light duration over</li> <li>Device (re)boot (up to 0.10.2, use LED settings <code>Boot preset</code> in 0.11)</li> </ul> <p>Each macro has the format of a standard HTTP API call without the IP. Optionally, the \"win&amp;\" may be omitted. For example, the macro \"A=255\" sets the brightness to maximum. \"R=255&amp;G=160&amp;B=0\" sets the color to orange. You can specify up to 16 macros. (up to 250 in WLED 0.11 since the Macro functionality has been merged into the Presets feature)</p> <p>Examples of how to use API-calls and define macros can be found in this issue and in this one.</p> <p>The simplest macro example is getting a button to do your bidding.  The default pin to which a button can be connected is GPIO 0 (D3 on NodeMCU, D1 Mini and others).  Even though WLED uses the internal pull up resistors on input pins, this pin is ideally externally pulled high to 3.3V with a 10k resistor. The configured macro executes when the pin is pulled low (grounded). The desired macro is entered on the Time/Macros configuration page and then assigned to a short, long or double press. Like this: </p> <p>The \"T=2\" macro toggles power to the LEDs (in this case long press). The \"FX=~\" macro steps through the effects (in this case short press).</p> <p>You can set a preset to <code>P1=1&amp;P2=3&amp;PL=~</code>, enter the preset number for your button, and this will step through presets 1 and 3. Change the \"3\" to whatever your highest preset is that you want to include.</p> <p>The default (built-in) actions for button 0 are short-press: toggle on/off and long-press: select random color. Long-pressing for more than 6 seconds will open the WLED-AP with the default password (<code>wled1234</code>). For further buttons, the default action for short press is cycling effects, long press ramp brightness, and double press cycle palettes.</p>"},{"location":"features/macros/#buttons","title":"Buttons","text":"<p>Multiple buttons are implemented since 0.13 and allow a few different types of buttons to be connected to the ESP:</p> <ul> <li>momentary push-buttons that are normally open and short GPIO pin to ground (active low)</li> <li>momentary push-buttons that are normally closed and release the connection from GPIO pin to GND (inverted, active high)</li> <li>switches (be careful with selection of GPIO for switch since some GPIOs will prevent successful boot of ESP if held LOW or HIGH at boot)</li> <li>PIR switch AKA motion detection sensor (they set GPIO HIGH when motion is detected, this type of buttons will also trigger MQTT message with /motion topic if \"Publish on button press\" is set on MQTT config)</li> <li>some GPIO pins on ESP32 can act as momentary touch buttons with no additional hardware</li> <li>analog \"buttons\" (also with inverted logic) those can be used as potentiometers or analog input buttons</li> </ul> <p>Button GPIO pin and type can be selected in the LED Settings page.</p> <p>Each momentary button can have 3 different Presets assigned, for short press, long press or double press. Momentary push-buttons by default trigger shortly after the release of a button, to be able to detect if it has been pressed short, long or twice. When configuring the same preset number for short, long and double press, it will trigger directly when being pressed as of WLED 0.14.0-b2-2306020.</p> <p>For switch type buttons you can assign only 2 presets, one for transition of switch from LOW to HIGH and second for the opposite transition from HIGH to LOW.</p> <p>Selecting 0 for preset will use the default action. If you find that the default action is inverted for switch, please create presets for On and Off actions and assign them appropriately.</p> <p>For assigning Presets to buttons use Time &amp; Macros settings page.</p> <p>Note: Button 0 has two, built-in functions. 1. Hold it down for &gt;6 seconds and the Wi-Fi settings will be reset to default. 2. Hold it down for &gt;12 seconds and flash memory is erased.</p>"},{"location":"features/macros/#analog-button","title":"Analog button","text":"<p>Starting in WLED 0.13, analog \"buttons\" (e.g. a potentiometer) are supported. With the Short and Long columns set to 0, set the Double column in Button Actions to one of these values to configure:</p> Property Value Global brightness 250 Effect speed 249 Effect intensity 248 Palette 247 Primary color hue 200 Segment N opacity 0-32 <p>This potentiometer should be supplied 3.3V and GND, with it's output supplied to A0 (or any other ADC pin you specify), recommended 10K\u03a9 or greater. </p> <p>Do not use ESP32 ADC2 GPIO pins for analog buttons</p> <p>On ESP8266, you can only have a single analog button on pin A0, the pin set in the settings UI is ignored. On ESP32, only ADC1 pins will work for analog input while WiFi is active (pins 32-39). ADC2 pins will not work.</p>"},{"location":"features/macros/#global-brightness","title":"Global brightness","text":"<p>Users planning to use a potentiometer for global brightness should be aware that wled is configured to turn off when the potentiometer is adjusted to either extreme - both maximum and minimum adjustments. Users who desire to disable this functionality may do so on the hardware side by adding resistors between the potentiometer and the rails.</p> <p>Adding a resistor between the potentiometer and 3.3V prevents A0 from fully reaching 3.3V and allows the potentiometer to be adjusted to the maximum adjustment without powering off wled. A value of 7.5%-10% of the potentiometer value should be sufficient for this (~750\u03a9 for a 10K\u03a9 potentiometer). Similarly, added resistance between the potentiometer and GND prevents A0 from reaching 0V, and allows the potentiometer to be adjusted to the minimum adjustment without powering off wled. A value of 3-5% of the potentiometer value should be sufficient (~500\u03a9 for a 10K\u03a9 potentiomenter).</p> <p>In both instances, the added resistances will slightly reduce the overall adjustment range, with a larger reduction for larger resistor choices. As such, A user who desires the maximum possible adjustment range should determine their needed resistance values experimentally by installing the potentiometer, adjusting for stable behavior at the desired extrema, measuring the voltage on A0, using the voltage divider equation to determine the optimal resistance, then retesting for confirmation.</p>"},{"location":"features/multi-strip/","title":"Multi-strip Support","text":""},{"location":"features/multi-strip/#multi-strip-support","title":"Multi strip support","text":"<p>Starting in WLED 0.12.0, you are able to use multiple LED outputs from one ESP board! Pins and LED numbers can be easily configured in LED settings, you don't need to re-compile code for your specific setup. Custom binaries for multiple pins are now also a thing of the past!</p> <p>There are a few tips and recomendations to keep in mind when designing your setup:</p>"},{"location":"features/multi-strip/#general","title":"General","text":"<ul> <li>It is highly recommended to use an ESP32 when using more than 1 output</li> <li>You may freely choose the LEDs type, pin numbers, length and color order of your LED strips at runtime in the LED settings page</li> <li>Highly recommeded to size power supply correctly according to your setup and disable the WLED brightness limiter setting to increase framerate with very large LED counts</li> <li>Most strip types have yet to be tested. Add confirmed working below:</li> <li>Confirmed working: WS281x, SK6812 RGBW, PWM white</li> </ul>"},{"location":"features/multi-strip/#esp8266","title":"ESP8266","text":"<ul> <li>There is a maximum of 3 strips supported.</li> <li>It is highly recommended to use two specific LED pins, GPIO1 (TX) and GPIO2 (D4), since they allow for hardware driving.</li> <li>It is recommended to use 512 LEDs/pin for good performance for a total of 1024 LEDs.</li> <li>800 LEDs/pin for a total of 1600 has been confirmed working, but is not recommended for good performance and reliability.</li> <li>Using GPIO1 will disable serial debugging. If you need it, you can't use a strip on this pin.</li> <li>GPIO3 (RX) is the third pin that allows hardware driving on ESP8266. However, it uses 5 times as much memory per LED as GPIO 1 and 2, so use it only for low LED counts (recommended &lt;50)</li> <li>You can use any other pin, but it will use the bitbang method, which is not recommended for reliability. It is best to stick to GPIO 1, 2, and if need be, 3.</li> <li>Using pin GPIO16 for WS2812b LEDs did not work in my testing.</li> <li>ESP8266 can calculate about 15k LEDs per second (that means 250LEDs @~60fps, 500 LEDs @~30fps, 1000 LEDs @~15fps)</li> <li>The LED settings will give you a bar that shows how much memory you can allocate.</li> </ul>"},{"location":"features/multi-strip/#esp32","title":"ESP32","text":"<ul> <li>There is a maximum of 10 strips supported</li> <li>Contrary to the ESP8266, the pin usage does not matter on ESP32, feel free to use any available pin</li> <li>For perfect performance, it is recommeded to use 512 LEDs/pin with 4 outputs for a total of 2048 LEDs.</li> <li>For very good performance, it is recommended to use 800 LEDs/pin with 4 outputs for a total of 3200 LEDs.</li> <li>For good performance, you can use 1000 LEDs/pin with 4 outputs for a total of 4000 LEDs.</li> <li>For okay performance, you can use 1000 LEDs/pin with 5 outputs for a total of 5000 LEDs.</li> <li>For okay performance, you can use 800 LEDs/pin with 6 outputs for a total of 4800 LEDs.</li> <li>ESP32 can calculate about 65k-85k LEDs per second (that means 1000 LEDs @~70fps, 2000 LEDs @~35fps, 4000 LEDs @~18fps)</li> <li>4 outputs seem to be the sweet spot. </li> </ul>"},{"location":"features/multi-strip/#virtual-leds-ddp-and-art-net","title":"Virtual LEDs (DDP and Art-Net \ud83c\udf1c)","text":"<p>See Virtual Leds</p>"},{"location":"features/palettes/","title":"Palettes","text":"<p>Version Info</p> <p>Beginning in 0.14 up to 10 Custom Palletes can be uploaded.</p> PaletteID Name Description 0 Default The palette is automatically selected depending on the effect. For most effects, this is the primary color 1 Random Cycle The palette changes to a random one every few seconds. Subject to change 2 Color 1 A palette consisting only of the primary color 3 Colors 1 &amp; 2 Consists of the primary and secondary color 4 Color Gradient A palette which is a mixture of all segment colors 5 Colors Only Contains primary, secondary and tertiary colors 6 Party Rainbow without green hues 7 Cloud Gray-blueish colors 8 Lava Dark red, yellow and bright white 9 Ocean Blue, teal and white colors 10 Forest Yellow and green hues 11 Rainbow Every hue 12 Rainbow bands Rainbow colors with black spots in-between 13 Sunset Dark blue with purple, red and yellow hues 14 Rivendell Desaturated greens 15 Breeze Teal colors with varying brightness 16 Red &amp; Blue Red running on blue 17 Yellowout Yellow, fading out 18 Analoguous Red running on blue 19 Splash Vibrant pink and magenta 20 Pastel Different hues with very little saturation 21 Sunset 2 Yellow and white running on dim blue 22 Beech Different shades of light blue 23 Vintage Warm white running on very dim red 24 Departure Greens and white fading out 25 Landscape Blue, white and green gradient 26 Beach Teal and yellow gradient fading out 27 Sherbet Bright white, pink and mint colors 28 Hult White, magenta and teal 29 Hult 64 Teal and yellow hues 30 Drywet Blue and yellow gradient 31 Jul Pastel green and red  32 Grintage Yellow fading out 33 Rewhi Bright orange on desaturated purple 34 Tertiary Red, green and blue gradient 35 Fire White, yellow and fading red gradient 36 Icefire Same as Fire, but with blue colors 37 Cyane Desaturated pastel colors 38 Light Pink Desaturated purple hues 39 Autumn Three white fields surrounded by yellow and dim red 40 Magenta White with magenta and blue 41 Magred Magenta and red hues 42 Yelmag Magenta and red hues with a yellow 43 Yelblu Blue with a little yellow 44 Orange &amp; Teal An Orange - Gray - Teal gradient 45 Tiamat A bright meteor with blue, teal and magenta hues 46 April Night Dark blue background with colorful snowflakes 47 Orangery Orange and yellow tones 48 C9 Christmas lights palette. Red - amber - green - blue 49 Sakura Pink and rose tones 50 Aurora Greens on dark blue 51 Atlantica Greens &amp; Blues of the ocean 52 C9 2 C9 plus yellow 53 C9 New C9, but brighter and with a less purple blue 54 Temperature Temperature mapping 55 Aurora 2 Aurora with some pinks &amp; blue 56 Retro Clown Yellow to purple gradient 57 Candy Vivid yellows, magenta, salmon and blues 58 Toxy Reaf Vivid aqua to purple gradient 59 Fairy Reaf Bright aqua to purple gradient 60 Semi Blue Dark blues with a bright blue burst 61 Pink Candy White, pinks and purple 62 Red Reaf Blue, aqua and red gradient 63 Aqua Flash Aqua gradient with a flash of yellow and white 64 Yelblu Hot Yellow, red, blue spectrum 65 Lite Light Faint white and purple 66 Red Flash Red gradient with burst of white in the center  67 Blink Red Dark blue to dark red gradient with burst of purple 68 Red Shift Vibrant yellow to blue gradient with magenta, purple and red 69 Red Tide Waves of yellow, orange and red 70 Candy2 Faded gradient of yellow, salmon and blue 71 Audio Responsive Ratio \ud83c\udf1c\ud83c\udfb8 Dynamic palette based on FFT audio analysis - sets the RGB value based on the relative amplitude of different frequencies 72 Audio Responsive Hue \ud83c\udf1c\ud83c\udfb8 Dynamic palette based on FFT audio analysis - sets the hue based on that frequency 73 Audio Responsive Ramp \ud83c\udf1c\ud83c\udfb8 Dynamic palette based on FFT audio analysis - palette that starts with black, but color based on audio data ### Custom Palettes <p>As of 0.14, up to 10 custom palettes can be uploaded by the user in JSON files named <code>palette0.json</code> through <code>palette9.json</code> The format closely resembles that of the palettes defined in <code>palettes.h</code> with a position (0-255), red, green, blue for each color. An example of the content would be: <pre><code>{\"palette\":[ \n    0, 255,  33,   4, \n   43, 255,  68,  25,\n   86, 255,   7,  25,\n  127, 255,  82, 103,\n  170, 255, 255, 242,\n  209,  42, 255, 22,\n  255,  87, 255, 65]}\n</code></pre></p> <p>Once a palette[0-9].json file has been created, it can be uploaded to the controller using the <code>/edit</code> page (http://[controller-ip]/edit). The controller must be rebooted (<code>/win&amp;RB</code>) before the newly uploaded palettes will be available.  After reboot, the custom palette(s) will be named <code>~ Custom [0-9] ~</code> in the Palettes section of the user interface. </p>"},{"location":"features/pixel-art-converter/","title":"Pixel Art Converter","text":"<p>The Pixel Art Converter tool aims to make it easier to show pixel art on a LED matrix panel, by converting any image to 2D pixel art and sending it to the WLED device. The file types PNG, JPG, WEBP and GIF have been tested to work with the tool.</p>"},{"location":"features/pixel-art-converter/#installation-approaches","title":"Installation Approaches","text":"<p>There are three ways to install the pixel art converter:</p> <ol> <li>Local web browser. Will a web page run on the local machine connecting to the WLED device but will require fetching an extra file. Supported from WLED release v0.14.0-b1 or later</li> <li>Include the pixel art converter in the binary and compile it from the source code. Allows access to the pixel art converter on any device that has a connection to the WLED device. Supported from WLED release v0.14.0-b2 (PR #3042)</li> <li>WLED editor mode. Upload the web page to your WLED device while it is running</li> </ol>"},{"location":"features/pixel-art-converter/#approach-1-local-browser","title":"Approach 1: Local Browser","text":"<ol> <li>Download the <code>pixartmin.htm</code> from the WLED-PixelArtConverter repository</li> <li>Open <code>pixartmin.htm</code> in a browser</li> <li>Head over to the Setup 2D Matrix point</li> </ol>"},{"location":"features/pixel-art-converter/#approach-2-include-pixart-converter-in-build-files","title":"Approach 2: Include Pixart Converter In Build Files","text":"<p>Compilation required</p> <p>Compiling WLED from the source code is required. Follow the instructions on compiling WLED to do this.</p> <ol> <li>Follow the instructions under Making a custom environment and set the flag <code>-D WLED_ENABLE_PIXART</code> under the line that starts with <code>build_flags =</code> in <code>platformio_override.ini</code></li> <li>Compile and flash the binary to the ESP board</li> <li>Power on board and connect via WiFi using the default login</li> <li>It is now time to Setup the 2D Matrix</li> </ol>"},{"location":"features/pixel-art-converter/#approach-3-wled-editor-mode","title":"Approach 3: WLED Editor Mode","text":"<p>Network connection</p> <p>A network connection is required to connect to the CDN, hosting the JS library Ace, an embedded code editor.</p> <ol> <li>Download the <code>pixartmin.html</code> file from the WLED-PixelArtConverter repository</li> <li>Go to the URL <code>http://[device_ip_address]/edit</code></li> <li>Upload the <code>pixartmin.html</code> file using the UI</li> <li>Go to <code>http://[device_ip_address]/pixartmin.html</code></li> <li>Now head to the Setup 2D Matrix point</li> </ol>"},{"location":"features/pixel-art-converter/#setup-2d-matrix","title":"Setup 2D Matrix","text":"<p>2D LED panels are natively supported by WLED but need some configuration for the software to show the 2D grid correctly.</p> <ol> <li>Head into the <code>2D Configuration</code> settings menu in WLED</li> <li>Set the option \"Strip or panel\" to <code>2D Matrix</code></li> <li>Setup rest of the LED panel layout according to the specifics of your LED panel</li> </ol> <p>Serpentine option</p> <p>Setting the serpentine LED panel option incorrectly can lead to very confusing results that look almost correct but not quite. Enabling or Disabling the option depends on the characteristics of the 2D matrix</p>"},{"location":"features/pixel-art-converter/#usage","title":"Usage","text":"<p>The Pixel Art Generator does not yet have a link in the WLED front-end, therefore head over to the web page: <code>http://[device_ip_address]/pixart.htm</code> (default DHCP IP-address link).</p> <p>On the web page:</p> <ol> <li>Set the option \"LED setup\" to 2D matrix or serpentine accordingly.</li> <li> <p>Select an image that should be shown on the matrix display</p> <p></p> <p>This example uses a 16x16 pixel, happy version of the WLED mascot Akemi by Aircoookie.</p> </li> <li> <p>A preview is displayed further down the web page.</p> <p>Scaling option</p> <p>It can help to use the <code>Scale image</code>  option, depending on the image size used.</p> <p></p> </li> <li> <p>Click on \"Send to device\" to push the generated image to the WLED device.</p> </li> </ol>"},{"location":"features/presets/","title":"Presets","text":"<p>Presets can be used to save your favorite light configurations to apply later! You can compare them to the \"scenes\" feature present in some other smart devices.</p>"},{"location":"features/presets/#new-version-011","title":"New version (0.11+)","text":""},{"location":"features/presets/#overview","title":"Overview","text":"<p>WLED 0.11.0 contains a major overhaul of presets, storing them in a <code>/presets.json</code> file in an internal filesystem. This enables many new features, you can now have up to 250 presets and each of them can save all segments which are set up! Speaking of segments, the maximum number has been increased to 12 on ESP8266 and 16 on ESP32! Presets can now also contain both HTTP and JSON API commands, replacing the previous Macro functionality. Each preset can be named, so you'll be able to access it more easily!  </p>"},{"location":"features/presets/#how-to-use","title":"How to use","text":"<p>The new preset system is quite a bit more advanced than the previous one, thus it is likely not as self-explanatory to use. Here you can find what each setting does and how to make best use of it!</p> <p>\"Create Preset\" button Use this to save the current state as a permanent preset, or to add a new API macro.</p> <p>Preset name Enter a nice name for your preset here. I would recommend putting something short, but to the point here, like <code>Epic fireworks</code> or <code>Slow fade</code>. All special characters and emoji are permitted (however, there must not be more than 6 consecutive whitespaces) If you leave this empty, you'll get a name based on the preset ID number, like <code>Preset 16</code>.</p> <p>Quick load label You can optionally add a short label up to 2 characters or 1 emoji long. It will show up in a small circle on top of the preset list for extra quick access without scrolling! I recommend using this for the presets you truly love.  </p> <p>Use current state/Overwrite with state This is enabled by default when adding a new preset and disabled when editing an existing preset. When enabled, it will write the current segment config, including all colors and effect, to the preset. When disabled, it will instead give you a textfield to enter a custom API command or show you the command currently saved.  </p> <p>Include brightness If disabled, the brightness value is not included in the preset. This can be useful e.g. when you want to control the brightness manually and want the preset to only set the effect.</p> <p>Save segment bounds This is an important one. Make sure it is enabled for your boot preset, so that your segment config is properly restored on boot! When disabled, the segment start and stop LEDs are not included in the preset. This can be useful if you plan to make changes to your segment setup and don't want your presets to always reset it to the point it was when the preset was saved.</p> <p>API command This accepts any HTTP or JSON API command! (only visible if the current state checkbox is unchecked) It replaces the previous macro functionality. If you know your JSON, you can even create playlists of other presets!</p> <p>Save to ID This is the ID the preset will be saved to. When creating a new preset, you likely won't have to change it as the lowest unused ID will be chosen automatically. If you change the ID on an existing preset and save, you can copy it to the new ID - change the name though.  </p> <p>Save and Delete buttons Now these are self-explanatory, but I said I'd cover each point :)</p> <p>ID This is the number you'll want to use to apply this preset from a timed macro or automation!  </p>"},{"location":"features/presets/#a-note-on-performance","title":"A note on performance","text":"<p>This new preset system is quite fast where it matters, reading the presets. Applying a preset will typically take less than a tenth of a second.  </p> <p>However, due to a design choice of the LittleFS filesystem used by WLED, random writes to the preset file are very resource intensive. This means that while updating your presets, you might notice your light freezing and becoming unresponsive for up to a few seconds. Adding new presets is usually very fast, those performance issues will occur once you delete/edit/overwrite older presets and your preset file becomes very large, or when adding presets after deleting older ones.</p> <p>I'm looking into ways to mitigate this situation as soon as possible! Meanwhile, to keep things snappy, I would recommend not having more than 50-ish single segment or a dozen of multi-segment presets.</p>"},{"location":"features/presets/#what-about-my-cool-presets-from-earlier-versions","title":"What about my cool presets from earlier versions?","text":"<p>Don't worry, they (as well as your settings) will be automatically imported to the new system! And if you ever need to downgrade to v0.10 for some reason, they will still be there (although any changes made in v0.11 won't be applied)</p>"},{"location":"features/presets/#obtaining-preset-list","title":"Obtaining preset list","text":"<p>Obtaining the preset list is possible with the /presets.json file Seeing the name of the current preset with the API only is not possible, you can only obtain its ID. Then you'd need some code to match it with the entries from presets.json (this is also what the UI does).  See section \"Backing up/restoring presets\".</p>"},{"location":"features/presets/#saving-named-presets","title":"Saving named presets","text":"<p>Save a named preset with <code>{\"psave\":&lt;preset number here&gt;;\"n\":\"Preset name\",\"ib\":true,\"sb\":true}</code></p>"},{"location":"features/presets/#backing-uprestoring-presets","title":"Backing up/restoring presets","text":"<p>To backup all presets, go to <code>[WLED-IP]/edit</code> (OTA lock must be off), right click the <code>presets.json</code> file and download! To restore, use the <code>Choose file</code> and <code>Upload</code> buttons.  </p>"},{"location":"features/presets/#applying-presets-at-a-certain-time-of-day","title":"Applying presets at a certain time of day","text":"<p>Tip</p> <p>If you want to create a preset that turns on the light to the last effect displayed, uncheck <code>Use current state</code> and enter <code>T=1</code> into the API Command field.</p> <p>WLED supports schedules - that is, applying presets at a certain time automatically. Here is a simple guide to get it set up quickly!  </p> <ul> <li>Creates the preset(s) you want to load at specific time(s)  </li> <li>Note the preset ID - the small gray number to the left of the preset name (or, in the bottom of the preset menu)  </li> <li>Go to the <code>Time &amp; Macros</code> section in the WLED settings.  </li> <li>Make sure the time displayed is correct and accurate. It is highly recommended to enable NTP for a reliable schedule. Do not forget to set the correct timezone. If applicable, daylight saving time is handled automatically.  </li> <li>Scroll down to <code>Time-controlled presets</code>. There are 8 different timer slots available.  </li> <li>Enter the hour, minute, and weekdays you want the preset to activate. In the <code>Preset</code> column, enter the preset ID you noted earlier.  </li> <li>Save the settings page! You have successfully set up a schedule :)  </li> </ul> <p>Note</p> <p>This only applies the preset at the start of the specified minute. If you set up two presets, one to turn on the light at 7 and another to turn it off at 8, if WLED is booted at 7:30, the light will not turn on. This should not be an issue in most applications.</p>"},{"location":"features/presets/#applying-presets-at-sunrise-and-sunset","title":"Applying presets at sunrise and sunset","text":"<p>Applying a preset at sunrise and/or sunset is also supported, the last two timed preset slots are used for this. To calculate the times, WLED needs your location. This is possible with the \"Get Location\" button in Time &amp; Macro settings if accessed via a browser. If you are using the WLED app, you will need to open locate.wled.me in your browser and copy the coordinates over to the settings page manually. With the Minutes input field, you may specify an offset of up to 59 minutes before or 59 minutes after the actual sunrise/set time.</p> <p>Location</p> <p>Sunrise and sunset calculation do not work if you live in the polar circles (latitude &gt;66.6N or &gt;66.6S).</p>"},{"location":"features/presets/#earlier-versions-up-to-010","title":"Earlier versions (up to 0.10)","text":"<p>There are 16 preset slots in total. In 0.9.0, the last preset (16) is capable of saving the entire segment configuration. All other presets only save a single segment (main segment, the first one by default) and restore that preset to all selected segments.</p> <p>In the Favorites tab, the number buttons from 1-16 are the different save slots. Find a config you like, then toggle Saving mode on and click on a number to save the preset to that slot. If Saving mode is toggled off, you can restore presets with a single click.</p>"},{"location":"features/presets/#preset-cycle-up-to-0121","title":"Preset cycle (up to 0.12.1)","text":"<p>With this feature, you can create an animation by automatically swapping between presets within a specified range. Keep in mind that any changes you make to effects/colors will be overridden once the system applies the next preset.</p> <p>If you want to start the preset cycle on boot, go to LED settings and tick \"Save current preset cycle configuration as boot default</p> <p>To modify the duration of the preset cycle, ensure the preset cycle box is unchecked before entering a new time value. Once updated, the preset cycle can be enabled again\"</p> <p>Playlists supersede Preset cycle in 0.13.</p>"},{"location":"features/relay-control/","title":"Control a Relay","text":"<p>Digital LED strips still use power when seemingly switched off, about 1W per 200 LEDs. In case you want to prevent that, you can completely cut power to the LEDs by adding a relay to your circuit. It is toggled by WLED when WLED is turned on/off (in the UI, or through other interfaces). No pin is allocated for a relay by default, but can be easily set in the LED preferences page. Previously, GPIO12 (Pin D6 on many devices) was set as the default and is confirmed to work well on most boards except the ESP32-C3.</p> <p>When you decide that you want WLED to control a relay, make sure you buy a suitable relay board. Check what voltage you can supply from your controller to relay (available 3.3V or 5V pin or different voltage from external power source), and make sure the relay can be controlled by voltage level your board is providing  (3.3V CMOS, 5V TTL). Note, some relays come with a jumper that lets you configure whether the relay switches at high or low level of signal, giving you maximum flexibility.</p> <p>This page gives a clear description using a light bulb instead of a LED strip. And instead of the D1 mentioned there, with WLED, you use the pin you set.</p> <p>The default WLED behavior is to turn the relay pin on (high) when the LEDs are on and off (low) when the LEDs are off. This can be changed in the LED Preferences page. Many relays are powered when the signal is LOW. See this thread.</p> <p>Sometimes people ask whether they can control more than one relay through WLED, including controlling this all via Alexa. Controlling an extra relay separately from the RGB lights is not something WLED is designed to do, however you can modify the code to add that functionality. For that, make sure you can compile WLED from source unmodified first. Then, change #define ESPALEXA_MAXDEVICES 1 in line 71 of the wled.h file to 2. After that, just follow the API documentation on https://github.com/Aircoookie/Espalexa to add a new EspalexaDevice to the alexa.cpp file</p> <p>Second option for controlling multiple relays is using a Multi Relay usermod. As with Alexa you will need to compile WLED from source an include Multi Relay usermod either by including <code>-D USERMOD_MULTI_RELAY</code> in PlatformIO.ini or adding <code>#define USERMOD_MULTI_RELAY</code> in <code>wled.h</code> or <code>my_config.h</code>. You can also override default number of relays by defining <code>MULTI_RELAY_MAX_RELAYS</code>. Configuring usermod is done using Usermod settings page where you can define GPIO pins used, wether relay activates on HIGH or LOW logic, if the activation has any delay and if the relay can be controlled from the outside using MQTT message (external). MQTT topic for controlling relays is <code>wled/[device]/relay/[relay_id]/command</code> and accepts <code>on</code>, <code>off</code> and <code>toggle</code> messages. When the relay changes state a message with <code>on</code> or <code>off</code> is sent with the topic <code>wled/[device]/relay/[relay_id]</code>.</p> <p>How To: Use WLED to switch external relay with PIR sensor without affecting WLED state</p> <p>If you do not want PIR (motion) sensor attached to WLED controller to trigger change of WLED state, but still want to control a legacy light, fan, etc. use the Multi Relay usermod and another relay attached to WLED controller. Create two presets for relay control (shown for switching relay off) and set up PIR and multi relay usermods as shown.</p> <p></p> <p>If you do not want button relay control just leave relay button at -1, the same goes for PIR sensor parameters (leave nighttime-only and/or off-only unchecked). Adjust preset numbers and GPIO pins to your liking. Multi relay usermod can also switch relay using MQTT messages or HTTP requests (check source code for available commands). Of course if you configured MQTT on your WLED device PIR sensor usermod will publish /motion topic to MQTT broker for your HA integration.</p> <p></p> <p></p>"},{"location":"features/segments/","title":"Segments","text":"<p>Info</p> <p>Starting in WLED 0.9.0, Segments are supported.</p> <p>This feature allows you to set different zones on the LED strip, each running a different effect or color.</p> <p>A segment is selected if the checkmark next to the segment number is checked. Changes you make to color or effects will apply to all selected segments. The color/effect that is shown in the web UI is that of the first selected segment.</p> <p>There is one main segment, Segment 0 by default. This segment has a few important differences to the rest of the segments. - Color transitions only work on the main segment - The main segment's color is the one that will be reported to HTTP and MQTT APIs</p> <p>Tip: If you divide your strip into two segments, reverse the second one and select both, you can achieve very nice symmetrical effects!</p> <p>Segment 0 has a Start LED of 0 and a Stop LED equal to the LED Count you defined in Configuration, LED Preferences. The Stop LED is not included in the Segment. Currently you can create a maximum of 10 segments.  Presets 1-15 use only Segment 0 by default.  Preset 16 is the only Preset that saves settings for Segments 1-10.</p> <p>To display segment information select the down arrow in the Segment box.  To add a Segment select \u201c+ Add Segment\u201d.  Enter the Start and Stop LED as appropriate.  Grouping and Spacing control the organization of the LEDs within the selected effect.  To reverse the direction of an effect select Reverse Direction.  To delete a Segment select the trash can.  To save your Segment settings select the checkmark to the right of the Start and Stop LED numbers.</p>"},{"location":"features/segments/#grouping-and-spacing","title":"Grouping and Spacing","text":"<p>When an effect changes the color of one LED, it is really changing the color of one LED group. Since the default group size is one, the effect normally only changes a single LED. When Grouping is set to two, the effect will light two LEDs using the same color. The two LEDs are treated as a single virtual LED. </p> <p>To illustrate this, we can create a segment with 12 LEDS (physically referred to as LED 0 to LED 11) and select an effect that repeats three colors. When Grouping is set to one we see a repeating pattern of one red LED, one blue LED, and one green LED. When Grouping is set to two the segment of 12 physical LEDs becomes a segment of 6 virtual LEDs (virtualLED 0 to virtualLED 5). The same effect will now set the color of each virtual LED (which consists of two physical LEDs). The pattern becomes two red LEDs followed by two blue LEDs then two green LEDs.</p> Setting LED Output Grouping 1 Spacing 0 Grouping 2 Spacing 0 <p>As the pattern cycles, the group of LEDs will move together.</p> Setting LED Output Grouping 1 Spacing 0 Grouping 2 Spacing 0 <p>Spacing controls the space or gap between LEDs. The default spacing is zero, so normally there is no space between LEDs. When Spacing is set to one, every other LED will be lit. The number of virtual LEDs in the strip will be half the number of physical LEDs.</p> <p>Again, we can create a segment with 12 LEDS (physically referred to as LED 0 to LED 11) and select an effect that repeats three colors. When Spacing is set to zero we see a repeating pattern of one red LED, one blue LED, and one green LED. When Spacing is set to one the segment of 12 physical LEDs becomes a segment of 6 virtual LEDs (virtualLED 0 to virtualLED 5). The same effect will now set the color of each virtual LED (which consists of the even numbered physical LEDs). The pattern becomes one red LED followed by a blank LED, one blue LED followed by a blank LED, then one green LED followed by a blank LED.</p> Setting LED Output Grouping 1 Spacing 0 Grouping 1 Spacing 1 <p>As the pattern cycles, only the virtual LEDs will be lit - the blank LEDs in between the virtual LEDs will always be off.</p> Setting LED Output Grouping 1 Spacing 0 Grouping 1 Spacing 1 <p>Grouping and Spacing can be combined to create many different custom LED layouts. In the example below, the strip of 12 physical LEDs has been configured to function as four virtual LEDs with a small gap between them.</p> Setting LED Output Grouping 2 Spacing 1 Grouping 2 Spacing 1"},{"location":"features/segments/#interleaving","title":"Interleaving","text":"<p>This is an easy way to get a repeating pattern of colors using one segment per color.</p> <p></p>"},{"location":"features/segments/#offset-in-a-segment","title":"Offset in a segment","text":"<p>By default effects start in the first LED in the segment and finish in the last one. If the offset parameter in a segment is used, the effect start will be moved by the number of positions entered. It will continue to the last LED and then finish with the initial positions that were skipped.</p> <p>For instance, let's assume assume a strip of 12 LEDs with the positions numbered as follows (like the examples above):</p> <p></p> <p>An offset value of 5 will make the effect start in the physical position 5, continue to position 11 and then finish with positions 0 through 4, like this:</p> <p></p> <p>A negative offset value is allowed and represents an offset starting from the last position in the segment. In our previous example, an offset of -2 will start the effect in position 10, like this:</p> <p></p> <p>The offset values is prioritized over grouping and/or spacing. For example, if the offset is 2, grouping 4 and spacing 1, the first group of 4 LEDs will start at the physical position number 2.</p>"},{"location":"features/segments/#effect-overlay","title":"Effect Overlay","text":"<p>Some effects can be overlaid on the background of another effect. To use overlay, set up segments with overlapping pixels. The overlay effect must be playing on the segment with the higher id.  If the Overlay option is checked, the background will not be painted and the effect from the lower segment will be displayed.</p>"},{"location":"features/settings/","title":"Settings","text":"<p>All web configurable settings are split in 5 sub-pages. This page is meant to clarify the purpose of each setting. This documentation applies to WLED 0.8.5.</p>"},{"location":"features/settings/#settings-overview","title":"Settings overview","text":""},{"location":"features/settings/#wifi-settings","title":"WiFi Settings","text":"<p>This sub-page offers options to connect the ESP to different WiFi/WLAN devices.</p> Setting name Value Range Description Network Name String 0..32 The name (SSID) of your home WiFi. Spaces and some other characters are not supported. Network password String 0..64 The password of your home WiFi Static IP 4x 0..256 An optional static IPv4 address Static gateway 4x 0..255 In a static config, your gateway's IPv4 address Static subnet 4x 0..255 In a static config, this normally is 255.255.255.0 mDNS address String 0..32 Name of your device for the Bonjour/Zeroconf protocol Client IP - The current IP of the ESP in the home network AP SSID String 0..32 The name of the ESPs internal WiFi hotspot (Access Point) Hide AP name Y/N The ESPs Access Point won't appear in WiFi lists of other devices AP password String 0..64 The password of the ESPs WiFi Access Point AP WiFi channel 1..13 The 2.4G WiFi band of the AP. For advanced users AP opens select Condition on when to open the AP AP IP - The Access Point IPv4 address of the ESP (is 192.168.4.1 in most cases) WiFi sleep Y/N Disabling WiFi sleep can increase reliability, but increases power consumption"},{"location":"features/settings/#led-settings","title":"LED settings","text":"<p>This sub-page configures the state of your lights.</p> Setting name Value Range Description LED count 1..1500 How many LEDs are in your WS2812B strip Automatic brightness limiter Y/N Limit brightness to stay in a given current range Maximum current 300..65000 Current limit im milliamps LED voltage select Voltage/type of LEDs Custom max. current 1..255 Custom current per LED on full white 4-channel LEDs (RGBW) Y/N Support for SK6812 LEDs with white channel Color order select If your LEDs display incorrect colors (red and green swapped), try changing it Auto-calculate white select Get white channel from RGB automatically (only applicable for RGBW) Details Turn on after power up Y/N Whether the lights should turn on after a reset Apply preset 0..16 Preset to load at boot (0 = none) Set current preset cycle... Y/N The current preset cycle configuration will be used as boot default Use Gamma for brightness Y/N Will correct brightness changes to make it appear more linear. Advised to leave off Use Gamma for color Y/N Will correct colors to match those on a monitor. Strongly advised to keep on Brightness factor 1..255 Factor to change master brightness if it is to dim/bright for a certain configuration Crossfade Y/N Whether to have a smooth fading transitional effect when changing colors/brightness Transition time 0..65535 How many milliseconds the transition lasts Enable transition for secondary color Y/N Enable Palette transitions Y/N Enable transitions for palettes (not affected by transition time) Timed light duration 1..255 How long the nightlight should stay on Target brightness 0..255 What brightness the light should have after time is over. 0=off. Fade down Y/N Gradually fades down the light over the duration instead of turning it off at the end Palette blending select Choose how the palette wraps at the end (seam) Reverse LED order Y/N Mirrors the LEDs (last LED is first) Skip first LED Y/N Will turn off the first LED and shift the remaining by 1 (1st LED used as a signal repeater)"},{"location":"features/settings/#user-interface-settings","title":"User Interface settings","text":"<p>This sub-page changes the look of the web interface.</p> Setting name Value Range Description Server description String 1..32 The name of the device as shown on the top of the UI. Differs from Alexa device name Sync button toggles... Y/N If enabled, both send and receive are toggled by the button in UI. If disabled, only sending is toggled and receiving is kept as configured in Sync settings."},{"location":"features/settings/#sync-settings","title":"Sync settings","text":"<p>This sub-page configures external software synchronization interfaces.</p> Setting name Value Range Description On/Off button enabled Y/N Check if there is a physical pushbutton connected to GPIO0 Infrared receiver type select Type of infrared receiver Broadcast UDP port 1..65535 All WLED lights you want to group together must have the same port Receive Brightness Y/N If there is a sync notification, whether its brightness should be applied Color Y/N Whether the color of the synced device should be applied Effects Y/N Whether the effect settings should be applied Send on direct change Y/N Whether to send a sync notification when state changed via web UI or API Send on button press Y/N Whether to send sync when toggled by button or IR Send Alexa notifications Y/N Whether to send sync after changed by Alexa (you may use Alexa groups instead) Send Hue notifications Y/N Whether to send sync after a connected Philips light changed Send Macro notifications Y/N Whether to send sync after a macro was triggered Send notifications twice Y/N Sends notifications twice (if you have issues with UDP packet loss) Receive UDP realtime Y/N Receive live UDP stream data (DRGB, WARLS, ...) Use E1.31 multicast Y/N Listen on multicast IP instead of unicast E1.31 start universe 1..63000 Only applies for multicast. If you want to set different content, set ESPs at least 8 universes apart Timeout 100..65000 Time after which to resume normal mode once stream has stopped. 65000 will keep the data indefinitely Force max brightness Y/N Realtime stream with max. brightness (unless limited by power brightness limiter) Disable realtime gamma correction Y/N Check if your host software does gamma correction already Realtime LED offset -255..255 Shift the realtime input by how many LEDs Emulate Alexa device Y/N Allows you to control the light via the Amazon Echo voice assistant. Requires reboot Alexa Invocation name String 1..32 The name you want the device to have for control via Alexa. Choose something easy she can understand Device Auth token String 40 You will get this in an e-mail during Blynk setup MQTT Broker IP or String 0..32 Connect to this host MQTT broker Device topic String 0..32 MQTT topic unique to this light Group topic String 0..32 MQTT topic for all lights in a group (room, floor, ...) Hue Bridge IP 4x 0..255 Your Hue bridge IPv4 address. Should be static to avoid reassigning Poll Hue light 0..99 The ID of the hue lamp you want to sync WLED to every x ms 100..65000 How often to poll. Smaller numbers decrease lag but might hurt bridge responsiveness ... Y/N Turn polling on/off Receive On/Off Y/N Turn on/off like the hue light Brightness Y/N Set brightness to that of the hue light Color Y/N Set color to that of the hue light Hue status - Shows the current connection status to a hue bridge Baud rate Various Set the default Serial connection Baud Rate"},{"location":"features/settings/#time-settings","title":"Time settings","text":"<p>This sub-page configures automation tasks.</p> Setting name Value Range Description Get time from NTP Y/N Whether to get the current time from the internet Use 24h format Y/N Use 24h clock format instead of AM/PM Time zone - Your time zone. Open an issue if yours is unsupported. DST is applied automatically UTC offset -65000..65000 Seconds to offset. If you want e.g. 1h offset, use 3600 Current local time - The local time the ESP has acquired. If set up correctly, should equal actual time Clock overlay - The special overlay to use. Allows to display a clock on the strip Countdown mode Y/N Allows to have a visual countdown towards a specific date API macro fields 16x String 0..64 Allows you to define custom API calls which can be triggered by events Boot Macro 0..16 Which macro to trigger after WiFi connected (0 is default action) Alexa On/Off Macros 2x 0..16 Which macros to trigger when turning on/off via Alexa Button Macro 0..16 Macro to trigger if button is short pressed. Default action is on/off toggle. Long Press 0..16 Macro to trigger if button is long pressed (&gt;0.7s).  Default action is random color. Double press 0..16 Macro for double click on button. Countdown-Over Macro 0..16 Macro to trigger when the countdown is over Timed-Light-Over Macro 0..16 Macro to trigger when timed light is done"},{"location":"features/settings/#security-settings","title":"Security settings","text":"<p>This sub-page manages permissions and updates.</p> Setting name Value Range Description Enable OTA lock Y/N If enabled, no firmware updates may be done via WiFi and some settings can't be changed. Passphrase String 0..32 To disable OTA lock, you need a password. The default is \"wledota\". Change it! Deny access to WiFi settings Y/N Disables changes to WiFi settings while locked Disable recovery AP Y/N If enabled, the module will not open an Access Point if connection to home WiFi failed. Factory reset Y/N Deletes all custom settings data (passwords, configuration, macros, presets) Manual OTA - If OTA is enabled, you can upload new binary firmware Enable ArduinoOTA Y/N Useful for developers. Be careful, can even be left on when OTA locked!"},{"location":"features/subpages/","title":"Web GUI Sitemap","text":"<p>This is the sitemap of the module server. Access with \\&lt;ESP-IP&gt;/path (Example: 192.168.8.4/settings)</p> Path Description OTA rights required Since version / Default UI, index page No 0.2 /update Upload new firmware Yes 0.3 /win HTTP Request API (since 0.3) No 0.3 /json JSON API No 0.8.4 /json/state JSON state object No 0.8.4 /json/info JSON information No 0.8.4 /json/eff Effect name list No 0.8.4 /json/pal Palette name list No 0.8.4 /json/live Current colors of LEDs No 0.9.0 /liveview Live preview of current LEDs No 0.9.0 /settings Settings index page No 0.2 /settings/wifi WiFi Settings page Cnfg 0.5.0 /settings/led LED Settings page No 0.5.0 /settings/ui UI Settings page No 0.5.0 /settings/sync Sync Settings page No 0.5.0 /settings/time Time Settings page No 0.5.0 /settings/sec Security Settings page Yes 0.5.0 /welcome New User Welcome page No 0.5.0 /sliders UI, index page No 0.5.0 /reset Reboot module No 0.3 /version Returns build version No 0.3 /uptime Returns runtime in ms No 0.4 /freeheap Returns free memory No 0.4 /favicon.ico Page icon No 0.2 /teapot :) No 0.5.0 /edit Filesystem editor Yes 0.2 /u Custom usermod page 0.8.4 (?) /cpal.htm Custom palette editor 0.14.0-b3 /pixart.htm 2D Pixel Art converter (not compiled by default) 0.14.0-b3 /pxmagic.htm 2D Image converter 0.14.0-b4"},{"location":"features/subpages/#removed-sites","title":"Removed sites","text":"Path Description OTA rights required Versions /list Lists SPIFFS contents (if USEFS) Yes 0.2-0.8.3 /easter Joke page No 0.6.2 only /power Returns an estimate of used LED current No 0.5.0-0.8.3 /build Returns details about the build No 0.5.0-0.8.3 /cleareeprom Resets to factory defaults Yes 0.3-0.6.4 /down Kills software. Hard reset required. Yes 0.3-0.6.4 /url Returns current light setup API url No 0.9.1-0.14.0-b3"},{"location":"interfaces/blynk/","title":"Blynk","text":"<p>Warning</p> <p>The official Blynk v1 server is shut down as of January 2023. WLED v0.14.0-b1 binaries no longer have Blynk support enabled by default. This only works with the legacy Blynk app, for which new signups have been closed by the Blynk developer. WLED will either move to Blynk 2.0 or a different solution soon.</p> <p>You can use the free (if you only use it for 1 WLED light) IoT cloud Blynk to control your WLED Lights with the beautiful Blynk app for Android and iOS!</p> <p>With Blynk, you can also even control your lights when you are not connected to your home network!</p>"},{"location":"interfaces/blynk/#installation","title":"Installation","text":"<ul> <li>Download the Blynk (legacy) app from the Play Store or the App Store</li> <li>Scan this QR code with the app:</li> </ul> <ul> <li>Paste the device auth token Blynk sends to your e-mail into the WLED sync settings (only one ESP!)</li> </ul> <p>You can use the sync button in Blynk to sync other WLED ESPs, just like with the web UIs!</p> <p>If you have doubts about the security of using a 3rd party IoT cloud, don't worry. WLED will only attempt to connect to Blynk if you put the device token string into Sync settings! Keep in mind that your ESP needs to connect to an external server, which may cause lag.</p>"},{"location":"interfaces/dmx-output/","title":"DMX","text":""},{"location":"interfaces/dmx-output/#dmx-output","title":"DMX output","text":"<p>Version Info</p> <p>As of version 0.9.2 WLED supports DMX output via MAX485. This is great for controlling DMX LED PAR lamps with WLED patterns.</p>"},{"location":"interfaces/dmx-output/#features-and-limitations","title":"features and limitations","text":"<ul> <li>up to 15 DMX channels per fixture</li> <li>channels can be set to dimmer (brightness), red, green, blue, white, 0, 255</li> <li>supports channel spacing between fixtures</li> <li>outputs a DMX channel map</li> <li>one universe (512 channels)</li> <li>type of fixture</li> </ul>"},{"location":"interfaces/dmx-output/#software-setup","title":"software setup","text":"<p>For the DMX feature to work, you'll need to compile WLED from source. It's not a big deal, you can do it! Here is the Quick Start guide. There you'll find the section \"i want to modify WLED\".</p> <ol> <li> <p>make sure, you can compile the latest version of WLED without any issues. Then continue.</p> </li> <li> <p>Once that works, in wled00/wled.h you need to change the line    <code>//#define WLED_ENABLE_DMX</code>    to    <code>#define WLED_ENABLE_DMX</code>    Yes, you just remove the //, which enables the line and therefore DMX support.</p> </li> <li> <p>Once you successfully uploaded the sketch to your board, you'll find a new entry \"DMX Output\" in your settings menu.</p> </li> <li> <p>Grab the manual for your lamp and maybe some snacks, look up the dmx channels and set everything up accordingly.</p> </li> </ol>"},{"location":"interfaces/dmx-output/#hardware-setup","title":"hardware setup","text":"<p>The DMX output required the use of a MAX485 transceiver connected to the TX-pin of the ESP in order to produce DMX output.</p> <p>I am currently working on an open source PCB design to go along with this feature.</p> <p>For information about the use of DMX with ESP8266, you might like to read this tutorial by Robert Oostenveld. Note this is just background information about the hardware and you do not need any of the code listed here when using WLED output.</p> <p>If you need to use another pin for output than the TX-pin, you'll need to change this in the ESP-Dmx library itself. This setting is located in src/dependencies/dmx/ESPDMX.cpp on line 31.</p>"},{"location":"interfaces/dmx-output/#questions","title":"questions","text":"<p>If you have further questions about this feature, you can reach me via github (@jwingefeld), ICQ (30914656) or via WLED Discord (JvPeek).</p>"},{"location":"interfaces/e1.31-dmx/","title":"E1.31 (DMX) / Art-Net","text":""},{"location":"interfaces/e1.31-dmx/#e131","title":"E1.31","text":"<p>WLED supports the E1.31 (sACN) realtime light protocol.</p> <p>Version Info</p> <p>As of WLED v0.10.0, Art-Net is alternatively supported. All information on this page applies for Art-Net as well. You will need to switch to Art-Net mode in Sync settings and reboot once.  </p> <p>Version Info</p> <p>As of WLED v0.11.0, DDP is alternatively supported. Using DDP, the Multi RGB DMX mode is always used regardless of the DMX mode setting (as it is no DMX) You will need to switch to DDP mode in Sync settings and reboot once.  </p> <p>Version Info</p> <p>As &gt; WLED 0.14.0-b1, DMX Effect mode channel mapping changed. This is a breaking change in E131 sync behavior. Existing DMX setups using WLED Effect mode are likely to break. Solution: Adopt external DMX channel mappings according to the new Effect mode channel layout.  </p>"},{"location":"interfaces/e1.31-dmx/#features","title":"Features","text":"<ul> <li>170 LEDs (510 DMX channels) are supported per universe.</li> <li>You can use up to 9 adjacent universes which is a total of more than the maximum 1500 LEDs WLED can drive.</li> <li>E1.31 priority handling. HTP for multiple senders with same priority is not implemented!</li> </ul> <p>Note: WLED &gt; 0.14.0-b1 implements a basic priority handling. To enable it set E1.31 port priority UI config &gt; 0. Packages &lt; config priority will always be skipped. Higher priority senders will overrule lower priority package senders (timeout 3 seconds). Non-zero start code and E1.31 preview data is ignored. </p> <p>Note: If you see issued with lag, you may see better performance if you disable Wi-Fi Multimedia (WMM) Mode QoS on your router</p>"},{"location":"interfaces/e1.31-dmx/#general-recommendations","title":"General Recommendations","text":"<ul> <li>For a fluent 25ms (40fps) or more framerate, it is recommended to use no more than 3 universes (510 LEDs).</li> <li>Using multiple E1.31 sources to control a single WLED controller will impact performance. If possible it's recommended to avoid this.</li> <li>Configure WLED to connect to a WiFi Network. It was observed that sending E1.31 from a computer to WLED when accessed as access point (WLED-AP) may not work, see forum post.</li> <li>When using an ESP32, disabling WiFi sleep in the WiFi settings of WLED can reduce/eliminate visual stuttering/lag of effects, and significantly reduce ping times. Note: disabling WiFi sleep will increase power consumption.</li> </ul>"},{"location":"interfaces/e1.31-dmx/#using-ledfx","title":"Using LedFX","text":"<p>We highly recommend the LedFx project in combination with WLED! Configure WLED first, ensure devices are powered on and connected to your WiFi. To add WLED devices, in the 'Device Management', click on the Find WLED devices button. If you want to manually add devices, use more than 170 LEDs with LedFx, you need to go to additional settings and set \"Universe Size\" to 510 when adding the WLED device!</p>"},{"location":"interfaces/e1.31-dmx/#settings","title":"Settings","text":""},{"location":"interfaces/e1.31-dmx/#dmx-types","title":"DMX types","text":"<p>Select the mode you want to use in Sync settings.</p>"},{"location":"interfaces/e1.31-dmx/#disabled","title":"Disabled","text":"<p>Incoming E1.31 packets will be ignored.</p>"},{"location":"interfaces/e1.31-dmx/#single-rgb","title":"Single RGB","text":"<p>All LEDs are set to the same color. 3 Channels: Red, Green, Blue</p>"},{"location":"interfaces/e1.31-dmx/#single-drgb","title":"Single DRGB","text":"<p>All LEDs are set to the same color. 4 Channels: Master Dimmer, Red, Green, Blue</p>"},{"location":"interfaces/e1.31-dmx/#effect","title":"Effect","text":"<p>Not a realtime mode &amp; only support 1 universe. Allows setting WLED effect properties over E1.31 with 15 channels.</p> Channel Property 1 Master Dimmer 2 Effect mode ID 3 Effect speed 4 Effect intensity 5 Effect palette ID 6 Effect option 7 Red Primary 8 Green Primary 9 Blue Primary 10 Red Secondary 11 Green Secondary 12 Blue Secondary 13 Red Tertiary 14 Green Tertiary 15 Blue Tertiary <p>The <code>effect option</code> channel is divided into 4 macro parts to control mirror and reverse states:</p> value mirror reverse 0..63 false false none 64..127 false true reverse 128..191 true false mirror 192..255 true true mirror &amp; reverse"},{"location":"interfaces/e1.31-dmx/#effect-white","title":"Effect + White","text":"<p>Same as <code>Effect</code> with additional whites = 18 channels.</p> Channel Property .. .. 16 White Primary 17 White Secondary 18 White Tertiary"},{"location":"interfaces/e1.31-dmx/#effect-segment","title":"Effect Segment","text":"<p>Same as <code>Effect</code> with 15 channels per segment; expect <code>channel 1 = \"Segment Dimmer\"</code>.</p> <p>All effect segment modes introduce an additional <code>DMX segment spacing</code>. If spacing <code>s = 0</code> subsequent DMX addresses for all segments are created. When <code>s &gt; 0</code> a gap of <code>s</code> DMX addresses between segments is used. To calculate segment DMX fixture addresses:</p> <pre><code>Segment DMX Address (i) = DMXAddress + i * (dmxEffectChannels + s)\n</code></pre> <p>Where <code>DMXAddress</code> = start address as configured in UI, <code>dmxEffectChannels</code> = 15|18 depending on selected effect segment mode, <code>s</code> = address gap as configured in UI and <code>i</code> is the index id of each segment as existing.</p> <p>Note: 1 DMX universe = max 512 DMX addresses. So max number of segments depends on start address, selected segment mode and configured DMX segment spacing. To calculate how many segments can be controlled:</p> <pre><code>Max segments = floor[ (512 - DMXAddress) / (dmxEffectChannels + s) ]\n</code></pre>"},{"location":"interfaces/e1.31-dmx/#effect-segment-white","title":"Effect Segment + White","text":"<p>Same as <code>Effect Segment</code> including whites, so it uses 18 DMX channels per segment.</p>"},{"location":"interfaces/e1.31-dmx/#multiple-rgb","title":"Multiple RGB","text":"<p>3 Channels per LED in sequence. LED 0 Red, LED 0 Green, LED 0 Blue, LED 1 Red, ... Default mode, equivalent to pre-0.9.1 E1.31. This is the mode you want to use for xLights and LedFx.</p>"},{"location":"interfaces/e1.31-dmx/#multiple-rgbw","title":"Multiple RGBW","text":"<p>Like <code>Multiple RGB</code> + additional white channels.</p>"},{"location":"interfaces/e1.31-dmx/#dimmer-multi-rgb","title":"Dimmer + Multi RGB","text":"<p>Like <code>Multiple RGB</code>, but the first channel is a brightness control. Master Dimmer, LED 0 Red, LED 0 Green, ...</p>"},{"location":"interfaces/e1.31-dmx/#preset","title":"Preset","text":"<p>Trigger presets and control brightness. 2 Channels: Brightness, Preset ID</p>"},{"location":"interfaces/http-api/","title":"HTTP Request API","text":"<p>Hint</p> <p>While this API is not deprecated, it is highly recommended to use the JSON API instead of the HTTP API for new integrations, as it is structured in a better way and allows efficient use of newer features like segments, presets, and playlists.</p> <p>WLED's HTTP API allows you to set many properties of your lights, even more than the index page UI supports, via a simple GET web request.</p> <p>Help</p> <p>Unsure how all this API stuff works? Check out this amazing guide by tynick!</p> <p>The basic URL scheme is: <code>[ipadress]/win</code>. This will return an XML file with some current values (see bottom of page). Parameters can be added to control some of the variables.</p> <ul> <li>Example (AP): <code>192.168.4.1/win&amp;A=255</code> sets the brightness to maximum</li> <li>Example (mdns): <code>led.local/win&amp;A=128&amp;FX=0</code> sets the brightness to half and the effect to Solid</li> </ul> <p>In conjunction with a router port forwarding this can be used to automate WLED, for example via IFTTT.</p> <p>Add one or multiple of the following parameters after the base URL/IP to change values: (if the parameter is unknown or the value illegal nothing will happen)</p>"},{"location":"interfaces/http-api/#led-control","title":"LED control","text":"Parameter Value Range Description Since Version &amp;A= 0 to 255 Master brightness 0.2 &amp;T= 0, 1, or 2 Master Off/On/Toggle 0.3 &amp;R= 0 to 255 Primary Red value 0.2 &amp;G= 0 to 255 Primary Green value 0.2 &amp;B= 0 to 255 Primary Blue value 0.2 &amp;W= 0 to 255 Primary White value 0.4 &amp;FX= 0 to 101 LED Effect Index 0.3 &amp;SX= 0 to 255 Effect Speed 0.3 &amp;IX= 0 to 255 Effect Intensity 0.5.0 &amp;FP= 0 to 46 FastLED Palette 0.8.0 &amp;NL= 0 to 255 Nightlight active and duration in minutes 0.3 &amp;ND none Toggles nightlight on but uses default duration 0.6.3 &amp;NT= 0 to 255 Nightlight target brightness 0.5.0 &amp;NF= 0 to 2 Fade Nightlight, 1 = fade brightness only, 2 = additionaly fade color from primary to secondary color 0.5.0"},{"location":"interfaces/http-api/#advanced","title":"Advanced","text":"Parameter Value Range Description Since Version &amp;CL= HEX/DEC Primary color 0.8.0 &amp;C2= HEX/DEC Secondary color 0.8.0 &amp;C3= HEX/DEC Third color 0.8.0 &amp;R2= 0 to 255 Secondary Red value 0.4 &amp;G2= 0 to 255 Secondary Green value 0.4 &amp;B2= 0 to 255 Secondary Blue value 0.4 &amp;W2= 0 to 255 Secondary White value 0.4 &amp;HU= 0 to 65535 Hue 0.5.1 &amp;SA= 0 to 255 Saturation (only in conjunction with Hue) 0.5.1 &amp;H2 none Hue + Saturation will set secondary color 0.5.1 &amp;SR= 0 or 1 Set Primary/Secondary color to random hue 0.4 &amp;SC none Swap primary and secondary color 0.4"},{"location":"interfaces/http-api/#use-of-hex-values","title":"Use of hex values","text":"<p>Hex values need to be prefaced with the character h or H. The normal format is <code>RRGGBB</code>. If the led strip is RGBW, the hex format is <code>WWRRGGBB</code>. Note: In the UI the format is <code>RRGGBBWW</code>, so the values cannot be copied without a transformation.</p>"},{"location":"interfaces/http-api/#loxone-commands","title":"Loxone commands","text":"<p>Loxone offers two commands. One for RGB values and one for brightness and color temperature.</p> Parameter Syntax Range Description Since Version &amp;LX= BBBGGGRRR 0 - 100100100 Loxone RGB value for primary color. Each color (<code>RRR</code>,<code>GGG</code>,<code>BBB</code>) is specified in the range from 0 to 100%. 0.11 &amp;LX= 20bbbtttt 200002700 - 201006500 Loxone brightness and color temperature values for primary color. Brightness <code>bbb</code> is specified in the range 0 to 100%. <code>tttt</code> defines the color temperature in the range from 2700 to 6500 Kelvin. 0.11 &amp;LY= BBBGGGRRR 0 - 100100100 Loxone RGB value for secondary color. Each color (<code>RRR</code>,<code>GGG</code>,<code>BBB</code>) is specified in the range from 0 to 100%. 0.11 &amp;LY= 20bbbtttt 200002700 - 201006500 Loxone brightness and color temperature values for secondary color. Brightness <code>bbb</code> is specified in the range 0 to 100%. <code>tttt</code> defines the color temperature in the range from 2700 to 6500 Kelvin. 0.11"},{"location":"interfaces/http-api/#notifications","title":"Notifications","text":"Parameter Value Range Description Since Version &amp;RN= 0 or 1 Receive UDP Notifications 0.3 &amp;SN= 0 or 1 Send UDP Notifications 0.3 &amp;NN none No notification for this request 0.3 &amp;HP= 0 to 99 Sets Hue polling light ID (0 is off) 0.5.1"},{"location":"interfaces/http-api/#presets","title":"Presets","text":"Parameter Value Range Description Since Version &amp;PS= 1 to 16 Saves current setup to preset. Preset 255 can be used and is temporary/not persistent. 0.4 &amp;PL= 1 to 250 Applies entire preset 0.4 &amp;P1= 1 to 249 First cycle preset 0.6.3 &amp;P2= 2 to 250 Last cycle preset 0.6.3 &amp;TT= 0 to 65000 Set transition time (ms) 0.6.3"},{"location":"interfaces/http-api/#macros","title":"Macros","text":"Parameter Value Range Description Since Version &amp;M= 1 to 16 Apply macro (deprecated, added for compatibility with pre-0.11 automations) 0.5.0"},{"location":"interfaces/http-api/#segments","title":"Segments","text":"<p>It is highly recommended to use the JSON API when dealing with Segments.</p> Parameter Value Range Description Since Version &amp;SM= 0 to 9 Set the main segment (values are reported to XML) 0.9.0 &amp;SS= 0 to 9 Select segment to apply THIS api call to 0.9.0 &amp;SV= 0, 1, or 2 Set segment selected (2 unselects others) 0.9.0 &amp;S= 0 to ledcount-1 Set segment start 0.9.0 &amp;S2= 0 to ledcount Set segment stop 0.9.0 &amp;GP= 1 to 255 Set segment grouping 0.9.1 &amp;SP= 0 to 255 Set segment spacing 0.9.1 &amp;RV= 0 or 1 Reverse/Flip Segment direction 0.9.1 &amp;SB= 0 to 255 Segment brightness 0.10.0"},{"location":"interfaces/http-api/#general-and-experimental","title":"General and Experimental","text":"Parameter Value Range Description Since Version &amp;RB none Reboot WLED 0.10.0 (?) &amp;ST= 32bit Current UTC time in Unix epoch 0.4 &amp;CT= 32bit UTC time for countdown end 0.4 &amp;MD= 0 or 1 Set slider mode to RGB/HSB 0.3 &amp;AX= 0 to 255 Debug feature, can be configured for general IO 0.3 &amp;IN none Server will not respond to this request (internal) 0.3 &amp;OL= 0 to 255 Experimental overlays 0.3 &amp;L= 0 to 255 Lock pixel 0.4 &amp;L2= 0 to 255 Lock pixel range L to L2 0.4 &amp;UL none Unlock instead (used in conjunction with L and L2) 0.4 &amp;NX= String 1..6 Cronixie clockface 0.4 &amp;NM= 0 or 1 Cronixie Time or Countdown mode 0.4 &amp;NB= 0 or 1 Cronixie Backlight 0.4 &amp;IT none Include UI color theme in API response 0.8.2 &amp;RD= 0 or 1 Toggle realtime UDP 0.8.4 &amp;LO= 0-2 Live data override. 0 is off, 1 is override until live data ends, 2 is override until ESP reboot 0.10.2"},{"location":"interfaces/http-api/#xml-response","title":"XML response","text":"<p>This is the XML file sent as response to every API call.</p> Parameter Value Range Description ac 0 to 255 Master Brightness cl 3x 0..255 Primary Color RGB cs 3x 0..255 Secondary RGB ns 0 or 1 Notification Sending on nr 0 or 1 Notification Receive on nl 0 or 1 Nightlight active nf 0 or 2 Nightlight Fade type nd 0 to 255 Nightlight delay nt 0 to 255 Nightlight target brightness fx 0 to 73 Effect index sx 0 to 255 Effect speed ix 0 to 255 Effect intensity fp 0 to 43 FastLED palette wv -1 to 255 Primary White value ws 0 to 255 Secondary White ps 0 to 255 Current Preset cy 0 or 1 Preset Cycling enabled md 0 or 1 RGB or HSB UI mode ds String 0..32 Server description ss 0 to 12 Segment ID"},{"location":"interfaces/http-api/#in-decrementing-values","title":"In-/decrementing values","text":"<p>You can use the <code>~</code> character to easily set values relative to their current value. This is currently supported for the following parameters: <code>A, R, G, B, W, R2, G2, B2, W2, FX, SX, IX, FP, PL</code></p> <p>For example, use <code>PL=~</code> to go to the next preset. Using just <code>~</code> without a number will increase the value by 1, <code>~-</code> will decrease it by 1. The value will then wrap around, so using <code>A=~-</code> when A is 0 will set A to 255.  </p> <p>You can also specify by how much to change the value. For example, using <code>A=~10</code> will increase the brightness by 10. In case of using a number behind <code>~</code>, the value will clip (so it will not wrap around, if the maximum brightness is set, <code>A=~10</code> will not have any effect)</p> <p>To setup a Macro for a Button to advance to the next Preset, use win&amp;P1=1&amp;P2=30&amp;PL=~ P1 will equal the first Preset of the rotation while P2 will be the last Preset.</p>"},{"location":"interfaces/infrared/","title":"Infrared","text":"<p>Version Info</p> <p>Since v0.8.2, infrared control from various IR remotes is supported for ESP8266 and since v0.9.0 for ESP32, too.</p> <p>A dedicated infrared receiver module is required and must be connected to the WLED Controller. For example, KY-022 or TSOP38238 are confirmed to work and inexpensive. These receivers each have three pins: 3.3V, GND and IR data. IR data pin must be connected to a free GPIO pin. This GPIO must then be set as IR GPIO under \"Config-&gt;LED Preferences\" (The default sensor pin is GPIO4). </p> <p>Warning</p> <p>IR receiving will not work on ESP8266 if you use any LED pin other than GPIO 1, 2, or 3 for digital LED strips.</p>"},{"location":"interfaces/infrared/#supported-ir-remotes","title":"Supported IR remotes","text":"<p>To use IR remote go to <code>Settings</code>, <code>Sync Interfaces</code> and change the value for <code>Infrared receiver type</code> according to the IR remote type of the following list:</p> <ol> <li>white 24-key IR remote with R,G,B + 12 color-tones  </li> <li>white 24-key IR remote with CT+ / CT- buttons  </li> <li>blue 40-key IR remote with keys for 25%, 50%, 75% and 100%  </li> <li>white 44-key IR remote with up/down arrows for the colors R,G and B  </li> <li>white 21-key IR remote with R,G,B + 9 color-tones  </li> <li>black 6-key IR remote with CH up/down + Vol up/down  </li> <li>JSON IR remote - Easily configure and use any IR remote.  </li> </ol>"},{"location":"interfaces/infrared/#esp-now-based-remote-control","title":"ESP-NOW based remote control","text":"<p>Since version WLED 14.0-beta3: An ESP-NOW compatible remote control is supported. An example of this is the \u201eWIZmote\u201c remote control. This is based on an ESP microcontroller. ESP-NOW can be activated in WLED settings. You have to enter the Hardware MAC address of the remote control. This is determined by clicking on any button on the remote control and copying the last received MAC address from the \"Last Seen\" field to the \"Hardware MAC\" field in WLED ESP-NOW settings (\u201cConfig-&gt;WiFi Setup\u201d) and saving it with \"Save\". Advantages: no special receiver needs to be attached to the WLED controller and the signals are transmitted via radio network. Therefore there is no line of sight between the remote control and the WLED controller required, as is the case with an IR remote control.  The 4 buttons \"1\"-\"4\" of the WIZmote remote control are linked to presets 1 to 4. The meaning of other keys is self-explanatory. Attention: WIZmote needs two good quality AAA batteries to work properly. If the batteries are too weak, the correct signal will not be sent, even if the blue LED on the remote control lights up briefly, actually indicating signal transmission.</p>"},{"location":"interfaces/json-api/","title":"JSON API","text":"<p>WLED versions since 0.8.4 implement a powerful JSON API over HTTP. It is accessible using the <code>/json</code> subpage.</p>"},{"location":"interfaces/json-api/#obtaining-light-information","title":"Obtaining light information","text":"<p>Sending a GET request will return an object similar to the sample below The response consists of four objects:</p> <ul> <li><code>state</code> contains the current state of the light. All values may be modified by the client (see below)</li> <li><code>info</code> contains general information about the device. No value can be modified using this API</li> <li><code>effects</code> contains an array of the effect mode names</li> <li><code>palettes</code> contains an array of the palette names</li> </ul> <p>You may also obtain those objects individually using the URLs <code>/json/state</code> <code>/json/info</code> <code>/json/eff</code>, and <code>/json/pal</code>.</p> <p>Reserved effect IDs</p> <p>In WLED versions 0.14+, some effects are unsupported in certain builds (e.g. some audio reactive effects may only work on ESP32). In order for each effect to have an unique ID on all devices, having unsupported ones in between supported ones is possible. If called, these will fallback to the Solid effect, in the effects list they have the name <code>RSVD</code> or <code>-</code>. To improve user experience, it is recommended to remove effects with the names <code>RSVD</code> or <code>-</code> form the UI effect selection.</p>"},{"location":"interfaces/json-api/#setting-new-values","title":"Setting new values","text":"<p>Sending a POST request to <code>/json</code> or <code>/json/state</code> with (parts of) the state object will update the respective values. Example: <code>{\"on\":true,\"bri\":255}</code> sets the brightness to maximum. <code>{\"seg\":[{\"col\":[[0,255,200]]}]}</code> sets the color of the first segment to teal. <code>{\"seg\":[{\"id\":X,\"on\":\"t\"}]}</code> and replacing X with the desired segment ID will toggle on or off that segment.</p> <p>CURL example</p> <p>This will toggle on and off and return the new state (v0.13+): <code>curl -X POST \"http://[WLED-IP]/json/state\" -d '{\"on\":\"t\",\"v\":true}' -H \"Content-Type: application/json\"</code></p> <p>Sample JSON API response (v0.8.4):</p> <pre><code>{\n\"state\": {\n\"on\": true,\n\"bri\": 127,\n\"transition\": 7,\n\"ps\": -1,\n\"pl\": -1,\n\"nl\": {\n\"on\": false,\n\"dur\": 60,\n\"fade\": true,\n\"tbri\": 0\n},\n\"udpn\": {\n\"send\": false,\n\"recv\": true\n},\n\"seg\": [{\n\"start\": 0,\n\"stop\": 20,\n\"len\": 20,\n\"col\": [\n[255, 160, 0, 0],\n[0, 0, 0, 0],\n[0, 0, 0, 0]\n],\n\"fx\": 0,\n\"sx\": 127,\n\"ix\": 127,\n\"pal\": 0,\n\"sel\": true,\n\"rev\": false,\n\"cln\": -1\n}]\n},\n\"info\": {\n\"ver\": \"0.8.4\",\n\"vid\": 1903252,\n\"leds\": {\n\"count\": 20,\n\"rgbw\": true,\n\"pin\": [2],\n\"pwr\": 0,\n\"maxpwr\": 65000,\n\"maxseg\": 1\n},\n\"name\": \"WLED Light\",\n\"udpport\": 21324,\n\"live\": false,\n\"fxcount\": 80,\n\"palcount\": 47,\n\"arch\": \"esp8266\",\n\"core\": \"2_4_2\",\n\"freeheap\": 13264,\n\"uptime\": 17985,\n\"opt\": 127,\n\"brand\": \"WLED\",\n\"product\": \"DIY light\",\n\"btype\": \"src\",\n\"mac\": \"60019423b441\"\n},\n\"effects\": [\n\"Solid\", \"Blink\", \"Breathe\", \"Wipe\", \"Wipe Random\", \"Random Colors\", \"Sweep\", \"Dynamic\", \"Colorloop\", \"Rainbow\",\n\"Scan\", \"Dual Scan\", \"Fade\", \"Chase\", \"Chase Rainbow\", \"Running\", \"Saw\", \"Twinkle\", \"Dissolve\", \"Dissolve Rnd\",\n\"Sparkle\", \"Dark Sparkle\", \"Sparkle+\", \"Strobe\", \"Strobe Rainbow\", \"Mega Strobe\", \"Blink Rainbow\", \"Android\", \"Chase\", \"Chase Random\",\n\"Chase Rainbow\", \"Chase Flash\", \"Chase Flash Rnd\", \"Rainbow Runner\", \"Colorful\", \"Traffic Light\", \"Sweep Random\", \"Running 2\", \"Red &amp; Blue\",\"Stream\",\n\"Scanner\", \"Lighthouse\", \"Fireworks\", \"Rain\", \"Merry Christmas\", \"Fire Flicker\", \"Gradient\", \"Loading\", \"In Out\", \"In In\",\n\"Out Out\", \"Out In\", \"Circus\", \"Halloween\", \"Tri Chase\", \"Tri Wipe\", \"Tri Fade\", \"Lightning\", \"ICU\", \"Multi Comet\",\n\"Dual Scanner\", \"Stream 2\", \"Oscillate\", \"Pride 2015\", \"Juggle\", \"Palette\", \"Fire 2012\", \"Colorwaves\", \"BPM\", \"Fill Noise\", \"Noise 1\",\n\"Noise 2\", \"Noise 3\", \"Noise 4\", \"Colortwinkle\", \"Lake\", \"Meteor\", \"Smooth Meteor\", \"Railway\", \"Ripple\"\n],\n\"palettes\": [\n\"Default\", \"Random Cycle\", \"Primary Color\", \"Based on Primary\", \"Set Colors\", \"Based on Set\", \"Party\", \"Cloud\", \"Lava\", \"Ocean\",\n\"Forest\", \"Rainbow\", \"Rainbow Bands\", \"Sunset\", \"Rivendell\", \"Breeze\", \"Red &amp; Blue\", \"Yellowout\", \"Analogous\", \"Splash\",\n\"Pastel\", \"Sunset 2\", \"Beech\", \"Vintage\", \"Departure\", \"Landscape\", \"Beach\", \"Sherbet\", \"Hult\", \"Hult 64\",\n\"Drywet\", \"Jul\", \"Grintage\", \"Rewhi\", \"Tertiary\", \"Fire\", \"Icefire\", \"Cyane\", \"Light Pink\", \"Autumn\",\n\"Magenta\", \"Magred\", \"Yelmag\", \"Yelblu\", \"Orange &amp; Teal\", \"Tiamat\", \"April Night\"\n]\n}\n</code></pre>"},{"location":"interfaces/json-api/#overview-of-values","title":"Overview of values","text":""},{"location":"interfaces/json-api/#state-object","title":"State object","text":"JSON key Value range Description on bool On/Off state of the light bri 0 to 255 Brightness of the light. If on is <code>false</code>, contains last brightness when light was on (aka brightness when on is set to true. Setting bri to 0 is supported but it is recommended to use the range 1-255 and use <code>on: false</code> to turn off. The state response will never havethe value <code>0</code> for bri. transition 0 to 255 Duration of the crossfade between different colors/brightness levels. One unit is 100ms, so a value of <code>4</code> results in atransition of 400ms. tt 0 to 255 Similar to transition, but applies to just the current API call. Not included in state response. ps -1 to 65535 ID of currently set preset. <code>1~17~</code> can be used to iterate through presets 1-17. pss 0 to 65535 Bitwise indication of preset slots (0 - vacant, 1 - written). Always 0 in 0.11. Not changable. Removed as of v0.11.1 psave 1 to 16 (250 in 0.11) Save current light config to specified preset slot. Not included in state response. pl -1 to 0 ID of currently set playlist. For now, this sets the preset cycle feature, <code>-1</code> is off and <code>0</code> is on. nl.on bool Nightlight currently active nl.dur 1 to 255 Duration of nightlight in minutes nl.fade bool If <code>true</code>, the light will gradually dim over the course of the nightlight duration. If <code>false</code>, it will instantly turn to the target brightness once the duration has elapsed. Removed in 0.13.0 (use mode instead) nl.mode 0 to 3 Nightlight mode (0: instant, 1: fade, 2: color fade, 3: sunrise) (available since 0.10.2) nl.tbri 0 to 255 Target brightness of nightlight feature nl.rem -1 to 15300 Remaining nightlight duration in seconds, -1 if not active. Only in state response, can not be set. udpn.send bool Send WLED broadcast (UDP sync) packet on state change udpn.recv bool Receive broadcast packets udpn.nn bool Don't send a broadcast packet (applies to just the current API call). Not included in state response. v bool If set to true in a JSON POST command, the response will contain the full JSON state object. Not included in state response rb bool If set to true, device will reboot immediately. Not included in state response. live bool If set to true, enters realtime mode and blanks the LEDs. The realtime timeout option does not have an effect when this command is used, WLED will stay in realtime mode until the state (color/effect/segments, excluding brightness) is changed. It is expected that <code>{\"live\":false}</code> is sent once live data sending is terminated. Not included in state response. lor 0, 1, or 2 Live data override. 0 is off, 1 is override until live data ends, 2 is override until ESP reboot (available since 0.10.0) time uint32 Set module time to unix timestamp. Not included in state response. mainseg 0 to info.leds.maxseg-1 Main Segment seg Array of segment objects Segments are individual parts of the LED strip. In 0.9.0 this will enables running different effects on differentparts of the strip. playlist object Custom preset playlists. Not included in state response (available since 0.11.0) tb uint32 Sets timebase for effects. Not reported."},{"location":"interfaces/json-api/#contents-of-the-segment-object","title":"Contents of the segment object","text":"<p>Notice: start, stop, and len are not changeable in  0.8.4. Any segment with id &gt; 0 is ignored. Unless stated otherwise, every value may be changed via an HTTP POST request. The tertiary color is not gamma-corrected in 0.8.4, but is in subsequent releases.</p> JSON key Value range Description id 0 to info.maxseg -1 Zero-indexed ID of the segment. May be omitted, in that case the ID will be inferred from the order of the segment objects in the seg array. start 0 to info.leds.count -1 LED the segment starts at. stop 0 to info.leds.count LED the segment stops at, not included in range. If stop is set to a lower or equal value than start (setting to <code>0</code> is recommended), the segment is invalidated and deleted. len 0 to info.leds.count Length of the segment (stop - start). stop has preference, so if it is included, len is ignored. grp 0 to 255 Grouping (how many consecutive LEDs of the same segment will be grouped to the same color) spc 0 to 255 Spacing (how many LEDs are turned off and skipped between each group) of -len+1 to len Offset (how many LEDs to rotate the virtual start of the segments, available since 0.13.0) col array of colors Array that has up to 3 color arrays as elements, the primary, secondary (background) and tertiary colors of the segment. Each color is an array of 3 or 4 bytes, which represent an RGB(W) color. fx 0 to info.fxcount -1 ID of the effect or ~ to increment, ~- to decrement, or r for random. sx 0 to 255 Relative effect speed. ~ to increment, ~- to decrement. ~10 to increment by 10, ~-10 to decrement by 10. ix 0 to 255 Effect intensity. ~ to increment, ~- to decrement. ~10 to increment by 10, ~-10 to decrement by 10. c1 0 to 255 Effect custom slider 1. Custom sliders are hidden or displayed and labeled based on effect metadata. c2 0 to 255 Effect custom slider 2. c3 0 to 31 Effect custom slider 3. o1 bool Effect option 1. Custom options are hidden or displayed and labeled based on effect metadata. o2 bool Effect option 2. o3 bool Effect option 3. pal 0 to info.palcount -1 ID of the color palette or ~ to increment, ~- to decrement, or r for random. sel bool <code>true</code> if the segment is selected. Selected segments will have their state (color/FX) updated by APIs that don't support segments (e.g. UDP sync, HTTP API). If no segment is selected, the first segment (id:<code>0</code>) will behave as if selected. WLED will report the state of the first (lowest id) segment that is selected to APIs (HTTP, MQTT, Blynk...), or <code>mainseg</code> in case no segment is selected and for the UDP API. Live data is always applied to all LEDs regardless of segment configuration. rev bool Flips the segment, causing animations to change direction. on bool Turns on and off the individual segment. (available since 0.10.0) bri 0 to 255 Sets the individual segment brightness (available since 0.10.0) mi bool Mirrors the segment (available since 0.10.2) cct 0 to 255 or 1900 to 10091 White spectrum color temperature (available since 0.13.0) lx <code>BBBGGGRRR</code>: 0 - 100100100 Loxone RGB value for primary color. Each color (<code>RRR</code>,<code>GGG</code>,<code>BBB</code>) is specified in the range from 0 to 100%. lx <code>20bbbtttt</code>: 200002700 - 201006500 Loxone brightness and color temperature values for primary color. Brightness <code>bbb</code> is specified in the range 0 to 100%. <code>tttt</code> defines the color temperature in the range from 2700 to 6500 Kelvin. (available since 0.11.0, not included in state response) ly <code>BBBGGGRRR</code>: 0 - 100100100 Loxone RGB value for secondary color. Each color (<code>RRR</code>,<code>GGG</code>,<code>BBB</code>) is specified in the range from 0 to 100%. ly <code>20bbbtttt</code>: 200002700 - 201006500 Loxone brightness and color temperature values for secondary color. Brightness <code>bbb</code> is specified in the range 0 to 100%. <code>tttt</code> defines the color temperature in the range from 2700 to 6500 Kelvin. (available since 0.11.0, not included in state response) i array Individual LED control. Not included in state response (available since 0.10.2) frz bool freezes/unfreezes the current effect m12 0 to 4 [map1D2D.count] Setting of segment field 'Expand 1D FX'. (0: Pixels, 1: Bar, 2: Arc, 3: Corner) si 0 to 3 Setting of the sound simulation type for audio enhanced effects. (0: 'BeatSin', 1: 'WeWillRockYou', 2: '10_3', 3: '14_3') (as of 0.14.0-b1, there are these 4 types defined)"},{"location":"interfaces/json-api/#info-object","title":"Info object","text":"<p>No value may be changed by means of this API.</p> JSON key Value range Description ver string Version name. vid uint32 Build ID (YYMMDDB, B = daily build index). leds object Contains info about the LED setup. leds.cct bool <code>true</code> if the light supports color temperature control (available since 0.13.0, deprecated, use info.leds.lc) leds.count 1 to 1200 Total LED count. leds.fps 0 to 255 Current frames per second. (available since 0.12.0) leds.rgbw bool <code>true</code> if LEDs are 4-channel (RGB + White). (deprecated, use info.leds.lc) leds.wv bool <code>true</code> if a white channel slider should be displayed. (available since 0.10.0, deprecated, use info.leds.lc) leds.pin byte array LED strip pin(s). Always one element. Removed as of v0.13 leds.pwr 0 to 65000 Current LED power usage in milliamps as determined by the ABL. <code>0</code> if ABL is disabled. leds.maxpwr 0 to 65000 Maximum power budget in milliamps for the ABL. <code>0</code> if ABL is disabled. leds.maxseg byte Maximum number of segments supported by this version. leds.lc byte Logical AND of all active segment's virtual light capabilities leds.seglc byte array Per-segment virtual light capabilities str bool If <code>true</code>, an UI with only a single button for toggling sync should toggle receive+send, otherwise send only name string Friendly name of the light. Intended for display in lists and titles. udpport uint16 The UDP port for realtime packets and WLED broadcast. live bool If <code>true</code>, the software is currently receiving realtime data via UDP or E1.31. lm string Info about the realtime data source lip string Realtime data source IP address ws -1 to 8 Number of currently connected WebSockets clients. -1 indicates that WS is unsupported in this build. fxcount byte Number of effects included. palcount uint16 Number of palettes configured. wifi object Info about current signal strength wifi.bssid string The BSSID of the currently connected network. wifi.signal 0 to 100 Relative signal quality of the current connection. wifi.channel 1 to 14 The current WiFi channel. fs object Info about the embedded LittleFS filesystem (since 0.11.0) fs.u uint32 Estimate of used filesystem space in kilobytes fs.t uint32 Total filesystem size in kilobytes fs.pmt uint32 Unix timestamp for the last modification to the <code>presets.json</code> file. Not accurate after boot or after using <code>/edit</code> ndc -1 to 255 Number of other WLED devices discovered on the network. -1 if Node discovery disabled. (since 0.12.0) arch string Name of the platform. core string Version of the underlying (Arduino core) SDK. lwip 0, 1, or 2 Version of LwIP. 1 or 2 on ESP8266, 0 (does not apply) on ESP32. Deprecated, removal in 0.14.0 freeheap uint32 Bytes of heap memory (RAM) currently available. Problematic if &lt;<code>10k</code>. uptime uint32 Time since the last boot/reset in seconds. opt uint16 Used for debugging purposes only. brand string The producer/vendor of the light. Always <code>WLED</code> for standard installations. product string The product name. Always <code>FOSS</code> for standard installations. btype string The origin of the build. <code>src</code> if a release version is compiled from source, <code>bin</code> for an official release image, <code>dev</code> for a development build (regardless of src/bin origin) and <code>exp</code> for experimental versions. <code>ogn</code> if the image is flashed to hardware by the vendor. Removed as of v0.10 mac string The hexadecimal hardware MAC address of the light, lowercase and without colons. ip string The IP address of this instance. Empty string if not connected. (since 0.13.0)"},{"location":"interfaces/json-api/#per-segment-individual-led-control","title":"Per-segment individual LED control","text":"<p>Using the <code>i</code> property of the segment object, you can set the LED colors in the segment using the JSON API. Keep in mind that this is non-persistent, if the light is turned off the segment will return to effect mode. The segment is frozen when using individual control, the set effect will not run.  To unfreeze the segment, click the \"eye\" icon, change any property of the segment or turn off the light.</p> <p>To set individual LEDs starting from the beginning, use an array of Color arrays <code>[255, 0, 0]</code> or hex values <code>\"FF0000\"</code>. Hex values are more efficient than Color arrays and should be preferred when setting a large number of colors. <code>{\"seg\":{\"i\":[\"FF0000\", \"00FF00\", \"0000FF\"]}}</code> or <code>{\"seg\":{\"i\":[[255,0,0], [0,255,0], [0,0,255]]}}</code> will set the first LED red, the second green and the third blue.</p> <p>To set individual LEDs, use the LED index followed by its color value. <code>{\"seg\":{\"i\":[0,\"FF0000\", 2,\"00FF00\", 4,\"0000FF\"]}}</code> is the same as above, but leaves blank spaces between the lit LEDs.</p> <p>To set ranges of LEDs, use the LED start and stop index followed by its color value. <code>{\"seg\":{\"i\":[0,8,\"FF0000\", 10,18,\"0000FF\"]}}</code> sets the first eight LEDs to red, leaves out two, and sets another 8 to blue.</p> <p>To set a large number of colors, send multiple api calls of 256 colors at a time. <code>{\"seg\": {\"i\":[0,\"CC0000\", \"00CC00\", \"0000CC\", \"CC0000\"...]}}</code> <code>{\"seg\": {\"i\":[256, \"CC0000\", \"00CC00\", \"0000CC\", \"CC0000\"...]}}</code> <code>{\"seg\": {\"i\":[512, \"CC0000\", \"00CC00\", \"0000CC\", \"CC0000\"...]}}</code></p> <p>Do not make several calls in parallel, that is not optimal for the device. Instead make your call in sequence, where each call waits for the previous to complete before making a new one. How this is done depends on your choice of tool, but with CURL you que your commands by separating then with <code>&amp;&amp;</code> i.e. <code>CURL [command 1] &amp;&amp; CURL [command 2] &amp;&amp; CURL [command 3]</code>.</p> <p>Command buffer size</p> <p>If you are trying to set many LEDs and it fails to work, you can check your request here for length. Select ESP32 and Deserialize. If the required buffer size is above 10K for ESP8266 and 24K for ESP32, please split it into multiple sequential requests and consider using the Hex string syntax.</p> <p>Keep in mind that the LED indices are segment-based, so LED 0 is the first LED of the segment, not of the entire strip. Segment features, including Grouping, Spacing, Mirroring and Reverse are functional.</p> <p>Matrices are handled as a non-serpentine layout.</p> <p>Brightness interaction</p> <p>For your colors to apply correctly, make sure the desired brightness is set beforehand. Turning on the LEDs from an off state and setting individual LEDs in the same JSON request will not work!</p>"},{"location":"interfaces/json-api/#playlists","title":"Playlists","text":"<p>(Available since 0.11.0)</p> <p>Sample playlist API call:</p> <pre><code>{\n\"playlist\": {\n\"ps\": [26, 20, 18, 20],\n\"dur\": [30, 20, 10, 50],\n\"transition\": 0,\n\"repeat\": 10,\n\"end\": 21\n}\n}\n</code></pre> <p>This example applies preset ID 26 for 3 seconds, then preset 20 for 2 seconds, then preset 18 for 1 second, lastly preset 20 again for 5 seconds.This repeats 10 times, then preset 21 is applied.</p> <p>Playlist object:</p> JSON key Description ps Array of preset ID integers to be applied in this order. dur Array of time each preset should be kept, in tenths of seconds. If only one integer is supplied, all presets will be kept for that time.Defaults to 10 seconds if not provided. transition Array of time each preset should transition to the next one, in tenths of seconds. If only one integer is supplied, all presets will transition for that time. Defaults to the current transition time if not provided. repeat How many times the entire playlist should cycle before finishing. Set to <code>0</code> for an indefinite cycle. Default to indefinite if not provided. end Single preset ID to apply after the playlist finished. Has no effect when an indefinite cycle is set. If not provided, the light will stay on the last preset of the playlist."},{"location":"interfaces/json-api/#light-capabilities","title":"Light capabilities","text":"<p>In order to e.g. only show color controls relevant to a given setup, it is necessary to obtain the color capabilities of the light. The <code>info.leds.seglc</code> array can be used to do so on a per-segment level. It contains <code>n+1</code> 8-bit integers, where <code>n</code> is the <code>id</code> of the last active segment, each index corresponds to the segment with that ID. This integer indicates whether a given segment supports (24 bit) RGB colors, an extra (8 bit) white channel and/or adjustable color temperature (CCT):  </p> Bit Capability 0 Segment supports RGB color 1 Segment supports white channel 2 Segment supports color temperature 3-7 Reserved (expect any value) <p>Therefore:  </p> <code>lc</code> value Capabilities 0 None. Indicates a segment that does not have a bus within its range, e.g. because it is not active. 1 Supports RGB 2 Supports white channel only 3 Supports RGBW 4 Supports CCT only, no white channel (unused) 5 Supports CCT + RGB, no white channel (unused) 6 Supports CCT (including white channel) 7 Supports CCT (including white channel) + RGB <p>Note that CCT is controllable per-segment, while RGB color and white channel have 3 color slots each per segment.  </p> <p><code>info.leds.lc</code> contains this info on a global level, and is a bitwise AND of the per-segment light capability values.  </p>"},{"location":"interfaces/json-api/#cct-control","title":"CCT control","text":"<p>Please also see the general info about CCT.</p>"},{"location":"interfaces/json-api/#supported-value-ranges","title":"Supported value ranges","text":"<p>Given that the white spectrum handling is agnostic to the true color temperature of the LEDs used, a relative range is preferred for the time being, where a value of <code>0</code> indicates the warmest possible color temperature, while a value of <code>255</code> indicates the coldest temperature.</p> <p>It is also possible to pass a value in the range of <code>1900</code> to <code>10091</code>, in which case it is treated as a Kelvin color temperature, where <code>1900</code> is mapped to a relative value of <code>0</code> and <code>10091</code> to a relative value of <code>255</code>.</p> <p>As such, it is unlikely to match the actual color temperature output by the light, therefore the relative values 0-255 are preferred for the time being.</p> <p>In the future, an option to specify the Kelvin temperatures of the utilized hardware may be added, once this is done, a color temperature can be set to more accurately match other lights.</p> <p>Therefore, for forward compatibility, your integration should expect both either a 0-255 value for <code>seg.cct</code>, in which case it is a relative value, or an absolute Kelvin value in the range 1000-16000 K. In case a Kelvin value is provided, you can consider the color temperature as accurate, which is not possible with relative 0-255 values as the Kelvin points of the white channels are unknown. It is preferred that you set a new CCT value in the same range as received from WLED, that is, use 0-255 if the original value was within this range, and 1000-20000 K otherwise.</p> <p>If your code relies on absolute Kelvin values, a reasonable estimate for the warm white point (relative <code>0</code>) could be 2700K, while cold white (relative <code>255</code>) could commonly be 6500K.</p>"},{"location":"interfaces/json-api/#effect-of-the-segcct-value","title":"Effect of the seg.cct value","text":"<p><code>seg.cct</code> can always be set, but only has an effect on the physical state of the light if one or both of the following conditions is met:</p> <ul> <li>White Balance correction is enabled</li> <li>A bus supporting CCT is configured and <code>Calculate CCT from RGB</code> is not enabled</li> </ul> <p>CCT support is indicated by <code>info.leds.cct</code> being <code>true</code>, in which case you can regard the instance as a CCT light and e.g. display a color temperature control.</p>"},{"location":"interfaces/json-api/#effect-metadata","title":"Effect metadata","text":"<p>Why effect metadata?</p> <p>Prior to 0.14, user interfaces showed Speed and Intensity slider, palette controls, and all three color slots regardless of the effect selected. This may cause confusion to the user because controls are displayed that have no immediate effect in the current configuration. Effect metadata allows you to dynamically hide certain controls, so that the user only sees controls actually utilized by the selected effect mode.</p> <p>Starting with WLED 0.14, effect metadata is available under the <code>/json/fxdata</code> URL. This returns an array of strings with <code>info.fxcount</code> entries. The string at a given index corresponds to the metadata of the effect with the same ID as that index. Metadata is stored in a memory-optimized string format, for example the Aurora effect has the metadata <code>!,!;;!;1;sx=24,pal=50</code>.</p> <p>The metadata string consists of up to five sections, separated by semicolons: <code>&lt;Effect parameters&gt;;&lt;Colors&gt;;&lt;Palette&gt;;&lt;Flags&gt;;&lt;Defaults&gt;</code></p>"},{"location":"interfaces/json-api/#effect-parameters","title":"Effect parameters","text":"<p>The first section specifies the number and labels of effect parameters (e.g. speed, intensity). Up to 5 sliders and 3 checkboxes are supported (<code>sx</code>,<code>ix</code>,<code>c1</code>,<code>c2</code>,<code>c3</code>,<code>o1</code>,<code>o2</code>,<code>o3</code> parameters in the <code>seg</code> object). Slider/checkbox labels are comma separated. An empty or missing label disables this control. <code>!</code> specifies the default label is used:</p> Parameter Default tooltip label sx Effect speed ix Effect intensity c1 Custom 1 c2 Custom 2 c3 Custom 3 o1 Option 1 o2 Option 2 o3 Option 3 <p>The fallback value if this section is missing is two sliders, Effect speed and Effect intensity.</p> <p>Examples:  </p> Parameter string Displayed controls <code>&lt;empty&gt;</code> No effect parameters ! 1 slider: Effect speed !,! 2 sliders: Effect speed + Effect intensity !,Phase 2 sliders: Effect speed + Phase ,Saturation,,,,Invert 1 slider (sets <code>ix</code> parameter) and 1 checkbox: Saturation + Invert ,,,,,Random colors 1 checkbox: Random colors"},{"location":"interfaces/json-api/#colors","title":"Colors","text":"<p>Up to 3 colors can be used. Please note that only the first two characters of the label are visible in the WLED UI. <code>!</code> specifies the default label is used. The default labels for the color slots are <code>Fx</code>, <code>Bg</code>, and <code>Cs</code>.</p> <p>The fallback value if this section is missing is 3 colors: <code>Fx</code> + <code>Bg</code> + <code>Cs</code>.</p> <p>Examples:  </p> Colors string Displayed controls <code>&lt;empty&gt;</code> No color controls ! 1 color: Fx ,! 1 color: Bg !,! 2 colors: Fx + Bg 1,2,3 3 colors: 1 + 2 + 3"},{"location":"interfaces/json-api/#palette","title":"Palette","text":"<p>If empty, the effect does not use palettes. If <code>!</code>, palette selection is enabled.</p> <p>The fallback value if this section is missing is palette selection enabled.</p>"},{"location":"interfaces/json-api/#flags","title":"Flags","text":"<p>Flags allow filtering for effects with certain characteristics. They are a single character each and not comma-separated. Currently, the following flags are specified:</p> Flag Effect characteristic 0 Effect works well on a single LED. If flag 0 is present, flags 1/2/3 are omitted. (unused) 1 Effect is optimized for use on 1D LED strips. 2 Effect requires a 2D matrix setup (unless flag 1 is also present) 3 Effect requires a 3D cube (unless flags 1 and/or 2 are also present) (unused) v Effect is audio reactive, reacts to amplitude/volume. f Effect is audio reactive, reacts to audio frequency distribution. <p>For example, a Flag string of <code>2v</code> denotes a volume reactive effect that is to be used on 2D matrices.</p> <p>The fallback value if this section is missing is <code>1</code>, i.e. a 1D optimized effect.</p>"},{"location":"interfaces/json-api/#defaults","title":"Defaults","text":"<p>Defaults are values for effect parameters that work particularly well on that effect. They are set automatically when the effect is loaded. To specify defaults, use the standard segment parameter name (e.g. <code>ix</code>) followed by an <code>=</code> and the default value. For example, <code>sx=24,pal=50</code> sets the effect speed to 24 (slow) and the palette to ID 50 (Aurora).</p> <p>If no default is specified for a given parameter, it retains the current value.</p>"},{"location":"interfaces/json-api/#sensors","title":"Sensors","text":"<p>Warning</p> <p>This section about the Sensor API is a DRAFT specification. It is not yet implemented and subject to change.</p> <p>Various types of sensors (e.g. for Temperature, light intensity, PIR) may be added to WLED via usermods. To allow read access to sensor data via the JSON API in a standardized way, the <code>info.sensor</code> array is used.</p> <p>If the <code>info.sensor</code> array is missing or empty, no sensor values are exposed.</p>"},{"location":"interfaces/json-api/#sensor-object","title":"Sensor object","text":"<p>Each sensor/measurement is represented by an object within the <code>info.sensor</code> array.</p> <p>For example,</p> <pre><code>{\"type\":\"T\",\"n\":\"Outside\",\"val\":12}\n</code></pre> <p>refers to a 12 \u00b0C temperature measurement in Celsius with the sensor name \"Outside\".</p> <p>The object may contain the following properties, of which all are optional, except <code>type</code>.</p> JSON key Value range Description type string The type of the sensor. n string The name of the sensor. If omitted, the client may generate a suitable name (e.g. \"Temperature sensor 1\") val any The most current sensor reading. May be of any JSON type depending on the type of the sensor, this is a number for all sensor types pre-defined below except for the <code>\"b\"</code> and <code>\"CL\"</code> types and custom type sensors. <code>null</code> if the reading is invalid, either due to an error or because the first reading has not yet completed. unit string An explicit human-readable unit string for the measurement. If omitted, the default for the sensor type is used. error int or string If present and not <code>null</code>,<code>false</code>,<code>0</code> or an empty string, a sensor error is indicated. May either be an integer error code or an error string. tc number Seconds of WLED <code>uptime</code> when the value last changed substantially. The threshold for a \"substantial\" change is up to the implementation. This can for example be used to find when a PIR sensor was last activated. tm number Seconds of WLED <code>uptime</code> when the last reading given by <code>val</code> was obtained. ts number Seconds of WLED <code>uptime</code> at the first measurement / start of measurement period. (required for Energy sensor type) min number Lower bound of possible value range max number Upper bound of possible value range u number Absolute uncertainty of the measurement model string Identification of the sensor hardware used"},{"location":"interfaces/json-api/#sensor-types","title":"Sensor types","text":"<p>These are the standardized sensor types that may be implemented by usermods:</p> Type ID string Measurement type Default unit \"\" (empty string) Invalid sensor (reserved) - b Button/Boolean true/false c Custom user-defined sensor - q Electric charge As t Time s BL Battery Level % CL 24-bit RGB color hex string E Energy (<code>ts</code> property required) J I Electric current A J Illuminance lx L Distance m Lp Sound pressure level dB M Mass kg N Number/count - P Power W Pe General purpose percentage % PL Power Level (signal strength) dBm Pr Pressure Pa R Electric Resistance Ohms RH Relative Humidity % T Temperature \u00b0C U Voltage V (other strings) Reserved, let us know if you need a new type added - <p>If a client is only interested in certain sensor types (e.g. Temperature), it may disregard all other sensor objects.</p>"},{"location":"interfaces/mqtt/","title":"MQTT","text":"<p>Important</p> <p>Notice: The MQTT implementation is currently being restructured to provide a better experience for users of Home Assistant and other automation software. This will be a breaking change. For details regarding the rework, please see #207!</p> <p>WLED versions from 0.8.0 up are able to connect to an MQTT broker for smart home control. Connection to both domains and IP servers is supported on port 1883.</p> <p>Warning</p> <p>Secure connections are not currently supported. I recommend only connecting to local MQTT brokers. In v0.8.4-0.8.6 only, WLED supports MQTT autodiscovery by the HomeAssistant software. This has been removed because of bootloop issues and in favor of the native HomeAssistant integration.</p> <p>WLED will subscribe to up to six topics to change the state of the lights.</p> <ul> <li>[mqttDeviceTopic]   -&gt; Send brightness as ASCII number 0-255 or the strings \"ON\", \"OFF\", and \"T\" (for toggle)</li> <li>[mqttDeviceTopic]/col   -&gt; Send color as HEX (#WWRRGGBB or #RRGGBB) or 32bit DEC. Hex has '#','h' or 'H' as prefix.</li> <li> <p>[mqttDeviceTopic]/api   -&gt; Send an API call (using the HTTP API or, since 0.11, JSON API syntax). You may omit the \"win\" and just send e.g. \"FX=73\"</p> </li> <li> <p>[mqttGroupTopic]</p> </li> <li>[mqttGroupTopic]/col</li> <li>[mqttGroupTopic]/api</li> </ul> <p>The topic paths [mqttDeviceTopic] and [mqttGroupTopic] are customizable in Sync settings. If [mqttGroupTopic] is left empty, it will not subscribe to anything. An empty [mqttDeviceTopic] will instead be replaced with the default \"wled/macaddr\". [mqttDeviceTopic] is intended to be unique to one WLED device and just control that device. [mqttGroupTopic] is intended to control a group of or all WLED devices.</p> <p>UDP notifications will be sent just as if the change was done via the UI or HTTP API.</p> <p>Additionally, on light change, WLED will publish to 3 topics for MQTT clients to query the state of the light.</p> <ul> <li> <p>[mqttDeviceTopic]/g   -&gt; Contains current brightness as ASCII number 0-255</p> </li> <li> <p>[mqttDeviceTopic]/c   -&gt; Contains current color as HEX (#RRGGBB if white is 0, else #WWRRGGBB)</p> </li> <li> <p>[mqttDeviceTopic]/v   -&gt; Contains XML API response (same as HTTP API)</p> </li> </ul> <p>There is support for client ID and authentication, but this is presently transmitted over an unencrypted connection, so please do not use the same password for other services.</p> <p>Attention</p> <p>The maximum length of an MQTT message for WLED is only limited by free RAM.</p>"},{"location":"interfaces/philips-hue/","title":"Philips Hue","text":"<p>WLED can sync to your Philips hue lights.</p> <p>Info</p> <p>This feature allows your WLED light to set it color to that of one of your Hue lights. It does NOT enable individual control of your WLED light from the hue app.</p> <p>To activate it, please go to Sync settings, fill in the IP of your hue bridge. Also you need to fill in the numeric ID of the hue light you want to sync to. Newer versions of the Hue app do not display light IDs in the \"About\" section of the app anymore, to find it, the app <code>Hue Config Viewer</code> is highly recommended. It is available on the Play Store as well as the App Store. After pairing the app to your Hue bridge, you can see the numeric IDs of all your Hue lights in the <code>Lights</code> menu.  </p> <p>The poll interval specifies how often WLED asks the hue bridge for a light change. Lower values will mean a quicker response of WLED to hue light changes, but also decrease responsiveness and stability of WLED and potentially the hue bridge. It is recommended to set it to 1000-2000ms.</p> <p>Due to the nature of the hue protocol, WLED can only sync itself to a native hue bulb. At this time, there is no way to add WLED to the hue bridge and control it individually as if it was a native light.</p> <p>Please don't expect the same level of stability with this feature active, the ESP may reset itself because of the increased traffic it needs to handle.</p> <p>With DiyHue you can emulate a hue bridge that will show all WLED strips as Hue Strip Plus which will work with Hue Sync in realtime.</p>"},{"location":"interfaces/serial/","title":"Serial","text":"<p>WLED 0.13.0 supports multiple protocols over Serial. Serial is available via USB, and on most boards, GPIO1 for TX and GPIO3 for RX.</p> <p>Pin usage limitation</p> <p>If GPIO3 is allocated (e.g. for LED output), all Serial functionality except debug output is unavailable. If GPIO1 is allocated, all Serial output is disabled, including the JSON API response, Improv, and tpm2 output.</p>"},{"location":"interfaces/serial/#adalight-and-tpm2","title":"Adalight and tpm2","text":"<p>Both these protocols are supported and can be used to stream realtime LED data to WLED for direct display, e.g. from an bias lighting program. For tpm2, only data packets are supported and data in 24-bit RGB format is expected. If you want to drive a large amount of LEDs, you may need to increase the Baud rate in WLED Sync settings, as the default baud rate of <code>115200</code> is only sufficient for about 50-100 LEDs depending on the refresh rate. Adalight is supported since WLED 0.6.3, tpm2 since version 0.10.2.</p>"},{"location":"interfaces/serial/#json-over-serial","title":"JSON over Serial","text":"<p>You can send commands to the WLED instance via Serial using the JSON API. To request a JSON response containing the <code>state</code> and <code>info</code> objects, send <code>{\"v\":true}</code>.</p>"},{"location":"interfaces/serial/#improv","title":"Improv","text":"<p>Improv Serial is supported and can be used to check the installed software version as well as connect your device to WiFi without needing to connect to the WLED access point. Improv is used by the WLED web installer for an easy installation and setup process. Note that the baud rate must remain at the default <code>115200</code> setting for the device to be detected as Improv-capable.</p>"},{"location":"interfaces/serial/#other","title":"Other","text":""},{"location":"interfaces/serial/#version-query","title":"Version query","text":"<p>Send a lowercase <code>'v'</code> character (byte <code>0x76</code>) to obtain the ID of the installed WLED version.</p>"},{"location":"interfaces/serial/#led-data-query","title":"LED data query","text":"<p>To get the colors currently displayed by LEDs:</p> <ul> <li> <p>Send an uppercase <code>'L'</code> (byte <code>0x4C</code>) to request the current LED data as a tpm2 data packet in 24-bit RGB format.</p> </li> <li> <p>Send a lowercase <code>'l'</code> (byte <code>0x6C</code>) to request the current LED data in JSON format. This returns the LED colors as 32-bit integers, of which the lowest byte is the Blue value, then Green, then Red, and the highest byte is the White channel value.</p> </li> </ul> <p>For both of these methods, you may need to increase the baud rate if you have a large amount of LEDs. However, tpm2 requires on average 2-4x less bandwidth than JSON, and should therefore be preferred if your application can parse binary data.</p>"},{"location":"interfaces/serial/#changing-baud-rate","title":"Changing Baud Rate","text":"<p>There are 2 main method for changing Baud Rate for the serial connection - Persistant: Configure in App under Sync Interfaces. This setting will persist, and WLED will use specified Baud Rate from this point forward. - Temporary: Utilizing the serial connection at the existing Baud Rate, send the specific command byte to have WLED temporarily change to new Baud Rate. This Baud Rate is temporary and will be reset to default or peristant setting on reboot.</p> Byte Baud Rate <code>0xB0</code> 115200 <code>0xB1</code> 230400 <code>0xB2</code> 460800 <code>0xB3</code> 500000 <code>0xB4</code> 576000 <code>0xB5</code> 921600 <code>0xB6</code> 1000000 <code>0xB7</code> 1500000 - Note: Keep at 115200 to use Improv. Some boards may not support high rates."},{"location":"interfaces/serial/#debugging","title":"Debugging","text":"<p>Compile with the <code>-D WLED_DEBUG</code> build flag to enable serial debugging using <code>DEBUG_PRINTLN(x)</code> macros. This will reserve pin GPIO1, therefore it cannot be used for other purposes when debugging.</p>"},{"location":"interfaces/udp-notifier/","title":"WLED UDP Sync","text":""},{"location":"interfaces/udp-notifier/#usage","title":"Usage","text":"<p>The UDP notifier function of WLED makes it easy to sync multiple lights to the same color/effect, enabled by default. You can set the specific behavior of it in Sync settings, also you can choose if all aspects or only brightness/color/effects are applied.</p> <p>Additionally, there is a \"Sync\" quick toggle for it in the main control UI! In UI settings, you can set whether this button only turns on/off sending (default) or also receiving, with the option <code>Sync button toggles both send and receive</code>.</p> <p>If your sync settings are not the way you like on boot, check the <code>WLED Broadcast</code> section in Sync settings, where you can specify what is sent and received by default:</p>"},{"location":"interfaces/udp-notifier/#receiving-settings","title":"Receiving settings","text":"Setting Description Receive Brightness If there is a sync notification, whether its brightness should be applied Color Whether the color of the synced device should be applied Effects Whether the effect settings should be applied <p>If all checkboxes are disabled, nothing is received by default after each boot. If the sync is toggled on in the main UI and the corresponding checkbox in UI settings is checked, everything is received.</p> <p>A sync receiver will not assume the state of the last sender directly after booting, a new packet must be send for it to react.</p>"},{"location":"interfaces/udp-notifier/#sending-settings","title":"Sending settings","text":"Setting Description Send on direct change Whether to send a sync notification when state changed via the web UI or API Send on button press Whether to send sync when toggled by the physical hardware button Send Alexa notifications Whether to send sync after changed by Alexa (you may use Alexa groups instead) Send Hue notifications Whether to send sync after a connected Philips light changed Send Macro notifications Whether to send sync after a macro was triggered Send notifications twice Sends notifications twice (if you have issues with UDP packet loss) <p>The quick toggle in the main UI will only apply to direct changes (UI + API), all other sync type sending behavior remains unaffected.</p> <p>You can easily group WLED devices (for example all in one room) by changing the UDP port of all devices you want in that group.</p>"},{"location":"interfaces/udp-notifier/#sync-groups","title":"Sync groups","text":"<p>From v0.13.0, 8 Sync groups are available. This allows syncing select instances only without changing the UDP port. For example, you might use one sync group per room you use WLED devices in. Make sure the sender and receiver you want to sync both have the same sync group ticked (a sender can send to multiple groups and a receiver can listen to multiple groups).  </p> <p>Sync packets received from pre-0.13.0 instances are treated as if sent in sync group 1 only.</p>"},{"location":"interfaces/udp-notifier/#protocol-description","title":"Protocol description","text":"<p>Warning</p> <p>Note: this info is partly out of date, see updated functionality in the code (udp.cpp)</p> <p>When enabled, the module where a value was changed will send an UDP broadcast to a port (default 21324). Other modules that listen on this port will set themselves to the same color.</p> <p>For interoperability, the protocol was designed so that even modules with different WLED versions can sync. Therefore, if a WLED 0.4 system receives a WLED 0.3 UDP notification it will apply the primary color but keep its current secondary color.</p> <p>The UDP packet is currently 24 bytes long. It is laid out in the following:</p> Byte Index Var Name Description Notifier Version 0 - Packet Purpose Byte* 0 1 callMode Packet Reason** 0 2 bri Master Brightness 0 3 col[0] Primary Red Value 0 4 col[1] Primary Green Value 0 5 col[2] Primary Blue Value 0 6 nightlightActive Nightlight running? 0 7 nightlightDelayMins Nightlight Time 0 8 effectCurrent Effect Index 0 9 effectSpeed Effect Speed 0 10 white Primary White Value 1 11 - Version Byte*** 1 12 colSec[0] Secondary Red Value 2 13 colSec[1] Secondary Green Value 2 14 colSec[2] Secondary Blue Value 2 15 whiteSec Secondary White Value 2 16 effectIntensity Effect Intensity 3 17 transitionDelay Transition Duration Upper 4 18 transitionDelay Transition Duration Lower 4 19 effectPalette FastLED palette 5 20-23 - Zeros - <p>*The notifier protocol is only used if this byte is 0. Otherwise, one of the UDP Realtime protocols will be used.</p> <p>**The callMode variable specifies the reason for the notification. Every color update has the potential to trigger a notification.</p> callMode Description Behavior 0 Initial Boot Do not notify 1 Direct Change via UI or API notifyDirect? 2 Button was pressed notifyButton? 3 Update by other notification Do not notify 4 Nightlight activated notifyDirect? 5 Other (Req. with &amp;NN) Do not notify 6 Effect changed notifyDirect? 7 Hue light changed notifyHue? 8 Preset Cycle active notifyDirect? 9 Updated via Blynk notifyDirect? <p>***This is the version of the UDP protocol.</p> UDP Version Description WLED Version 0 Basic Support 0.3 1 White Value supported 0.4p 2 Secondary Color supported 0.4 3 Effect Intensity supported 0.5.0 4 Transition Time supported 0.6.0 5 Palettes supported 0.8.0"},{"location":"interfaces/udp-realtime/","title":"UDP Realtime / tpm2.net","text":""},{"location":"interfaces/udp-realtime/#hyperion","title":"Hyperion","text":"<p>You can now use WLED with the popular Ambilight software Hyperion. Just configure Hyperion to use an UDP device with protocol 0 on port 19446! The maximum number of LEDs supported in this mode is 490. (WLED 0.8.0 and lower: 341)</p>"},{"location":"interfaces/udp-realtime/#prismatik","title":"Prismatik","text":"<p>Prismatik is another Ambilight option. Select one of the UDP options in the device configuration wizard.</p>"},{"location":"interfaces/udp-realtime/#tpm2net","title":"TPM2.NET","text":"<p>Supported in latest master and will be available in WLED 0.10.1. Please set the WLED broadcast UDP port to 65506 in Sync settings to enable receiving TPM2.NET data.</p>"},{"location":"interfaces/udp-realtime/#udp-realtime","title":"UDP Realtime","text":"<p>Additionally, WLED offers a way to directly drive the connected LEDs via UDP. The protocol is referred to as WLED Audio-Reactive-Led-Strip (WARLS), since the support of that project was its primary goal. However, it can also be used for other realtime applications like an ambilight.</p> <p>WARLS uses the same UDP port the notifier uses (default 21324, can be changed in settings). At the moment, the web UI will be disabled while active, the HTTP API, Alexa and button control remains functional. It uses the current brightness and gamma correction settings.</p> <p>Byte 0 of the UDP packet tells the server which realtime protocol to use.</p> Value Description Max. LEDs 1 WARLS 255 2 DRGB 490 3 DRGBW 367 4 DNRGB 489/packet 0 WLED Notifier - <p>In every protocol, Byte 1 tells the server how many seconds to wait after the last received packet before returning to normal mode, in practice you should use 1-2 (seconds) here in most cases so that the module returns to normal mode quickly after the end of transmission. Use 255 to stay on the UDP data without a timeout until a request is requested via another method.</p> <p>After this the LED color information is transmitted like this:</p> <p>WARLS</p> Byte Description 2 + n*4 LED Index 3 + n*4 Red Value 4 + n*4 Green Value 5 + n*4 Blue Value <p>DRGB: This mode has the difference that the LED indices are not part of the packet, instead every LED is updated. This leads to a higher speed when all LEDs are changed, but a drastically lower speed if only one LED is updated per packet.</p> Byte Description 2 + n*3 Red Value 3 + n*3 Green Value 4 + n*3 Blue Value <p>DRGBW: Like DRGB, but supports the White value for RGBW strips.</p> Byte Description 2 + n*4 Red Value 3 + n*4 Green Value 4 + n*4 Blue Value 5 + n*4 White Value <p>DNRGB: DRGB, but with 2 additional bytes that signify the starting LED index. This allows for more than 490 LEDs in realtime mode by sending multiple packets.</p> Byte Description 2 Start index high byte 3 Start index low byte 4 + n*3 Red Value 5 + n*3 Green Value 6 + n*3 Blue Value <p>When realtime mode starts, all LEDs will be black. However, you don't have to change all LEDs using one packet. Changing a single LED therefore only requires a packet of 2+4 bytes. All LEDs maintain their color until it is changed or the module exits WARLS mode because of a timeout.</p>"},{"location":"interfaces/udp-realtime/#setup-with-arls","title":"Setup with ARLS","text":"<p>The software now supports audio-reactive-led-strip!</p> <ol> <li>Download audio-reactive-led-strip and follow its installation instruction. You can also use my (untested) fork. In that case, you can skip step 2.</li> <li>Insert the following code in led.py after line 66:     m.append(1);     m.append(2);    These are the first two bytes of the protocol.</li> <li>In config.py set your led amount, ESP IP and WLED UDP notifier port. For FPS, a setting between 15-30 is recommended.</li> <li>Run visualization.py! If you have a low amount of LEDS (e.g. 10) try lowering the sigma values in line 129-131.</li> <li>If you have multiple WLED devices, you can sync them all with music. Use the led count of your largest device and set the IP to X.X.X.255 (UDP broadcast). You can adjust the position of the amplitude with the WARLS offset setting. Note that web control currently does not work while it is active.</li> </ol>"},{"location":"interfaces/websocket/","title":"WebSocket","text":"<p>Version Info</p> <p>Since WLED 0.10.2, a WebSocket server is enabled by default and can be used to access a subset of the JSON API.</p> <p>The server is available at the <code>/ws</code> endpoint, you can access it like <code>ws://[WLED-IP]/ws</code>.</p> <p>You may send any JSON state update to the socket. On change of the lighting state, the server will send a JSON object containing the state and info objects (this is equivalent to HTTP GET <code>/json/si</code>) to all connected clients. This object will also be sent to a client upon connecting.</p> <p>You can also request a live stream of the LED values (e.g. the \"Peek\" feature of WLED-UI) by sending <code>{\"lv\":true}</code> to the websocket. The returned format is the same as for <code>/json/live</code>. Only one client can receive this at a time, if a new client requests it the stream will stop for the previous client (but the websocket will stay connected).</p> <p>There can be a maximum of 4 clients connected at a time. If a fifth client connects, a different client will be disconnected. On ESP8266, it is recommended to have no more than 2 clients connected simultaneously.</p>"},{"location":"interfaces/json-ir/json_infrared/","title":"Infrared","text":"<p>Version Info</p> <p>Since v0.13.0, infrared control for any IR remote compatible with your IR receiver with JSON remote.</p> <p>A dedicated infrared receiver module is required. (KY-022 or TSOP38238 are confirmed to work and inexpensive)</p> <p>The default sensor pin is GPIO4. It can be changed in the WLED settings.</p>"},{"location":"interfaces/json-ir/json_infrared/#json-ir-remote","title":"JSON IR Remote","text":"<p>The JSON IR remote allows users to customize IR remote behavior without writing custom C  code or compiling. Using the JSON IR remote, you can map buttons from any compatible  remote to any HTTP request API or JSON API command. </p> <p>The map of IR codes to API commands is stored on your ESP's file system in <code>ir.json</code>.  From the \"LED Preferences\" page, set the IR pin and remote type to \"JSON remote\". Once \"JSON remote\" is selected,  a file upload control will appear. You can also upload and edit ir.json from the /edit page, which can be reached by going to http://[controller-ip]/edit. If you use the edit page to upload your config file, be sure to name it <code>ir.json</code>.</p>"},{"location":"interfaces/json-ir/json_infrared/#preconfigured-remotes","title":"Preconfigured Remotes","text":"<p>LED remotes typically are not sold separately. But you can purchase with an RGB controller for $2-4 on AliExpress and $5-10 on Amazon.  When purchasing a remote, be sure that it is an infrared (IR) remote and not a radio (RF) remote as they are not supported at this time.</p> <p> 44-key white  ir.json</p> <p> 40-key blue ir.json</p> <p> 40-key black  ir.json</p> <p> 38-key ir.json (Sold with WLED compatible SP511E controllers)</p> <p>  32-key ir.json (commonly sold with fairy string lights)</p> <p> 24-key (very common, but buttons need repurposed to be very useful with WLED) ir.json v1 gray buttons load presets 1-4 ir.json v2 gray buttons cycle effects, palettes and change speed  </p> <p> 24-key grey ir.json</p> <p> 24-key music ir.json v3</p> <p> 21-key ir.json</p> <p> 18-Key Silver ir.json</p> <p> 6-key ir.json</p>"},{"location":"interfaces/json-ir/json_infrared/#editing-irjson","title":"Editing ir.json","text":"<p>First see if a JSON file already exists for your remote. If not, see if there is a JSON file for a remote with  the same number of buttons. Often remotes with the same number of buttons have different labels but emit the  same codes. The JSON keys are the hex encoded IR codes emitted by each button.  The keys are strings and case is important,  be sure to use the same format as the sample below. It is also the same format used when codes are echoed on the serial console. </p> <p>In the JSON document, each button object should have a <code>cmd</code> attribute containing the HTTP request or JSON API command.  In addition to HTTP and JSON API commands, several C functions are supported (!incBrightness, !decBrightness, !presetFallback). The !incBrightness and !decBrightness functions, take smaller steps at the dim end of the range with progressively larger steps at the bright end. The !presetFallback function applies a preset (attribute PL) and falls back to the specified effect and palette (attributes FX and FP) if preset does not exist. (see sample below)</p> <p>If an IR remote button is pressed rapidly or held down, subsequent presses have a different code (0xFFFFFFFF).  If your command is repeatable but does not contain the \"~\" character and is not calling incBrightness or decBrightness, then add a \"rpt\" attribute with a value of true.  Label and position attributes are ignored by WLED but useful when making edits. </p> <p>If an ir.json file does not already exist for your remote, you will need to determine what code each button emits. To do this, connect your ESP8266 or ESP32 to a computer and  open Arduino or VSCode serial monitor. Then press each button and record the code printed on the serial monitor. You should see something like this:</p> <pre><code>IR recv\n0xFFDE10\n</code></pre> <p>You should get a 24-bit hex encoded integer. If you get 0xFFFFFFFF, that means the button has been pressed repeatedly or held down. Try tapping quickly.</p>"},{"location":"interfaces/json-ir/json_infrared/#tips","title":"Tips","text":"<ul> <li>Map <code>play</code> or <code>auto</code> buttons to a playlist. They currently just turn on preset cycling <code>CY=1</code> or load a playlist of presets 1-5. You can define the playlist in ir.json as in the sample below, or save a playlist as a preset and load that.</li> <li>Save your 'every day' presets in one range of ids, maybe 1-30; your 'holiday' presets in another range, maybe 31-40. Then you can devote two buttons to cycle through presets. In our example, the command on the 'holiday cycle' button would be <code>P1=31&amp;P2=40&amp;PL=~</code></li> <li>You can also group your presets by color; for instance reddish animations in 1-10, greenish in 11-20, bluish in 21-30. The 44-key remote has up and down arrows for red, green and blue. So the command on the 'blue down' button would be <code>P1=21&amp;P2=30&amp;PL=~-</code> </li> <li>Most of the 24-key and fewer remotes are designed with analog LEDs in mind and do not have very useful labels for WLED. With JSON IR and a fine-tip Sharpie, you can repurpose buttons to make them more useful.</li> </ul>"},{"location":"interfaces/json-ir/json_infrared/#irjson-sample","title":"ir.json sample","text":"<pre><code>{\n\"0xF740BF\": {\n\"label\": \"On/Off\",\n\"cmd\": \"T=2\",\n\"rpt\": true\n},\n\"0xF700FF\": {\n\"label\": \"Speed +\",\n\"cmd\": \"SX=~16\"\n},\n\"0xF720DF\": {\n\"label\": \"Red\",\n\"cmnt\": \"Lava palette + primary, secondary and tertiary colors\",\n\"cmd\": \"FP=8&amp;CL=hFF7F00&amp;C2=hFF0000&amp;C3=hCC3D60\"\n}, \"0xF710EF\": {\n\"label\": \"Timer1\",\n\"cmnt\": \"Timer 60 min\",\n\"cmd\": \"NL=60&amp;NT=0\"\n},\n\"0xF730CF\": {\n\"label\": \"Play\",\n\"cmnt\": \"prime example of a playlist that cycles every 180 seconds and continues to repeat\",\n\"cmd\": {\"playlist\":{\"ps\":[1,3,5,7,11,13,17],\"dur\": 1800,\"transition\":7,\"repeat\":0,\"end\":0}}\n}, \"0xFF9867\": {\n\"label\": \"Bright+\",\n\"cmnt\": \"smaller steps at beginning, larger steps at the end\",\n\"cmd\": \"!incBrightness\"\n},\n\"0xF78877\": {\n\"label\": \"DIY1\",\n\"cmnt\": \"Preset 1, fallback to Saw(16) - Party(6) if it doesn't exist\",\n\"cmd\": \"!presetFallback\",\n\"PL\": 1,\n\"FX\": 16,\n\"FP\": 6\n},\n}\n</code></pre>"},{"location":"moonmodules/Installing-and-Compiling/","title":"Installing and Compiling","text":""},{"location":"moonmodules/Installing-and-Compiling/#introduction","title":"Introduction","text":"<p>MoonModules introduces a new naming convention for bin(ary) files which contains configs and presets for used hardware. It also shows the used hardware in the bin name including shield esp flash memory size, audio input.</p>"},{"location":"moonmodules/Installing-and-Compiling/#naming-convention","title":"Naming convention","text":"<ul> <li>WLEDMM_ (to differentiate between WLEDSR and WLEDAC)</li> <li>Version used. First 3 numbers are WLEDAC numbering, last is subnumbering within fork e.g. 0.14.0.11</li> <li>Hardware config / presets e.g. wemos_shield_esp32_4MB_ICS4343x</li> <li>S, M or XL config, use M where possible, XL if needed (Previously _min, _max and _all where used)</li> </ul>"},{"location":"moonmodules/Installing-and-Compiling/#configurations","title":"Configurations","text":"<p>S:</p> <ul> <li>USERMOD_AUDIOREACTIVE</li> <li>USERMOD_ARTIFX</li> </ul> <p>M:</p> <ul> <li>S</li> <li>USERMOD_DALLASTEMPERATURE</li> <li>USERMOD_FOUR_LINE_DISPLAY</li> <li>USERMOD_ROTARY_ENCODER_UI</li> <li>USERMOD_AUTO_SAVE</li> <li>USERMOD_WEATHER</li> <li>USERMOD_MPU6050_IMU</li> <li>USERMOD_GAMES</li> </ul> <p>XL:</p> <ul> <li>M</li> <li>USERMOD_BATTERY ;; enable Battery usermod</li> <li>USERMOD_BATTERY_USE_LIPO ;; use new \"decharging curve\" for LiPo cells</li> <li>USERMOD_BH1750</li> <li>USERMOD_ANIMATED_STAIRCASE</li> <li>USERMOD_RTC ;; experimental</li> <li>; -D USERMOD_SENSORSTOMQTT  ;; experimental ewowi causes error: fatal error: Adafruit_Sensor.h: No such file or directory</li> <li>USERMOD_ANALOG_CLOCK</li> <li>USERMOD_MULTI_RELAY</li> <li>USERMOD_PIRSWITCH</li> <li>USERMOD_PWM_FAN</li> <li>; -D USERMOD_PING_PONG_CLOCK //Removed as dots is confusing</li> <li>USERMOD_BUZZER</li> <li>USERMOD_SN_PHOTORESISTOR</li> <li>USERMOD_BME280</li> <li>USERMOD_DHT</li> <li>USERMOD_VL53L0X_GESTURES</li> <li>WLED_ENABLE_PIXART</li> </ul>"},{"location":"moonmodules/Installing-and-Compiling/#examples","title":"Examples","text":"<ul> <li>WLEDMM_0.14.0.10_wemos_shield_esp32_16MB_M.bin</li> <li>WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_ICS4343x_M.bin</li> <li>WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_LineIn_M.bin</li> <li>WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_SPM1423_M.bin</li> <li>WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_M.bin</li> </ul>"},{"location":"moonmodules/Installing-and-Compiling/#bin-awareness","title":"Bin awareness","text":"<p>Binaries can be downloaded or compiled yourself. See below.</p> <p>When uploading binaries in Manual OTA update , MoonModules support bin awareness: the UI shows which binary is installed and this is a recommendation for the binary to upload (should support the same hardware).</p>"},{"location":"moonmodules/Installing-and-Compiling/#installing-or-compiling","title":"Installing or Compiling","text":""},{"location":"moonmodules/Installing-and-Compiling/#installing-a-bin","title":"Installing a bin","text":"<p>There are currently 4 locations where bins can be downloaded.</p> <p>They can be installed using Manual OTA update from within the WLED UI or use Sergs ESP_Flasher to directly upload a bin using USB to a board.</p>"},{"location":"moonmodules/Installing-and-Compiling/#serg74","title":"Serg74","text":"<p>https://github.com/srg74/WLED-wemos-shield/tree/master/resources/Firmware/%40MoonModules</p> <p>Updated frequently with dev versions. Go here for latest features</p> <p></p>"},{"location":"moonmodules/Installing-and-Compiling/#wladi","title":"Wladi","text":"<p>https://wled-install.github.io/</p> <p>Updated periodically with release and dev versions</p>"},{"location":"moonmodules/Installing-and-Compiling/#wledme","title":"wled.me","text":"<p>https://install.wled.me</p> <p>Releases only</p>"},{"location":"moonmodules/Installing-and-Compiling/#moonmodules-release-page","title":"MoonModules release page","text":"<p>https://github.com/MoonModules/WLED/releases</p> <p>Releases only</p>"},{"location":"moonmodules/Installing-and-Compiling/#compiling-from-ms-code-platform-io","title":"Compiling from MS Code / Platform IO","text":""},{"location":"moonmodules/Installing-and-Compiling/#platformio-environments","title":"PlatformIO Environments","text":"<ul> <li>Hardware: Choose the right environment depending on Shield, ESP32 flash size and mic type. Name of the environment reflects this e.g. wemos_shield_esp32_4MB_ICS4343x_M</li> <li>Bin aware: name of the binary contains fork (WLED, WLEDSR, WLEDMM), version and environment e.g WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_ICS4343x_M.bin. This name is shown in the UI when oploading via OTA</li> <li>Build or upload: Build only creates the bin (to be uploaded via OTA or ESPTOOL), upload directly loads it into an USB connected ESP32 board.</li> <li>Shield environments: Pins for Shield are already preconfigured</li> <li>For developers: See platformio-entries</li> <li>In case of brownouts, file system issues etc: erase flash from the PlatformIO Core CLU (find in platformio quick access on the left pane of Code) pio run --target erase</li> </ul>"},{"location":"moonmodules/Installing-and-Compiling/#fork-specific-info","title":"Fork specific info","text":""},{"location":"moonmodules/Installing-and-Compiling/#wled-sr","title":"WLED SR","text":"<ul> <li>Also bin aware</li> <li>Bins</li> </ul> <p>Serg74: https://github.com/srg74/WLED-wemos-shield/tree/master/resources/Firmware/%40Atuline. Choose latest version. Or https://wled-install.github.io/. For Wemos Shield choose WLEDSR_0.13.3.4_wemos_shield_esp32_16MB_max.bin or WLEDSR_0.13.3.4_wemos_shield_esp32_4MB_M.bin (Pins pre-configured)</p> <p></p> <ul> <li>To do: add microphones </li> </ul>"},{"location":"moonmodules/Installing-and-Compiling/#wled-ac","title":"WLED AC","text":"<ul> <li>Not bin aware</li> <li>Bins</li> </ul> <p>Serg74 https://github.com/srg74/WLED-wemos-shield/tree/master/resources/Firmware/%40Aircoookie or. Select folder for WLED AC 0.13.3 or 0.14 beta (preferred) or https://wled-install.github.io/</p> <p></p> <ul> <li>For Shields choose wemos_shield_esp32 environment (Pins not pre-configured, not available as bin)</li> </ul>"},{"location":"moonmodules/arti-fx/","title":"ARTI-FX","text":""},{"location":"moonmodules/arti-fx/#arti-fx","title":"ARTI-FX","text":"<p>pka Custom Effects</p> <p>ARTI-FX are effects which are not compiled in the WLED repository but specified by a file (program file) which is interpreted in real time.</p> <p>The big advantage of this is that effects are not limited by what is made by WLED programmers but anybody can create effects without releasing a new version of WLED. Furthermore any change in the effect code is instantly shown on leds allowing fast developing of effects.</p> <p>A disadvantage is that the file needs to be loaded, examined and then run in real-time which is 'per definition' slower then pre-compiled code, although performance is promising already and will get better over time.</p>"},{"location":"moonmodules/arti-fx/#quick-start","title":"Quick start","text":"<p>To get your first ARTI-FX running, perform the following steps</p> <ul> <li>In tab effects, select '\u2699\ufe0f ARTI-FX'</li> </ul> <p></p> <ul> <li>In tab Segments, give the segment a name, this will be the name of the ARTI-FX</li> </ul> <p></p> <ul> <li>Click on ARTI-FX Editor</li> </ul> <p></p> <ul> <li>Click on Download wled.json to enable ARTI-FX for WLED (needed each time a new version of CE is published)</li> <li>Click on Load template to get a 'hello world' example</li> <li>Press save and the template will be executed</li> <li>Extra Download: \ud83e\udd5a: HBaas Base presets, \ud83e\udd5a: HBaas Effects presets, \ud83e\udd5a:Ledmap presets</li> </ul>"},{"location":"moonmodules/arti-fx/#running-examples","title":"Running examples","text":"<p>ARTI-FX examples are stored in Github repository</p> <p>If you develop effects which you want to share, ask for access on Github.</p> <p>These effects can be loaded easily within WLED: Give a ARTI-FX segment name the same name as an effect in this repository (case sensitive, without .wled), click on ARTI-FX Editor and click Download 'effect'.wled and press Save.</p> <p>Alternatively, if you want all the effects in this folder at once, go to the ARTI-FX Editor and click Download presets.json (This will overwrite any existing presets you have). Refresh the WLED page or reboot to see the new presets.</p> <p></p>"},{"location":"moonmodules/arti-fx/#create-your-own-arti-fx","title":"Create your own ARTI-FX","text":"<p>A ARTI-FX program typically looks like this:</p> <p></p> <p>A program contains structures like if statements, for loops, assignments, calls (e.g. renderFrame) etc., commands like setPixelcolor and variables like ledCount.</p>"},{"location":"moonmodules/arti-fx/#components","title":"Components","text":"<ul> <li> <p>program: Once every effect. Can contain global variables and internal functions. There are 2 special internal functions: renderFrame and renderLed</p> </li> <li> <p>Global variables: Once every effect, reused between functions. Variables (global and local) are defined by using an assignment e.g. t=0</p> </li> <li> <p>renderFrame: Once every frame</p> </li> <li> <p>renderLed: Once every led within a frame</p> </li> </ul>"},{"location":"moonmodules/arti-fx/#functions-and-variables","title":"Functions and variables","text":"<p>Functions and variables give access to the WLED functionality. The list of functions and variables will grow as we go. A function has parameters (even empty parameters) e.g. setPixelColor(x,y), variables haven't e.g. ledCount.</p>"},{"location":"moonmodules/arti-fx/#wled-general","title":"WLED general","text":"<pre><code>\"ledCount\": {},\n\"setPixelColor\": {\"pixelNr\":\"int\", \"color\":\"int\"},\n\"leds\": {},\n\"setPixels\": {\"leds\": \"array\"},\n\"hsv\": {\"h\":\"uint8\", \"s\":\"uint8\", \"v\":\"uint8\"},\n\n\"setRange\": {\"from\":\"uint16\", \"to\":\"uint16\", \"color\":\"uint32\"},\n\"fill\": {\"color\":\"uint32\"},\n\"colorBlend\": {\"color1\":\"uint32\", \"color2\":\"uint32\", \"blend\":\"uint16\"},\n\"colorWheel\": {\"pos\":\"uint8\"},\n\"colorFromPalette\": {\"index\":\"uint8\", \"brightness\":\"uint8\"},\n\n\"segcolor\": {\"index\":\"uint8\"},\n\"speedSlider\": {\"return\":\"uint8\"},\n\"intensitySlider\": {\"return\":\"uint8\"},\n</code></pre>"},{"location":"moonmodules/arti-fx/#wled-sr","title":"WLED SR","text":"<pre><code>\"beatSin\": { \"bpm\":\"uint16\", \"lowest\":\"uint8\", \"highest\":\"uint8\", \"timebase\":\"uint32\", \"phase_offset\":\"uint8\"},\n\"fadeToBlackBy\": {\"fadeBy\":\"uint8\"},\n\"iNoise\": {\"x\":\"uint32\", \"y\":\"uint32\"},\n\"fadeOut\": {\"rate\":\"uint8\"},\n\n\"custom1Slider\": {\"return\":\"uint8\"},\n\"custom2Slider\": {\"return\":\"uint8\"},\n\"custom3Slider\": {\"return\":\"uint8\"},\n\"sampleAvg\": {\"return\": \"double\"},\n</code></pre>"},{"location":"moonmodules/arti-fx/#arti-fx_1","title":"ARTI-FX","text":"<pre><code>\"counter\": {\"return\": \"uint32\"},\n\n\"shift\": {\"delta\": \"int\"},\n\"circle2D\": {\"degrees\": \"int\"},\n</code></pre>"},{"location":"moonmodules/arti-fx/#math","title":"Math","text":"<pre><code>\"constrain\": {\"amt\":\"any\", \"low\":\"any\", \"high\":\"any\"},\n\"map\": {\"x\":\"int\", \"in_min\":\"int\", \"in_max\":\"int\", \"out_min\":\"int\", \"out_max\":\"int\"},\n\"seed\": {\"seed\": \"uint16\"},\n\"random\": {\"return\": \"uint16\"},\n\"sin\": {\"degrees\": \"double\", \"return\": \"double\"},\n\"cos\": {\"degrees\": \"double\", \"return\": \"double\"},\n\"abs\": {\"value\": \"double\", \"return\": \"double\"},\n\"min\": {\"value1\": \"double\", \"value2\": \"double\", \"return\": \"double\"},\n\"max\": {\"value1\": \"double\", \"value2\": \"double\", \"return\": \"double\"},\n</code></pre>"},{"location":"moonmodules/arti-fx/#time","title":"Time","text":"<pre><code>\"hour\": {\"return\":\"uint8\"},\n\"minute\": {\"return\":\"uint8\"},\n\"second\": {\"return\":\"uint8\"},\n\"millis\": {\"return\": \"uint32\"},\n</code></pre>"},{"location":"moonmodules/arti-fx/#pixelblase-support","title":"Pixelblase support","text":"<pre><code>\"time\": {\"inVal\":\"double\", \"return\": \"double\"},\n\"triangle\": {\"t\":\"double\", \"return\": \"double\"},\n\"wave\": {\"v\":\"double\", \"return\": \"double\"},\n\"square\": {\"v\":\"double\", \"t\":\"double\", \"return\": \"double\"},\n</code></pre>"},{"location":"moonmodules/arti-fx/#serial-output","title":"Serial output","text":"<pre><code>\"printf\": {\"args\": \"__VA_ARGS__\"}\n</code></pre>"},{"location":"moonmodules/arti-fx/#details","title":"Details","text":"<ul> <li>ledcount: number of leds within(!) a segment </li> <li>setpixelColor: currently the second parameter is color from palette!</li> <li>leds: one or 2 dimensional array: One index for led strips and 2 indexes for panels. If the leds variable is used an implicit setPixels(leds) will be done each frame! </li> <li>shift: shift all leds left or right (using delta)</li> <li>circle2D: puts a dot on a circle using the angle. Used to show a 2D clock, see clock2D.wled</li> <li>random: 16 bit random nr</li> <li>sin/cos: value between -1 and 1</li> <li>hour/minute/second: current time (set in time preferences)</li> <li>printf: currently no real printf: prints numbers, max 3</li> </ul>"},{"location":"moonmodules/arti-fx/#implementation-of-variables-and-functions","title":"Implementation of variables and functions","text":"<p>All variables and values are internally stored as doubles and where needed converted to (unsigned) integers, e.g. to WLED functions or operators like %.</p> <p>Technical details about external variables and functions can be found in arti_wled.h. Look for arti_external_function, arti_set_external_variable and arti_get_external_variable. Some examples:</p> <p></p>"},{"location":"moonmodules/arti-fx/#current-limitations","title":"Current limitations","text":"<ul> <li>Only 1 segment</li> <li>no unary operators like - (use 0-1) and ++, --</li> <li>no strings</li> </ul>"},{"location":"moonmodules/arti-fx/#trouble-shooting","title":"trouble shooting","text":"<ul> <li>effect crashes: most likely too deeply nested commands (e.g. pixbri = (sin(startVal + millis()/(255- freq)) + 1) * 128), try to split up in more lines.</li> </ul>"},{"location":"moonmodules/contribute-dev/","title":"Contribute to WLED MM Development","text":"<p>This page Work In Progress</p>"},{"location":"moonmodules/contribute-dev/#setup","title":"Setup","text":""},{"location":"moonmodules/contribute-dev/#core-branches","title":"Core branches","text":"<ul> <li>mdev: Main development branch. merge from upstream</li> <li>dev/acmain/main: Do not commit or merge directly to this branch -&gt; easier to keep up to date with upstream</li> </ul>"},{"location":"moonmodules/contribute-dev/#general-coding-standards","title":"General coding standards","text":"<ul> <li>Use WLEDMM in comments so our changes can be found back</li> <li>Add \ud83c\udf1ccharacter on UI items which are MM specific so users can see where MM differs from AC</li> </ul>"},{"location":"moonmodules/contribute-dev/#work-from-other-repos","title":"Work from other repos:","text":"<ul> <li>Fork</li> <li>submit PR</li> </ul>"},{"location":"moonmodules/contribute-dev/#access-to-repo","title":"Access to repo","text":""},{"location":"moonmodules/contribute-dev/#additional-coding-standards","title":"Additional coding standards","text":"<ul> <li>Always update date in wled.h</li> <li>Sometimes update version: Find and replace old version (e.g. 0.14.0-b15.21) by new version (e.g. 0.14.0-b15.22)</li> </ul>"},{"location":"moonmodules/contribute-dev/#feature-branches","title":"Feature branches","text":"<ul> <li>Only use for new features. Branch from dev/acmain/main if intended to merge in upstream using PRs, otherwise branch from mdev</li> </ul>"},{"location":"moonmodules/contribute-dev/#merge-from-upstream","title":"Merge from upstream","text":"<ul> <li>Merge with care: add a commit that will create a conflict. Merge (with conflicts). Resolve conflicts. Unstage all files so you see the differences. Undo changes you do not want in (most often conflicts but can be others too) and stage files. Do that with each file one-by-one. Commit. Undo if you doubt else push to remote.</li> <li>If WLEDMM comments have been added consequently this will help with merging from uptream. However you can't rely on this for 100% so merging always need to be done very precisely, knowing what you will merge.</li> </ul>"},{"location":"moonmodules/contribute-docs/","title":"Contribute to WLED docs","text":""},{"location":"moonmodules/contribute-docs/#introduction","title":"Introduction","text":"<p>You can contribute to the contents on this site as follows:</p> <ul> <li>Create a fork</li> <li>Edit in your fork (Commit -&gt; workflow -&gt; new pages)</li> <li>Create pull request</li> <li>See also Good to know</li> </ul>"},{"location":"moonmodules/contribute-docs/#fork","title":"Fork","text":"<ul> <li>Fork MoonModules/WLED-Docs: https://github.com/MoonModules/WLED-Docs/fork</li> </ul>"},{"location":"moonmodules/contribute-docs/#edit-using-github","title":"Edit using github","text":"<ul> <li>Clone your fork (https://github.com/yourfork/WLED-Docs.git) </li> <li>Create a branch in your fork if you want to create a pull request for changes in that branch only</li> <li>Make edits in your fork / branch (https://github.com/yourfork/WLED-Docs/)</li> <li>Commit</li> </ul>"},{"location":"moonmodules/contribute-docs/#edit-in-website","title":"Edit in website","text":"<p>Go to https://yourfork.github.io/WLED-Docs or https://mm.kno.wled.ge/moonmodules/contribute-docs/ if you have contributor rights</p> <ul> <li>Navigate to the page you want to edit</li> <li>Press edit icon</li> </ul> <p></p> <ul> <li>Edit the file</li> </ul> <p></p> <ul> <li> <p>Images can be added by dragging them to the page (see earlier added images and videos for the syntax to be used, use width=\"xxx\" to adjust the size)</p> </li> <li> <p>Commit (see workflow after commit)</p> </li> </ul> <p></p>"},{"location":"moonmodules/contribute-docs/#workflow-after-commit","title":"Workflow after commit","text":"<p>If a commit is done a workflow will be started to create the pages.</p> <p>Progress can be seen in https://github.com/yourfork/WLED-Docs/actions</p> <p></p> <p>This will take some time (about 30s)</p> <p>After the workflow is completed new version of your kno.wled.ge can be found here:</p> <p>https://yourfork.github.io/WLED-Docs</p>"},{"location":"moonmodules/contribute-docs/#create-pull-request","title":"Create pull request","text":"<ul> <li>Create pull request from https://github.com/yourfork/WLED-Docs/ to https://github.com/MoonModules/WLED-Docs/</li> <li>Pull from a branch if you only want to pull the changes in that branch</li> </ul>"},{"location":"moonmodules/contribute-docs/#fork-specific-info","title":"Fork specific info","text":""},{"location":"moonmodules/contribute-docs/#wled-sr","title":"WLED SR","text":"<p>kno.wled.ge not supported help is in maintenance mode and can be found here: https://github.com/Atuline/WLED/wiki</p>"},{"location":"moonmodules/contribute-docs/#wled-ac","title":"WLED AC","text":"<p>Above can also be done on https://github.com/Aircoookie/WLED-Docs</p>"},{"location":"moonmodules/fork-comparison/","title":"Fork Comparison","text":"<p>What are the differences between WLED SR, upstream AC WLED, and MoonModules fork?</p> Feature WLED SR 0.13 MoonModules WLED 0.14 Upstream WLED 0.14 0.14 architecture No Yes (upstream frequently merged) Yes Usermods have own pages in main config menu Audio Reactive only Yes No Segments 2D aware No (XY calculated, mirror not working) Yes Yes Audio reactive Core Usermod Usermod Microphone Profiles No Yes No Audio dynamics limiter No Yes Yes High Definition audio analysis, 32 channel GEQ No Yes (WIP) for ESP32 and ESP32-S3 No ARTI-FX Yes Yes No Expand 1D effects No Yes (+ JMap, Circle and Block) Yes Extended hw info basic Yes No JSON Mapping on 1D effects No Yes No Games usermod (3D to 2D, gyro) No Yes (WIP) No Weather usermod (syncing internet data) No Yes (WIP) No HB effects Fully supported 80% supported (WIP) Not supported classic ESP32 Yes Yes Yes ESP32-S3 No Yes Experimental ESP32-S2 and ESP32-C3 No Experimental Experimental ESP8266 No Yes but no Audio Reactive Yes but no Audio Reactive Bin Awareness Yes Yes No Audioreactive palettes Yes Yes No Extended mic settings in platformIO No Yes No DMX Input No Yes No"},{"location":"moonmodules/mappings/","title":"Mappings","text":""},{"location":"moonmodules/mappings/#introduction","title":"Introduction","text":"<p>There are a few steps between an effect and it's physical presentation on a number of leds.</p> <p>This are the basic steps:</p> <ul> <li>The effect creates for each segment frame a number of pixels using setPixelColor where pixel(0) is left (2D top left) and pixel(length) is right (2D: pixel(widthxheight), bottom right)</li> <li>Segments are mapped to a strip (2D: Matrix) again from left (top) to right (bottom). This is a logical mapping because the real wiring can be different (normally not in strips, but in matrix panels they are) - specify in segments tab</li> <li>Logical strip (or matrix) is mapped to how they physically look. E.g. for matrix panels: where is the first pixel (top/bottom/left/right), how is the orientation (horizontal / vertical) and is it serpentine (or not). There can be multiple panels. - Specify in settings / 2D configuration</li> </ul> <p>Optionally there can also be:</p> <ul> <li>JSON Mapping: Mapping of 1D effects to 2D. Expand1D (Logical mapping)</li> <li>Ledmaps: e.g. for custom setup using led strips, cubes or circles etc in a 2D layout. (Phyisical mapping)</li> </ul> <p>Remarks</p> <ul> <li>All mappings use ledmap.json style mappings. JSON Mapping supports 2D coordinates, the others not. Will be harmonized <li>Peek should show Logical ledmaps, not physical ledmaps (except the now show pixels). </li>"},{"location":"moonmodules/mappings/#mappings","title":"Mappings","text":"<p>Below is in processing order</p>"},{"location":"moonmodules/mappings/#json-mapping","title":"JSON mapping","text":"<p>AKA jmap 1D expansion: maps a 1D effect to a 2D pattern</p> <p>From excel/vba  via /edit and   to matrix </p> <p>Files are here: JSONMappings</p> <p>json files need to be uploaded to /edit. E.g. if filename is candle33.json, the name of the segment must be candle33 and expand1D must be jmap in order to run the mapping.</p>"},{"location":"moonmodules/mappings/#segment-to-logical","title":"Segment to Logical","text":"<p>Maps segments to a matrix where (0,0) is always topleft and (width, height) always bottom right. Non serpentine</p>"},{"location":"moonmodules/mappings/#panel-layout","title":"Panel layout","text":"<p>Takes into account Panel setup and Led panel layout as defined in 2D Configuration (e.g. 1st panel, 1st led, serpentine)</p> <p>Code: uses customMappingTable</p>"},{"location":"moonmodules/mappings/#ledmaps","title":"Ledmaps","text":"<ul> <li>Shuffles leds</li> <li>Both for 1 and 2D</li> <li>Ledmaps override panel layout !!</li> </ul> <p>Code: uses customMappingTable</p> <p>See also Advanced/Mappings</p>"},{"location":"moonmodules/mappings/#fork-specific-info","title":"Fork specific info","text":"Feature WLED SR 0.13 MoonModules WLED 0.14 Upstream WLED 0.14 JSON Mapping No Yes No JSON mapping yet although it's based on an idea from AirCoookie Segment to Logical Yes Yes Yes Ledmaps Yes Yes Yes Panel layout Yes Yes Yes"},{"location":"moonmodules/platformio-entries/","title":"Platformio entries","text":"<p>To re-use settings in a consistent way, MoonModules platformio entries conform to the following standard:</p>"},{"location":"moonmodules/platformio-entries/#overview","title":"Overview","text":"<ul> <li>Brown: existing platform specifiek entries</li> <li>Blue: MoonModules common settings: build flags and lib deps (move settings here if possible)</li> <li>Orange: Base entries: only minimal settings, where possible move to common settings (blue), used by environment settings</li> <li>Green: Environment entries =&gt; use to generate bins using WLED_RELEASE_NAME</li> <li>White text: settings added. If no white text, settings should come from other entries (except WLED_RELEASE_NAME in environment entries)</li> </ul> <p>Remarks: </p> <ul> <li>build flags cannot be overwritten in entries using extends. Example is WLED_RELEASE_NAME: only defined in environment entries, not in base (orange) or common settings (blue).</li> <li>The arrows indicate re-use using ${} and the extends keyword.</li> <li>Bin name of an environment entry is derived as follows: WLEDMM_WLED_RELEASE_NAME_VERSION.bin</li> </ul>"},{"location":"moonmodules/platformio-entries/#to-do","title":"To do","text":"<ul> <li>Remove / evaluate (commented) settings from base entries and move to common settings:</li> </ul> <p><code>-D WLED_USE_MY_CONFIG    -D WLED_WATCHDOG_TIMEOUT=0 #-D WLED_DISABLE_BROWNOUT_DET   -D ARDUINO_USB_CDC_ON_BOOT=0 ; needed for arduino-esp32 &gt;=2.0.4; avoids errors on startup   ; -D WLED_DISABLE_LOXONE   ; -D WLED_DISABLE_ALEXA   ; -D WLED_DISABLE_HUESYNC   ; -D WLED_DISABLE_MQTT   ; -D WLED_DISABLE_INFRARED   ; -D WLED_ENABLE_DMX   ; -D WLED_DEBUG   ; -D SR_DEBUG   ; -D MIC_LOGGER</code></p> <ul> <li>Cleanup / convert old entries</li> <li>Above structure is in current setup repeated for other boards / frameworks. Need to find a way to not repeat all of this, e.g. by replacing brown and blue settings by others... </li> </ul>"},{"location":"moonmodules/platformio-entries/#fork-specific-info","title":"Fork specific info","text":""},{"location":"moonmodules/platformio-entries/#wled-sr","title":"WLED SR","text":"<p>This is also ported to WLEDSR.</p>"},{"location":"moonmodules/platformio-entries/#wled-ac","title":"WLED AC","text":"<p>No plans yet</p>"},{"location":"moonmodules/preset-api-commands/","title":"Preset API Commands","text":""},{"location":"moonmodules/preset-api-commands/#new-in-014","title":"New in 0.14","text":"key what value remarks m12 Exand1D 0=Pixels, 1=Bar, 2=Arc, 3=Corner, 4=jMap \ud83c\udf1c, 5=Circles \ud83c\udf1c, 6=Block \ud83c\udf1c ssim sound sim 0=BeatSin, 1=WeWillRockYou, 2=U10_3, 3=U14_3 <p>See also Features/Presets</p>"},{"location":"moonmodules/preset-api-commands/#fork-specific-info","title":"Fork specific info","text":""},{"location":"moonmodules/preset-api-commands/#wled-sr","title":"WLED SR","text":"<p>Not in WLEDSR</p>"},{"location":"moonmodules/release-notes-v0.14.0-b0/","title":"Release notes v0.14.0-b0","text":""},{"location":"moonmodules/release-notes-v0.14.0-b0/#adding-pong","title":"Adding pong","text":"<p>September 16, 2022</p>"},{"location":"moonmodules/release-notes-v0.14.0-b0/#adding-pong_1","title":"Adding pong","text":"<p>In games usermod</p>"},{"location":"moonmodules/release-notes-v0.14.0-b0/#updates-from-audio-reactive","title":"updates from audio-reactive","text":"<p>September 8, 2022</p>"},{"location":"moonmodules/release-notes-v0.14.0-b0/#updates-from-audio-reactive_1","title":"updates from audio-reactive","text":""},{"location":"moonmodules/release-notes-v0.14.0-b0/#merged-to-upstream","title":"merged to upstream","text":"<ul> <li> <p>volume &amp; frequency \"dynamics limiter\" - slower decay of sound volume in effects. Also has an effect on GEQ, as it turns on smoothing for frequency bands.  </p> </li> <li> <p>GEQ frequency scaling: None (as in SR WLED), Linear, Square Root (new default), Logarithmic.  </p> </li> </ul>"},{"location":"moonmodules/release-notes-v0.14.0-b0/#work-in-progress","title":"work in progress","text":"<ul> <li> <p>New option \"MIC profile\" - default (same table as in SR WLED), line-in (strictly \"pink noise\"), IMNP441 (optimized), ICS-43434 (optimized).  This option causes the use of different \"pink noise tables\" when adjusting the frequency spectrum to human \"hearing sensitivity\". Pink noise calibration is very common when using hardware Equalizers. A good testcase is this Pink Noise Video. </p> </li> <li> <p>(minor) Showing the \"GEQ input gain\" in percent, next to the slider value.  </p> </li> <li> <p>user-settable \"Trebble Amplification\" for GEQ effects. Will be placed into the Info Page, directly under \"GEQ input gain\".</p> </li> </ul>"},{"location":"moonmodules/release-notes-v0.14.0-b0/#framework-v4","title":"FrameWork-V4","text":"<p>September 6</p> <p>Lessons Learnt: When upgrading WLED devices to software using the IDF 4.4.x framework, it seems that a flash erase is needed. Without this, we observed crashes whenever files were written.</p> <p>Suspected cause: Lorol LittleFS (from standards framework) is not compatible with the built-in littleFS from IDF v4.4 / arduino-esp32 v2.0.4. Could be that the partition table is the problem, so a chip erase is needed to clean the table.</p> <p>A new merge to mdev has been done: new environment <code>esp32mdev_V4</code> so that normal compiles are not getting the new framework automatically.</p>"},{"location":"moonmodules/release-notes-v0.14.0-b0/#updates-from-audioreactive-prototype","title":"updates from audioreactive-prototype","text":"<ul> <li>Will merge into upstream</li> </ul>"},{"location":"moonmodules/release-notes-v0.14.0-b0/#json-mapping","title":"Json Mapping","text":"<p>From excel/vba  via /edit and   to matrix </p> <p>Files are here: JSONMappings</p>"},{"location":"moonmodules/release-notes-v0.14.0-b0/#september-2","title":"September 2","text":""},{"location":"moonmodules/release-notes-v0.14.0-b0/#updates-from-audioreactive-prototype_1","title":"updates from audioreactive-prototype","text":"<p>Merged into upstream</p>"},{"location":"moonmodules/release-notes-v0.14.0-b0/#expand1d-effects","title":"Expand1D effects","text":"<ul> <li>Virtual strips in 1D effects</li> </ul> <p>Strip bar has been merged to upstream, strip Arc and strip Corner (as opposed to pixel Arc and Corner, see upstream) is \"waiting\" in upstream branch. To be added to MoonModules.</p>"},{"location":"moonmodules/release-notes-v0.14.0-b0/#usermod-level-up","title":"Usermod level up","text":"<p>each usermod  got its own settings page </p>"},{"location":"moonmodules/release-notes-v0.14.0-b0/#september-1","title":"September 1","text":""},{"location":"moonmodules/release-notes-v0.14.0-b0/#august-31","title":"August 31","text":""},{"location":"moonmodules/release-notes-v0.14.0-b0/#arti-fx","title":"ARTI-FX","text":"<p> +   =  </p> <ul> <li>drawArc using x2+y2=r2 instead of sin/cos</li> </ul>"},{"location":"moonmodules/release-notes-v0.14.0-b0/#weather-usermod","title":"Weather usermod","text":"<p> +   = </p>"},{"location":"moonmodules/release-notes-v0.14.0-b0/#august-29","title":"August 29","text":""},{"location":"moonmodules/release-notes-v0.14.0-b0/#updates-from-audioreactive-prototype_2","title":"updates from audioreactive-prototype","text":""},{"location":"moonmodules/release-notes-v0.14.0-b0/#merged-into-upstream","title":"Merged into upstream","text":"<ul> <li>Sound simulations</li> <li>Expand 1D into 2D</li> <li>Virtual strips in 1D effects</li> <li>liveview / peek 2D</li> <li>AR: reduce variables </li> <li>AR: Sound info in info panel</li> <li>Replace leds[] by sPC/gPC</li> <li>Slower fade-out in GEQ and a few other audioreactive effects.</li> <li>Audio reactive stuff:</li> <li> <ul> <li>upgrade to latest ArduinoFFT, using 'float' instead of 'double'. Up to 8 times faster!</li> </ul> </li> <li> <ul> <li>configurable sound dynamics limiter, to make audioreactive effects flow with the  music, and prevent \"sudden flashes at onsets\". A kind of 'flicker fixer'.</li> </ul> </li> <li> <ul> <li>improvements for UDP sound sync</li> </ul> </li> <li> <ul> <li>new frequency scaling options 'square root' and 'logarithmic' - GEQ shows more action in higher frequencies.</li> </ul> </li> </ul>"},{"location":"moonmodules/release-notes-v0.14.0-b1/","title":"Release notes v0.14.0-b1","text":""},{"location":"moonmodules/release-notes-v0.14.0-b1/#drop-downs-for-pin-variables","title":"Drop downs for pin variables","text":"<p>December 23, 2022</p> <p></p> <ul> <li>show pins which are in use (not selectable)</li> <li>excludes pins which may not be used (e.g. for 4ld/mclk variable)</li> <li>use global pins option</li> <li>undefined option</li> </ul> <p>Currently implemented for AudioReactive and 4LineDisplay (tested) and all usermods which uses pin variables (testing in progress)</p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#mmknowledge","title":"mm.kno.wled.ge","text":"<p>December 21, 2022</p> <p>MoonModules pages (wich is a fork of upstream pages) is now linked to mm.kno.wled.ge and is integrated in MoonModules WLED.</p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#usermod-specific-help","title":"Usermod specific help","text":"<p>December 19, 2022</p> <p></p> <p>This goes to https://mm.kno.wled.ge/soundreactive/Sound-Settings/</p> <p>Also added in Weather usermod and four line display usermod (pages wip)</p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#ledmap2d","title":"Ledmap2D","text":"<p>December 5, 2022 In 0.14 ledmaps are only supported for 1D. This fix makes it work for 2D in WLED MM.</p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#arti-fx-improvements","title":"ARTI-FX improvements","text":"<p>November 29, 2022</p> <p>ARTI-FX improvements: - Simplified presets.json (can be downloaded directly into WLED MM in ARTI-FX editor screen) - some bug fixes to let ARTI-FX run better on 2D</p> <p>And combining ARTI-FX with 1D expansions gives great results and makes ARTI-FX very well performing on large 2D matrices!!!</p> <p>This is color_fade_pulse (by @atuline) with Circles expansion:</p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#improved-lay-out-usermod-settings","title":"Improved lay-out usermod settings","text":"<p>November 20, 2022</p> <p>Grouping and pre-post texts in usermod settings (to make it more readable)</p> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#audioreactive-palettes","title":"Audioreactive palettes","text":"<p>November 19, 2022</p> <p>by NetMindz</p> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#extended-mic-settings-in-platformio","title":"Extended mic settings in platformIO","text":"<p>November 18, 2022</p> <p></p> <p>allowing to create mic specific environments:</p> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#bin-aware-builds","title":"Bin Aware Builds","text":"<p>October 28, 2022</p> <p>Upload hardware specific configs based on generated filenames (=&gt; WLED install is aware of underlying hardware).</p> <p>Ultimate goal of bin awareness is that WLED itself says: hey! I found a new update for you, do you want to install?</p> <p></p> <p>plus</p> <p></p> <p>(esp32mdev -&gt; esp32_4MB_min. esp32mdevmax -&gt; esp32_4MB_max / esp32_16MB_max)</p> <p>plus</p> <p></p> <p>(0.14.0. sequence of upstream commit . sequence of mm commit (need to be updated together with build date)</p> <p>=&gt;</p> <p></p> <p>=&gt;</p> <p></p> <p>(WLED install is aware of the filename of it's bin, WLEDMM_0.14.0.2.1_esp32_16MB.bin in this example)</p> <p>plus</p> <p></p> <p>(Serg and Wladi repo's should use the same names)</p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#ota-latest-release","title":"OTA latest release","text":"<p>October 25, 2022</p> <p>Manual OTA Update is showing the latest MoonModules/WLED release and clicking on the version icon jumps to the release pages on Github, links to Serg74 and Wladi builds are also shown on the release page, so Manual OTA Update will guide you to the version you need!</p> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#add-circles-and-block-as-1d-expansion","title":"Add Circles and Block as 1D expansion","text":"<p>October 21, 2022</p> <p>Add Circles and Block as 1D expansion and show virtualStrip effects with \u22ee\u22ee</p> <p></p> <p>Tetris effect with block expansion:</p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#compatibility-for-sr013-presets","title":"compatibility for SR/0.13 presets","text":"<p>October 20, 2022</p> <p>Thanks to 'renumbered effect ID's back to WLED SR 0.13 numbering': Add compatibility for SR/0.13 presets. This allows HB effects to be run on 0.14, however this shows that there are some shortcomings in 0.14: e.g. lissajoux not working as at should and overlapping segments not working (e.g. Akemi from Hell): November update: Lissajoux, Akemi from Hell (and others) fixed, overlapping segments working now. Check this in Led Preferences:</p> <p></p> <p>(To see them fully working: load them into WLEDSR 0.13!)</p> <p>To upload HR effects put effects / presets.json in /edit <p>To start creating your own multiple segment effects put base / presets.json in /edit <p>Presets.json files are here</p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#renumbered-effect-ids-back-to-wled-sr-013-numbering","title":"renumbered effect ID's back to WLED SR 0.13 numbering","text":"<p>October 16, 2022</p> <p>Important update: renumbered effect ID's back to WLED SR 0.13 numbering so WLED (SR) 0.13 is compatible with MoonModules 0.14 for presets and sync between devices </p> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#extra-hardware-info-on-info-tab","title":"Extra hardware info on Info tab","text":"<p>October 13, 2022</p> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#refactored-json-mapping","title":"Refactored JSON Mapping","text":"<p>October 1, 2022</p> <p>smaller memory footprint so larger mappings can be used, e.g. Snake32:</p> <p>Files are here: JSONMappings</p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#games-usermod-additions","title":"Games usermod additions","text":"<p>September 27, 2022</p> <p>Added to games usermod:</p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#3d-to-2d-mapping","title":"3D to 2D mapping","text":"<p>Adding Frame3D class which takes a 3D coordinate and maps this to 2D matrix (using addEffect(), setPixelColor(floats) and drawLine() added in 0.14 version)</p> <p>    =    </p>"},{"location":"moonmodules/release-notes-v0.14.0-b1/#3d-gyro","title":"3D + Gyro","text":"<p>Refactoring USERMOD_MPU6050_IMU (so that it works!) using latest ElectronicCats/mpu6050 library Embedding this usermod in games usermod and use yaw pitch and roll in Frame3D class</p> <p>    +        =     </p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/","title":"Release notes v0.14.0-b15","text":""},{"location":"moonmodules/release-notes-v0.14.0-b15/#example-mapping-library-for-rings-cubes-and-clouds","title":"Example mapping library for Rings, Cubes and Clouds","text":"<p>2 April 2023</p> <p> </p> <p>Get them here, upload the presets.json to have them all as presets: MoonModules/WLED-Effects/Ledmaps</p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#mm-usermods-have-their-own-icon","title":"MM Usermods have their own icon","text":"<p>2 April 2023</p> <p></p> <p>And (therefore) shown on top</p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#tablet-pc-mode-support-and-ui-graphics-refactor","title":"Tablet PC Mode support and UI graphics refactor","text":"<p>24 March 2023</p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#better-sort-of-presets","title":"Better sort of presets","text":"<p>23 March 2023</p> <p>simplify sort to better align with quick load labels (sort first) and ir remotes using id (sort after presets)</p> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#athom-wled-music-controller-support","title":"Athom WLED Music Controller support","text":"<p>21 March 2023</p> <p></p> <ul> <li>show flashsize in info tab and /getflash</li> <li>support of their ir-remote (24-key music)</li> <li>Legacy PDM type to support their Mic characteristics, tuned by Softhack007</li> <li>Support of 4 line display modification (see picture)</li> <li>athom_music_esp32_4MB_M.bin fully preconfigured for Athom pins and 4LD usermod</li> <li>Not supported yet: mac addres in AP name (need to experiment with WLED_AP_SSID_UNIQUE)</li> <li>Customize IR remote to 0.14</li> </ul> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#sound-reactive-experimental-settings","title":"Sound reactive experimental settings","text":"<p>17 March 2023</p> <p></p> <ul> <li>MicLevel: a new idea how to prevent intermediate \"dropouts\" when playing music. Its not perfect, but will stabilize effects. The idea (picture below) is to \"freeze\" the level threshold (red line) at the first volume \"dropdown\". After freezing, the Volume signal will have a stable \"baseline\". Freezing is unlocked after 8 seconds of silence. Freeze makes a huge difference on GEQ (surprised). Made it a lot more \"stable</li> </ul> <p></p> <ul> <li> <p>FreqDist: set to rightshift to move the frequency bands a bit to the right in case most activity is on the left side.</p> </li> <li> <p>FreqRMS: set to \"on\" to activate a different method for averaging higher frequencies, called \"RMS\" - it preserves peaks better. Downside: could lead to \"overshooting\" in GEQ, as our mic profiles are not adjusted to it yet.</p> </li> </ul>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#file-system-in-settings-menu","title":"File System in settings menu","text":"<p>17 March 2023</p> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#geq-smooth-bars","title":"GEQ Smooth Bars","text":"<p>7 March 2023</p> <p>New option to the GEQ effect: smooth bars. It's intended for matrices with &gt;24 columns, where you would see a \"staircase\" effect because we only have 16 frequency channels. With the new option enabled, it looks like more channels are availeable and stairs are smoothed out.</p> <p></p> <p>and also smooth colors:</p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#ledmap-properties","title":"Ledmap properties","text":"<p>1 March 2023</p> <p></p> <p>See Advanced/Mapping/0.14 MM</p> <p>Example: Ring Map</p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#aditional-info-in-info-tab","title":"Aditional info in info tab","text":"<p>27 Februari 2023</p> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#manage-netdebug-netprint-in-settings","title":"Manage NetDebug / NetPrint in settings","text":"<p>24 Februari 2023</p> <p>NetDebug is called NetPrint in WLEDMM as it is not only used for debut as we have USER_PRINT. It just prints to the network, hence the name.</p> <p>No need to specify ip address and port in platformio.ini and therefor hardcode in bin/esp32 (but can be set to default). Go to Sync Interfaces / Net Print and specify there. Set output to network pressing Net Print in the info tab (default off after reboot value is saved in cfg.json - bug: not always set correctly after reboot - wip).</p> <p></p> <p></p> <p>Bins WLEDMM_0.14.0-b2.19_esp32_4MB_M_debug and WLEDMM_0.14.0-b2.19_esp32_16MB_M_debug have NetPrint enabled by default. To do: check if NetPrint can be enabled in all bins (without performance/network consequences), also when WLED_DEBUG is off to catch Serial output.</p> <p>March 8: All _M and _XL bins have NetPrint enabled by default (but not WLED_DEBUG): User info (using USER_PRINT) can be send to network </p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#2d-ledmaps","title":"2D Ledmaps","text":"<ul> <li>segment names</li> <li>default ledmaps</li> <li>show in segments</li> <li>persistant storage</li> <li>No reboot necessary if upload new ledmaps</li> </ul>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#segment-visualization","title":"Segment visualization","text":"<ul> <li>support mirror, reverse, transpose</li> <li>support grouping and spacing</li> <li>multi segment support</li> </ul>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#2d-setup-basic-and-advanced","title":"2D setup: basic and advanced","text":""},{"location":"moonmodules/release-notes-v0.14.0-b15/#2d-setup-panel-visualization","title":"2D setup: Panel visualization","text":"<ul> <li>Reset segments only bounds, keep effect etc.</li> </ul>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#gradient-random-cycle-palette","title":"Gradient Random cycle palette","text":"<p>The first one will change colors smoothly, the second one will change colors every 5 seconds.</p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#pins","title":"Pins","text":"<ul> <li>default pins -1</li> <li>Analog pins in dropdown</li> <li>D0-D8, RX, TX info in dropdowns</li> <li>Any gpio on 8266</li> </ul>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#audio-reactive-optimizations","title":"Audio reactive optimizations","text":""},{"location":"moonmodules/release-notes-v0.14.0-b15/#generate-presets","title":"Generate presets","text":""},{"location":"moonmodules/release-notes-v0.14.0-b15/#pin-drop-downs-support-read-only-and-reserved-pins","title":"Pin drop downs support read only and reserved pins","text":"<p>January 14, 2023</p> <p></p> <p>For more information see https://mm.kno.wled.ge/usermods/globalpins/ This page is shown if you press here: </p> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#generate-presets-and-playlists","title":"Generate presets and playlists","text":"<p>January 12, 2023</p> <p>Generate presets of all effects and group them together in playlists for 1D or 2D, Volume or FFT, combinations or all</p> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b15/#i2c-and-spi-pins-make-over","title":"I2C and SPI pins make over","text":"<p>Januari 9, 2023</p> <p>We were not happy how currently pins are managed. It raises questions in discord we could not answer so we decided to refactor it. It's not easy as a lot is interconnected but we made the first steps:</p> <ul> <li>Drop down for pin variables (see below)</li> <li>Rebuild the usermods (pins) settings screen so it works the same</li> <li>create _all bin files with a lot of usermods in it so we can test and improve</li> <li>do not reset ui variables if something is wrong (e.g. 4ld/type, enabled)</li> <li>use errorMessage instead and show errormessage in settings ui</li> <li>if global pins are -1, then there is no initialization of spi/i2c if usermods set pins to use global no initialisation</li> <li>HLD_PIN_* variables are used in platformio to specify defaults for global pins, no use of the recent introduced new variables I2CSDAPIN (etc) as causes more confusion, HLD_PIN serve these function and is used instead, </li> <li>HW_PIN_DATASPI and HW_PIN_MOSISPI both existed but is one pin, merged to HW_PIN_MOSISPI as MOSI and MISO is both data</li> <li>i2c_scl (etc) variables are used in usermods without if -1 then HLD_PIN check, i2c_scl (etc) most be proper initialized before it can be used.</li> <li>No hijacking of global vars (giving them a value) in usermods </li> <li>Don't register pins if usermod is not enabled</li> <li>create pinManager.joinWire and use as simplified way in usermods</li> </ul> <p>This will be work in progress the coming weeks to implement in usermods (AudioReactive and 4LD working, others likely working but must be tested)</p> <p>Overview of usermods available in _all bins:</p> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b25/","title":"Release notes v0.14.0-b25","text":"<p>MoonModules v0.14.0-b25, release July 15th 2023</p> <p>This WLED MM release is based on latest stable dev of WLED AC (June 2, 2023). We have also added a few stability patches that arrived in WLED AC after June 2nd.  As WLED AC is undergoing a lot of changes, MoonModules built in a longer delay then normal to keep up with upstream until latest upstream is well tested.</p> <p>Below an overview of major MoonModules specific changes and new features.</p>"},{"location":"moonmodules/release-notes-v0.14.0-b25/#full-bright-preview","title":"Full Bright Preview","text":"<p>7 July 2023</p> <p>By @Softhack007</p> <p>Instead of dimming down, the preview always shows at max brightness - even when the global brightness slider for your LEDs is set to a low value. </p> <p> </p>"},{"location":"moonmodules/release-notes-v0.14.0-b25/#animartrix-usermod-2d-effects","title":"AnimARTrix Usermod - 2D effects","text":"<p>29 Jun 2023</p> <p>By @Netmindz</p> <p>Usermod to allow access to the AnimARTrix 2D effects by @StefanPetrick, all the effect names are prefixed with Y to group them at the bottom of the list. Animation speed can be controled by slider.</p>"},{"location":"moonmodules/release-notes-v0.14.0-b25/#wled-instances","title":"WLED Instances","text":"<p>May 2023</p> <p>Refactor of the Nodes popup</p> <p></p> <ul> <li>Set on/off</li> <li>Show more info of instance</li> <li>DDP all: add all found nodes as Led outputs (see led preferences screen), by this the leds of others nodes as added as leds to your node and you can control them from this one node. Note: Might not scale up to 10's of nodes due to network traffic </li> </ul>"},{"location":"moonmodules/release-notes-v0.14.0-b25/#under-the-hood-speedups-bugfixes-and-improved-stability","title":"Under-the-hood: Speedups, Bugfixes and improved Stability","text":""},{"location":"moonmodules/release-notes-v0.14.0-b25/#effect-core-speedups","title":"Effect core speedups","text":"<p>1 July 2023 (audio fastpath, part 1)</p> <p>Some effects will run up to 60% faster now. A lot of minor speedups to effect core routines were added. Additionally, FastLED color handling code was updated to release 3.6.0.</p> <ul> <li>up to 220 FPS were measured with 160 LEDs per pin; for max speed, use 2-4 LED pins with your fixture (ws2812b), each driving 150-300 LEDs.</li> <li>soundreactive effects were optimized to support high FPS.</li> <li>At high FPS (&gt;100), soundreactive effects seem to \"flow\" with the music now. Try to set the speed slider to 255 in <code>pixelwave</code>, <code>freqmatrix</code> or <code>DJ Light</code>.</li> </ul> <p> </p>"},{"location":"moonmodules/release-notes-v0.14.0-b25/#auto-brightness-limiter-works-again","title":"Auto Brightness Limiter works again","text":"<p>30 June 2023</p> <p>By @Softhack007</p> <p>Auto Brightness Limiter bugfixes (from WLED AC) are included in this release. </p>"},{"location":"moonmodules/release-notes-v0.14.0-b25/#improved-stability","title":"Improved Stability","text":"<p>1 June 2023</p> <p>By @Troy and @Softhack007 and @ewowi</p> <p>WLEDMM internal memory handling was optimized and improved for reliability. Loading of ledmaps was optimized to prevent repeated reading of the same file. As a consequence, large setups (&gt;2500 LEDs) and big ledmaps.json files will work much better. We recommend using an ESP32 board with PSRAM for large setups, as JSON files will be processed in external PSRAM if available (PSRAM  enabled firmware build needed).</p>"},{"location":"moonmodules/release-notes-v0.14.0-b25/#peak-unlimited","title":"Peak unlimited","text":"<p>May 16</p> <p>by @ewowi</p> <p>Instead of scaling down on pixels when having lots of leds we lower the peak frame rate so we have WYPIWYG (what you peak is what you get)</p>"},{"location":"moonmodules/release-notes-v0.14.0-b25/#audio-palette-updates","title":"Audio Palette Updates","text":"<p>14 April 2023</p> <p>By @Netmindz</p> <p>Fix issues with Audio Responsive Hue being single color and add new Audio Responsive Ramp palette. AR Ramp is designed for use with effects like Fire that expect the palette to start with black, then ramp up</p>"},{"location":"moonmodules/release-notes-v0.14.0-b25/#soundpressure","title":"SoundPressure","text":"<p>7 April 2023</p> <p>By @Softhack007</p> <p> </p> <p>In contrast to \"volume\", sound pressure level changes with the real loudness, as measured by your microphone. It will climb when you turn music louder, and fall when you turn volume down. You need an I2S digital microphone for soundpressure. </p> <p>ARTI-FX, and the Waverly and Gravimeter effects already support sound pressure. More effects to come. Currently SoundPressure is not transmitted to networked devices with \"UDP sound sync\".</p>"},{"location":"moonmodules/release-notes-v0.14.0-b25/#dmx-input","title":"DMX Input","text":"<p>6 April 2023</p> <p>By @Netmindz</p> <p>Do you have existing tranditional wired DMX setup and just want to attach you WLED device like any other fixture? Well now you can. Same behaviour as existing DMX over ip (ArtNet / e1.31), but now with the stability and realiability without the need to use Ethernet.</p> <p>Note: only currently on the _v4 builds due the esp_dmx library needing the 2.x ESP32-Arduino platform</p>"},{"location":"moonmodules/release-notes-v0.14.0-b25/#support-for-pixelart-in-arti-fx","title":"Support for pixelArt in ARTI-FX","text":"<p>5 April 2023</p> <p>Idea by @Stiw47</p> <p>ARTI-FX can show multiple frames, each stored as a separate json file in /edit <p>Program can be found here: https://github.com/MoonModules/WLED-Effects/blob/master/ARTIFX/wled/mario.wled</p> <p></p> <p>As ARTIFX does not support strings, jsonToPixels only contains a sequence number, the name of the json files is combination of segment name (that should be called mario), sequence number and \".json\") See https://github.com/MoonModules/WLED-Effects/blob/master/ARTIFX/wled/presets.json for how to add mario in presets </p> <p>And don't forget to upload latest wledv033.json to /edit (https://github.com/MoonModules/WLED-Effects/blob/master/ARTIFX/wled/wledv033.json)"},{"location":"moonmodules/release-notes-v0.14.0-b25/#add-es8388-as-sound-reactive-input-type","title":"Add ES8388 as Sound Reactive Input type","text":"<p>5 April 2023</p> <p>By @Troy and @Netmindz</p> <p></p> <p>Can be found in these boards: LyraT v4.3</p> <p></p>"},{"location":"moonmodules/release-notes-v0.14.0-b25/#git-log","title":"Git Log","text":"<p>git log mdev --pretty=format:\"%h - %ad - %an : %s &amp;b\" --date=format-local:\"%Y-%m-%d\" --since=\"2023-04-02\"</p> <pre><code>c0a0f66a - 2023-04-30 - Frank : trying to revive github ci build for new MCUs (#38) as suggested here:\n* https://github.com/platformio/platform-espressif32/issues/1081#issuecomment-1518601054\n\n62910038 - 2023-04-28 - netmindz : Merge pull request #37 from netmindz/mdev Update FX.cpp\n\nd4bdb303 - 2023-04-24 - netmindz : Update FX.cpp Assign proper attribution of DJLight to Stefan Petrick\n\n  fb3477e5 - 2023-04-21 - Frank : soundreactive effect updated \n* blurz: some visual improvements\n* Matripix: improved color smoothness, Color by frequency (instead of volume), option to use sound pressure\n* pixelwave: improved color selection, use sound energy instead of volume\n* freqwave: some speedups, option to show frequency with \"musical scale\"\n* gravfreq: fixed some math accidents that lead to horrible flickering\n* default setting improved for some effects\n\nd5a7f5dd - 2023-04-21 - Frank : scrolling text bugfix effect was crashing with too long or undefined segment names.\n\n8e9db0ad - 2023-04-21 - Frank : more accurate FPS forESP32 the standard millis() code is very inaccurate in the \"high FPS\" ranges. This replaces it with the esp32 high resolution timer.\n\n9130e4be - 2023-04-21 - Frank : minor optimization of core LED functions \n* use _fast_ integer types in loops - in contrast to \"uint16_t\" etc, the compiler can leave out range/overflow corrections, so it might run faster.\n* fcn_declare.h: revive \"WLED_USE_REAL_MATH\" option, which can be a bit faster on ESP32.\n\n36356743 - 2023-04-21 - Frank : audio effects: allow to run at full speed \n* set the \"speed\" slider to 255, for running at full speed\n* #FPS (framerate) and #POW (ampere) added to scrolling text\n\n00661de7 - 2023-04-21 - Frank : accept up to 250 fps target in LED preferences warning included.\n\n63a597b9 - 2023-04-20 - Frank : pio: same for -S3 ..... \nTool Manager: toolchain-xtensa-esp32s3@8.4.0+2021r2-patch3 has been installed!\nTool Manager: Installing espressif/toolchain-riscv32-esp @ 8.4.0+2021r2-patch3\nError: Could not find the package with 'espressif/toolchain-riscv32-esp @ 8.4.0+2021r2-patch3' requirements for your system 'linux_x86_64'\nError: Process completed with exit code 1.\n\nb35cd214 - 2023-04-20 - Frank : pio: disable -C3 and -S2 builds until github fixes their build toolds \nTool Manager: toolchain-xtensa-esp32s2@8.4.0+2021r2-patch3 has been installed!\nTool Manager: Installing espressif/toolchain-riscv32-esp @ 8.4.0+2021r2-patch3\nError: Could not find the package with 'espressif/toolchain-riscv32-esp @ 8.4.0+2021r2-patch3' requirements for your system 'linux_x86_64'\n\n33a78bef - 2023-04-20 - Frank : a little less buffer for -S2 the last change caused a build error for ESP32-S2: region `dram0_0_seg' overflowed by 5064 bytes\n\n1b3d9a1a - 2023-04-20 - Frank : more JSON buffer for boards with PSRAM allows to load ledmaps with &gt; 15000 positions!\n\nbcbc0fbd - 2023-04-19 - Frank : Update platformio.ini \n* temporarily remove esp32c3dev_4MB_M from nightly builds, as the github action build currently has strange problems with it\n* -D WLED_USE_PSRAM_JSON for ESP32 boards, as using PSRAM for LED Buffers and Segment Buffers causes slow-down\nd90ee766 - 2023-04-19 - Frank : PSRAM: you can have it, and eat it or not eat it *This patch allows to compile with BOARD_HAS_PSRAM, but not set WLED_USE_PSRAM - reserved pins will be protected, and PSRAM usage will be shown in info.\n* if you add `-D WLED_USE_PSRAM_JSON` then PSRAM will be used for some JSON buffers, but not for LEDs and Segments.\n\ne2d3800f - 2023-04-19 - Frank : woraround for spurious crash in serializePalettes the root cause of the crash is not really clear, as the problem seems to occur randomly, mosr frequent with fresh installations.\nThis workaround prevents the array bounds violation, by re-using the last valid  gGradientPalettes entry.\n\na2f15c77 - 2023-04-19 - Frank : WIFI_POWERON_HACK for AP mode reduce TX power - required for C3 mini v1.0.0 (wemos), see https://www.wemos.cc/en/latest/c3/c3_mini_1_0_0.html#about-wifi\n\n0558865c - 2023-04-18 - Troy : Merge pull request #36 from Fonta/patch-1 Fix invalid environment error in PlatformIO\n\n2e118938 - 2023-04-18 - Troy : Merge pull request #35 from troyhacks/DDP-RGBW-Transmit-Fix DDP Transmit RGBW Fix\n\n8d85a524 - 2023-04-17 - Frank : correct some stupid peak detection defaults parameters C1 and C2 control peak detection. Previous defaults (c2=0 !!!) did not make any sense.\n\n3f429439 - 2023-04-17 - Frank : Blurz effect: back to original SR code \nModifications from upstream have made the effect kind of boring non-reactive. So we go back to the original effect.\nHINT: Effect looks best with _segment_ brightness set to max (use _global_ brightness to reduce brightness as you like).\n\n45da3121 - 2023-04-16 - Fonta : Update platformio.ini \n\n6b6c961a - 2023-04-16 - Fonta : Fix invalid environment error in PlatformIO PlatformIO gives error on codm environments\n``Error: Invalid environment name 'codm-controller-0.6'. The name can contain alphanumeric, underscore, and hyphen characters (a-z, 0-9, -, _)``\n\n28c737df - 2023-04-15 - Frank : small fix Serial0 does not exist without ARDUINO_USB_CDC_ON_BOOT\n\n0fd26cc7 - 2023-04-15 - Frank : replace AC WebServer with lost-hope variant temporarily replace the webserver with a   modified one that can also show .wled and .log files under /edit.\n\n2585b785 - 2023-04-15 - Frank : remove duplictate dependancies  (AsyncTCP 1.1.1) \n* moving \"pbolduc/AsyncTCP.git @ 1.2.0\" on top of lib_deps, to prevent that AsyncTCP 1.1.1 is pulled in (due due dependacies from Aircoookie/ESPAsyncWebServer\n* remove duplicate env.lib_deps from -S2 environments\n\nc295c877 - 2023-04-15 - Frank : moving esp_dmx lib into esp32_4MB_V4_S_base the idea is to keep enable flag and library in the same build env.\n\n244a6137 - 2023-04-15 - Frank : esp32_4MB_V4_M: stay below 100% flash usage \n\n322ab9c5 - 2023-04-15 - Frank : arti-fx error handling improvements \n- if log file cannot be created, switch to serial logging\n- fixing a broken format string\n- usermod_arti: avoid to copy more than what fits into the buffer\n\nb7f1373e - 2023-04-14 - TroyHacks : DDP Transmit RGBW Fix \n\n4294f601 - 2023-04-14 - Frank : npm run build \ncc9a19bc - 2023-04-14 - Frank : partial merge of upstream/main \n* leaving out DotStarHspi5MhzMethod, as we are still on NPB 2.6.9 for eth boards\n* leaving out the index.css/index.css changes, as I'm not sure how to merge this.\n@ewoudwijma we need to merge the JS and CSS parts when you are back; I'll stay with our MM version for now.\n\nee23827f - 2023-04-14 - netmindz : Merge pull request #16 from netmindz/audio-palette-updates Audio palette updates\n\ncc25a21b - 2023-04-14 - Will Tatam : Merge branch 'mdev' into audio-palette-updates \n\n05c3e569 - 2023-04-14 - Frank : optional: warn about functions with high stack usage \n\n3e2a6848 - 2023-04-14 - Frank : arti  setup(): attempt to fix memory leak \n- check that programName is not too long (fileNameLength-7 is the limit)\n- try to fix a memory leak, as programText must be free'd in case of error.\n@ewoudwijma please review my changes, I'm not 100% sure I did it right.\n\n10ca7c83 - 2023-04-14 - Frank : enumerateLedmaps: prevent buffer overflow make sure that bounds of char fileName[33] are not exceeded by sprintf.\n\n5f4dd53b - 2023-04-14 - Frank : V4 target: enable warning for variable shadoing \n* pio.ini: add \"-Wshadow=compatible-local\" for V4 targets\n* pio.ini: fix alignment for 8266 build_flags\n* fix one (harmless) case of shadowed vars in MM specific code\n\ndb62153e - 2023-04-13 - Frank : fix for a potential array overrun unguarded sprintf / strcpy are always a risk.\n\n122f54a2 - 2023-04-13 - Frank : prevent heat-up on tiny -C3 boards \n* reduce LED default brightness\n* unset \"disable wifi sleep\" when WLEDMM_WIFI_POWERON_HACK\n\n94a7f562 - 2023-04-13 - Frank : handling of Serial on CDC USB board ... like the typical -C3\n* Replaced a few direct Serial.printf with macros\n* Always check if Serial is connected before printing (CDC sometimes hangs  when trying to send/receive without connection)\n\n0081122f - 2023-04-13 - Frank : buildenv improvement for -C3 \n* IRremoteESP8266 @ ~2.8.2\n* -D WLED_DISABLE_ADALIGHT (as most devices don't have a serial-to-USB chip)\n\na193aabd - 2023-04-13 - Frank : Merge pull request #34 from troyhacks/2023-04-12-Art-Net_Transmit_Repair_Bad_Optimization \n\"Unfixing\" an optimization to the Art-Net header.\nThe local \"buffer\" was shadowing the LED buffer (function parameter), so art-net would only send out headers but no LEDs.\n2e0d1046 - 2023-04-13 - Frank : some cleanups and updates for -C3 * remove duplicate env.lib_deps\n* use NeoPixelBus @ 2.7.3\n* added board_build.flash_mode\n\n0afad594 - 2023-04-13 - Frank : MM style buildenv for seeedxiao -C3 \n\n40e614cb - 2023-04-13 - Frank : ups double platform_packages line removed\n\ne9719900 - 2023-04-13 - Frank : pio: added esp32.platformV4_new = espressif32 @ ~5.2.0 \n\n0ae004ff - 2023-04-13 - Frank : buildenv fix: avoid NeoPixelBus 2.7.4 it seems that NPB 2.7.4 introduces new incompatibilities with WLED, that break gh action builds.\n\ndeb09c28 - 2023-04-13 - TroyHacks : Unmessing an optimization to the header - which caused the header to be sent over and over. \n\n04fa3995 - 2023-04-11 - Frank : soundsim bugfix FFT_MajorPeak simulated value was too small.\n\na1bdb47c - 2023-04-10 - Frank : trying to make sound pressure less boring for line-in \"sound pressure\" for line-in was always close to max - which is expected, because the ADC chip utilize the full 24/16bit sample range.\nThe new calculation leads to some more \"movement\".\n\n25122f98 - 2023-04-10 - Frank : temporary disable DMX input on -C3 and -S2 \n\n8ba43b63 - 2023-04-10 - Frank : Sound pressure: modified correction factors for PDM and analog \n\n61949cfd - 2023-04-10 - Frank : Sound Pressure \n- some optimizations \n- slightly extend input range\n- add correction factors for some sound sources\n- gravimeter: tweaking\n\n822fcf27 - 2023-04-08 - Ewoud : ARTI-FX change .wled.log to .log \n\n79c67122 - 2023-04-08 - Will Tatam : Enable WLED_ENABLE_DMX_INPUT again, now we reference a preditacble tag not branch \n\neb3ad99b - 2023-04-08 - Will Tatam : Use taged version of esp_dmx \n\n343252f6 - 2023-04-08 - Will Tatam : Use taged version of esp_dmx \n\n876b08e3 - 2023-04-08 - Ewoud : Temporary disable WLED_ENABLE_DMX_INPUT in esp32_4MB_V4_S_base \n\nca9bd227 - 2023-04-08 - Ewoud : Merge remote-tracking branch 'upstream/main' into mdev Everything merged except platformio.ini\n4ld has not been merged previously\nUpdate version to 0.14.0-b15.22\n\n212126b0 - 2023-04-07 - Ewoud : esp8266_4MB_M: usermods maches max usermods, add net print,set flashsize \n\na6e2cf0b - 2023-04-07 - Ewoud : ARTI-FX: Fix printing to USER_PRINT (if !logToFile) \n\n4aea3970 - 2023-04-07 - Ewoud : ARTI-FX support 8266 (experimental!!) add soundpressure Add ARTI-FX to esp8266_4MB_M (experimental!)\n\n20a91454 - 2023-04-06 - Ewoud : Post marge: regenerate html_settings \n\n6ef2857d - 2023-04-06 - MoonModules : Merge pull request #28 from netmindz/DMX-Input-esp_dmx Dmx input esp dmx\n\n7ffe25d5 - 2023-04-06 - MoonModules : Merge branch 'mdev' into DMX-Input-esp_dmx \n\n6cce70b2 - 2023-04-06 - Frank : gravimeter and waverly: option to show sound pressure level \n* adjusted gravimeter and waverly effects so that \"Sound Pressure\" can be used instead of volume\n* some improvements to gravimeter effect\n* fixing some over/underflows in gravimeter\n* waverly: option \"No Clouds\" to only show lower part\n\n197e120e - 2023-04-06 - Frank : estimated audio sound pressure \n\nb0907762 - 2023-04-06 - Frank : low-cut audio input filtering \n* 40Hz low-cut and DC blocker filter - will remove any signal offsets and also removes rumbling noise up to 12db\n* DC blocker set as default for all sources (prerequisite for later measuring sound pressure)\nadditional filtering options are in the making :-)\n\n00e9c592 - 2023-04-06 - MoonModules : Update readme.md \n\na77900b0 - 2023-04-06 - MoonModules : Update readme.md \n\n669b81de - 2023-04-06 - MoonModules : Update readme.md \n\n753f5621 - 2023-04-06 - Ewoud : ws sendLiveLedsWs: no skiplines to show large matrices uncompressed \n\n7372d304 - 2023-04-05 - MoonModules : Update FUNDING.yml \n\n64041836 - 2023-04-05 - Ewoud : Merge pull request #30 from troyhacks/ES8388-init-fixes ES8388 init optimizations and fixes\n\n95d6d186 - 2023-04-05 - TroyHacks : ES8388 init optimizations and fixes \n\nd64cefb2 - 2023-04-05 - Will Tatam : Fix invert of tx and rx pins \n\ncae1c004 - 2023-04-05 - Ewoud : ARTIFX add support for pixelart + small changes arti_wled.h:\n\ne4243c4d - 2023-04-05 - Ewoud : Merge pull request #5 from netmindz/ES8388 WiP - ES8388\n\n84f316cd - 2023-04-04 - netmindz : Merge pull request #1 from troyhacks/ES8388-troyhacks Working proof of concept for ES8388\n\n111c8c92 - 2023-04-04 - TroyHacks : Merge branch 'ES8388-troyhacks' of https://github.com/troyhacks/WLED into ES8388-troyhacks \n\nf44f307f - 2023-04-04 - TroyHacks : Comments and typos, init optimization and shortening. \n\n7d32bc5f - 2023-04-04 - Troy : Merge branch 'ES8388' into ES8388-troyhacks \n\na6a1bbab - 2023-04-04 - TroyHacks : Remove platform.ini entry for ES8388 \n\nc38baf90 - 2023-04-04 - TroyHacks : Removing local lib copy \n\nd775f7fb - 2023-04-04 - TroyHacks : Removed reliance on the ES8388 library and made things more in line with similar boards with I2C init. \n\n4997145d - 2023-04-04 - Ewoud : Fastled usermod, add Stefan Petrick effects PolarBasics &amp; CircularBlobs CC BY-NC 3.0 licensed effects only include this usermod only if you accept the terms!\nTherefore not enabled in platformio.ini builds.\n\nbd477624 - 2023-04-04 - TroyHacks : Working proof of concept for ES8388 \n\n03570848 - 2023-04-03 - Will Tatam : Merge branch 'mdev' into ES8388 \n\n760ff836 - 2023-04-03 - Will Tatam : Merge branch 'mdev' into ES8388 \n\nd17a41f7 - 2023-04-02 - Bla\u017e Kristan : Merge pull request #3155 from werkstrom/patch-1 Adjustments to Pixel Art Converter\n\n503f71f0 - 2023-04-02 - Blaz Kristan : Npm run build \n\n329899f4 - 2023-04-02 - Ewoud : ooops \n\n3dd78731 - 2023-04-02 - Ewoud : First b15 daily build: add fastled usermod \n\n9307105b - 2023-04-02 - Henrik : Redone in Patch-1 \n\n27e89151 - 2023-04-02 - Ewoud : Versioning: 0.14.0-b15 (use the .21 extension on future commits) \n\n567daf99 - 2023-04-02 - Henrik : Merge branch 'Aircoookie:main' into patch-1 \n\neead626d - 2023-04-02 - Ewoud : 0.14.0-b15.21 release! \n</code></pre>"},{"location":"moonmodules/release-notes-v0.14.0-b3-daily/","title":"Release notes v0.14.0-b3-daily","text":"<p>tha --- title: Release notes v0.14.0-b3-daily hide:   # - navigation   # - toc</p> <p>Below are the ongoing updates in WLEDMM which has not made it to a release yet (Next release will be v0.14.0-b2)</p>"},{"location":"moonmodules/release-notes-v0.14.0-b3-daily/#some-_s-builds-are-optimized-for-speed","title":"Some <code>_S</code> builds are optimized for speed","text":"<p>July 21st, 2023</p> <p>By @Softhack007</p> <p>Some MoonModules builds are now utilizing compiler option -O2 \"optimize for speed\", instead of -Os \"optimize for size\".</p> <p>As the firmware size grows with this option, only a few <code>_S</code> firmware binaries for esp32 are currently build with this higher optimization level:</p> <ul> <li><code>esp32_4MB_S</code> (flash usage 87.4% --&gt; 98.8%)</li> <li><code>esp32_16MB_V4_S</code> (flash usage 73.3% --&gt; 82.9%)</li> <li><code>esp32_16MB_S</code> (includes animartix)</li> <li><code>esp32S3_8MB_S</code> for -S3 (up to 45% faster than normal build!)</li> </ul> <p>First tests show 20%-35% higher FPS (framerates) in effects!</p> <p>Known issue: USERMOD_ANIMARTRIX aborts with internal compiler error when building with <code>-O2</code>: <pre><code>wled00/../usermods/usermod_v2_animartrix/usermod_v2_animartrix.h: In function 'uint16_t mode_Waves()':\nwled00/../usermods/usermod_v2_animartrix/usermod_v2_animartrix.h:340:1: error: insn does not satisfy its constraints:\n }\n ^\n (insn 811 738 824 24 (set (reg/v:SF 19 f0 [orig:69 result ] [69])\n        (mem/u/c:SF (symbol_ref/u:SI (\"*.LC1575\") [flags 0x2]) [0  S4 A32])) \".pio/libdeps/my_esp32_16MB_V4_S_debug/animartrix/ANIMartRIX.h\":345 47 {movsf_internal}\n     (nil))\n during RTL pass: postreload\n wled00/../usermods/usermod_v2_animartrix/usermod_v2_animartrix.h:340:1: internal compiler error: in extract_constrain_insn, at recog.c:2210\n libbacktrace could not find executable to open\n Please submit a full bug report, with preprocessed source if appropriate. See &lt;https://gcc.gnu.org/bugs/&gt; for instructions.\n</code></pre></p>"},{"location":"moonmodules/release-notes-v0.14.0-b3-daily/#topic","title":"Topic","text":"<p>Date</p> <p>By @Netmindz</p>"},{"location":"moonmodules/what-is-moonmodules/","title":"What is MoonModules","text":""},{"location":"moonmodules/what-is-moonmodules/#what-are-all-these-acronyms","title":"What are all these acronyms?","text":"<p>WLED MM 0.14 (\ud83c\udf1c) = WLED AC 0.14 + Extra features</p> <p>WLED AC 0.14 = (WLED AC 0.13 + WLED SR)(2.0). </p> <p>WLED SR (\ud83c\udfb8) is for the last 2 years maintained mainly by @softhack007 and @ewowi and has been created by the legendary Andrew Tuline (\ud83c\udfb8).</p> <p>WLED AC 0.14 has been made mainly by @Aircoookie , @blazoncek , @softhack007 and @ewowi. </p> <p>WLED MM is mainly maintained by @softhack007 and @ewowi and can be considered similar to what AMG is doing to Mercedes (see amg.wled.me).</p>"},{"location":"moonmodules/what-is-moonmodules/#compatibility","title":"compatibility","text":"<p>WLED MM is compatible with WLED AC (it's running on average 1 day to 1 week behind WLED AC latest build) for all features that can also be found in WLED AC. </p> <p>Consider WLED MM as a possible next version of WLED AC (we submit PR's on a regular basis). </p>"},{"location":"moonmodules/what-is-moonmodules/#why","title":"why?","text":"<p>The reason WLED MM is created is that we have many ideas how to improve WLED AC but we need a \"playground\" to develop and mature those ideas. </p> <p>WLED MM releases and daily builds are made to deploy - and are deployed - on live situations, not test bench only. Many features added to MM came from live situation feedback. Although new builds may have errors, in practice they tend to be better then earlier versions. </p>"},{"location":"moonmodules/what-is-moonmodules/#whats-new","title":"What's new?","text":"<p>Our latest work can be found here: mdev. </p> <p>You can compile it yourself using PlatformIO.ini entry esp32_4MB_max or get a build from Serg74 (daily) or Wladi (periodically). </p> <p>Get latest release here: https://github.com/MoonModules/WLED/releases</p>"},{"location":"moonmodules/what-is-moonmodules/#more-info","title":"More info:","text":"<ul> <li> <p>Release notes v0.14.0-b3-daily</p> </li> <li> <p>Release notes v0.14.0-b25</p> </li> <li> <p>Release notes v0.14.0-b15</p> </li> <li> <p>Release notes v0.14.0-b1</p> </li> <li> <p>Release notes v0.14.0-b0</p> </li> <li> <p>Installing and compiling</p> </li> <li> <p>Fork comparison</p> </li> </ul> <p>WLED AC:</p> <p></p> <p>WLED MM:</p> <p></p> <p>WLED SR:</p> <p></p> <p>The Future ???</p> <p></p>"},{"location":"moonmodules/wip/","title":"Work in Progress","text":"<p>This page is work in progress</p> <p>Check WLED MoonModules Wiki for original content</p> <p>Template text:</p>"},{"location":"moonmodules/wip/#fork-specific-info","title":"Fork specific info","text":""},{"location":"moonmodules/wip/#wled-sr","title":"WLED SR","text":""},{"location":"soundreactive/Line-Input/","title":"I2S ADC for Line-In","text":"<p>If you want the best experience, then Line-In using I2S will give the best quality. As you are getting a clean audio feed, then the squelch value should be set to 1</p> <p>Looking to add line-in with I2S support? You might want to try I2S ADC boards that use one of these chips:  * CirrusLogic WM8782 * CirrusLogic CS5343 * AKM AK5720 (datasheet) * Ti PCM1808 or Ti PCM1802 * ES8388</p> <p>Many I2S ADC boards expect an additional MCLK signal (\"Main Clock\" aka \"System Clock\" aka \"Master Clock\" aka \"Memory Clock\").  MCLK is sometimes labelled SCLK for \"system clock\". For these boards with 4 data pins, use our <code>Generic I2S with MCLK</code> input driver, and connect MCLK pin to GPIO pin 0, 1, or 3 on ESP32.</p>"},{"location":"soundreactive/Line-Input/#pmod-i2s2","title":"Pmod I2S2","text":"<p>  https://digilent.com/reference/pmod/pmodi2s2/start</p>"},{"location":"soundreactive/Line-Input/#_1","title":"Line Input","text":"<p>Buy: AliExpress</p> <ul> <li>Remove jumper from MLCK</li> <li>DIP SWITCH - SLAVE</li> </ul>"},{"location":"soundreactive/Line-Input/#ti-pcm1808","title":"TI PCM1808","text":"<p>Buy: Amazon or AliExpress </p> <p>Top side: Right audio input, Audio Ground, Left audio input. </p> <p>Right side: The I2S connections -</p> <ul> <li>BCK = I2S SCK</li> <li>OUT = I2S SD</li> <li>LRC = I2S WS</li> <li>SCK = I2S MCLK (master clock)</li> <li>Ground</li> <li>3.3v input</li> </ul> <p>Left side: Format, Mode selector 0, Mode selector 1, ground, 3.3v input, and 5v input.</p> <p>In WLED it's \"Generic I2S with Mclk\". You have 3 choices of what MCLK pin you can use - 0, 1, and 3. Pin 0 highly recommended as 1 as 3 may already be in use</p> <p>5v seems to NEED to be connected. You can connect it to 3.3v but it will glitch randomly. Put that pin on 5v for best function. 3.3v and ground are connected to the same pins on the right side, so you just need to connect one of each, on either side. </p> <p>MD1 and MD0 set master/slave modes. It defaults to slave (both pins are internally set to low), which is what you want for WLED. Don't connect these to anything.</p> <p>FMY (format, FMT in the spec sheet - I assume the \"Y\" is a typo on the silkscreen) is a bit more interesting. By default it's pulled low internally, which the docs claim to be \"I2S, 24-bit\" - which will work fine as a default.</p> <p>...however, pulling FMY \"high\" (connected to 3.3v) seems to make everything better in WLED.  According to the spec sheet, this moves the entire 24 bit sequence one pulse earlier (\"left justified\") and the responsiveness seems to be better overall in WLED.  The GEQ visual output is more \"balanced\" with the highs being better represented. The format of the 24 bits is unchanged - both are MSB first - but it seems to be better in WLED when the pin is pulled high.</p>"},{"location":"soundreactive/Line-Input/#es8388","title":"ES8388","text":"<p>This audio chip reqires I2C commands to initialize properly. \"Line-in mode\" has been hard-coded into the initialization and will be used when \"ES8388\" is selected.</p> <p>The on-board microphones are not currently supported - line-in is much better regardless. </p> <ul> <li> <p>ESP32 Lyra-T V4.3 </p> </li> <li> <p>Ai-Thinker ESP32 Audio Kit v2.2  Note: the underside of ESP32 overhang shows ESP32-A1S 2974</p> </li> </ul>"},{"location":"soundreactive/Line-Input/#pin-config","title":"Pin Config","text":"<p>The LyraT v4.3 and some AiThinker v2.2 boards use the following pin config:</p> <ul> <li>Type: ES8388</li> <li>IS2 SD = 35</li> <li>I2S WS = 25</li> <li>I2S SCK = 5</li> <li>I2S MCLK = 0</li> <li>I2C SDA = 18</li> <li>I2C SCL = 23  </li> </ul> <p>Other revisions of the AiThinker v2.2 boards use a chip with the following pins:</p> <p>Note: the underside of ESP32 overhang shows ESP32-A1S B221 and B238 on two boards with this config - the \"B\" or \"B2\" may be hints as to revision. </p> <ul> <li>Type: ES8388</li> <li>IS2 SD = 35</li> <li>I2S WS = 25</li> <li>I2S SCK = 27</li> <li>I2S MCLK = 0</li> <li>I2C SDA = 33</li> <li>I2C SCL = 32  </li> </ul>"},{"location":"soundreactive/Sound-Reactive-Palettes/","title":"Sound Reactive Palettes","text":"<p>WLED has effects that use the audio data to actually control how the effect behaves, but the new Audio Responsive palettes allow you to make any of the effects respond to audio by selecting one of these palettes</p> <p>2 SR palettes: </p> <ul> <li> <p>V: selection of FTT values</p> </li> <li> <p>HSV: Some effects like fire expect the luminosity to rise using HSV</p> </li> </ul>"},{"location":"soundreactive/Sound-Reactive-Palettes/#fork-specific-info","title":"Fork specific info","text":""},{"location":"soundreactive/Sound-Reactive-Palettes/#wled-sr","title":"WLED SR","text":"<p>Implemented - Dev branch only</p>"},{"location":"soundreactive/Sound-Reactive-Palettes/#wled-mm","title":"WLED MM","text":"<p>Released in v0.14.0-b1.13</p>"},{"location":"soundreactive/Sound-Reactive-Palettes/#wled-ac","title":"WLED AC","text":"<p>Not yet implemented</p>"},{"location":"soundreactive/Sound-Settings/","title":"Work in Progress","text":""},{"location":"soundreactive/Sound-Settings/#introduction","title":"Introduction","text":"<p>In order to accommodate a wide range of audio inputs, ambient environments and string lengths, we have added user configurable squelch (noise reduction/suppression) and gain controls on the sound settings page that apply to all sound reactive animations.</p> <p></p> <p></p>"},{"location":"soundreactive/Sound-Settings/#press-reset-key-after-changing-sound-source","title":"Press reset key after changing sound source","text":"<p>After changing the sound source (either GPIO pins or Microphone type), it is important to press the \"reset\" (RST) button on your ESP32 - don't forget to \"save\" first. WLED cannot change the sound input configuration \"on the fly\", due to a known hardware problem of ESP32. See https://github.com/espressif/esp-idf/issues/7442 \"only a hard CPU reset can disconnect the I2S signal from built-in ADC\". </p> <p></p>"},{"location":"soundreactive/Sound-Settings/#analog-input-pins","title":"Analog Input Pins","text":"<p>We typically recommend using GPIO 36, aka VP or ADC1_CH0 for analog input, however the following pins should also work:</p> <p>GPIO 32 =&gt; ADC1_CH4</p> <p>GPIO 33 =&gt; ADC1_CH5</p> <p>GPI\u00a0 34 =&gt; ADC1_CH6</p> <p>GPI\u00a0 35 =&gt; ADC1_CH7</p> <p>GPI\u00a0 36 =&gt; ADC1_CH0, VP</p> <p>GPI\u00a0 37 =&gt; ADC1_CH1</p> <p>GPI\u00a0 38 =&gt; ADC1_CH2</p> <p>GPI\u00a0 39 =&gt; ADC1_CH3, VN</p> <p>Do NOT use any of the pins from ADC2, as they will conflict with the WiFi and with I2S sampling.</p> <p>Remember to press Reset after saving your new analog input configuration.</p> <p></p> <p>We have observed problems when using \"analog buttons\" (potentiometer) together with ADC analog sound input. It seems that different drivers (I2S-ADC for sound, analogRead() for potentiometer) are getting into conflict - more details in the related bug report for espressif software. If you plan to attach a potentiometer to your WLED device, we recommend to use an I2S digital microphone to avoid these problems.</p> <p>More information about analog inputs on our analog microphones page.</p> <p></p>"},{"location":"soundreactive/Sound-Settings/#squelch","title":"Squelch","text":"<p>Adjust this value on the Sound Settings page so that the leds are only activated above a certain 'background noise' level.</p> <p>In order to accommodate a wide range of audio inputs, ambient environments and string lengths, we have added user configurable squelch (noise reduction/suppression) and gain controls on the LED settings page for the volume reactive animations.</p> <p>See also </p> <p>\u21d2 Squelch and Gain</p> <p>\u21d2 Sound setting examples for common microphones</p>"},{"location":"soundreactive/Sound-Settings/#gain","title":"Gain","text":"<p>Line-in signals are typically much lower than that of some of the microphones. Rather than use an auto gain function, you can manually adjust the gain from 1 to 255, which translates to 0.1 up to almost 6.5 gain. That's equivalent to a range of -20dB up to +16dB.</p> <p>In addition, the 'Intensity' and \"input level\" sliders can sometimes adjust an animation to simulate increased gain.</p>"},{"location":"soundreactive/Sound-Settings/#how-to","title":"How To","text":"<p>Here's a method to setup squelch and gain for your SR WLED Device.</p> <ol> <li>Start out with the routine '*Gravimeter' with default sliders in the middle.</li> <li>Go to the sound settings configuration page.</li> <li>Increase gain to a high value, let's say 234 (or higher) and set the squelch to '1', AGC off, then save.</li> <li>Depending on your input, you should now see the led's flashing, even when the wind blows.</li> <li>In a quiet environment, increase and occasionally save the \"squelch\" incrementally until the led's are no longer flashing.</li> <li>Once that's done, set \"gain\" to 40. Make noise appropriate to your 'noisy' environment and number of led's. Then adjust/save the gain so that the led's are responding appropriately.</li> <li>Note that some of the animations allow further sensitivity adjustment with the 'Intensity' setting.</li> <li>Check out the 'Sound Reactive Animations' page to see what controls are available for each animation.</li> </ol>"},{"location":"soundreactive/Sound-Settings/#voltage-fluctuation","title":"Voltage Fluctuation","text":"<p>From faulty microphones to flaky wiring, to WiFi related issues, particularly in AP mode, getting reliable and spike free sound sampling with WLED and in particular analog sampling has been a challenge. Digital microphones such as the INMP441, the ICS-43434 provide the best results.</p>"},{"location":"soundreactive/Sound-Settings/#i2s-digital-input","title":"I2S Digital Input","text":"<p>Currently the following I2S options are available:</p> <p></p> <p>Some more information can be found on our I2S digital microphones page.</p> <p>to be extended soon</p>"},{"location":"soundreactive/Sound-Settings/#i2s-line-in","title":"I2S Line-in","text":"<p>There are solutions available for line-in via I2S. For example, boards/shields with \"es7243\" chip should work already (we have a special driver for these), and the \"es8388\" used in some of the AudioDevKit boards. Please check our Line-Input page for more information. </p>"},{"location":"soundreactive/Sound-Settings/#agc-improved-autonomous-gain-control","title":"AGC - improved Autonomous Gain Control","text":"<p>We have recently improved the AGC (automatic gain control) algorithm in WLED-SR. It's not enabled by default, however we encourage you to give it a try - all sound reactive effects now support AGC, including 2D and frequency-reactive effects. The only prerequisite for using AGC is that you first adjust \"Squelch\" to define 'silence' (ambient noise level) in your environment - see previous section.</p> <p></p> <p>AGC will automatically perform sound input amplification, based on current sound loudness.  For example, if you play music and then increase the speaker volume, WLED-SR will adjust internal gain factors to follow your music. Forget about manually changing \"gain\" settings. Just relax and let WLED-SR do it autonomously.</p> <p>Currently WLED-SR offers four different AGC presets that can be selected in sound settings: * Off    - AGC off. WLED will strictly use the Gain value from sound input settings, without any adjustments. * Normal - AGC tries to smoothly follow changes in sound input volume. Recommended as a balanced option for general use. * Vivid  - AGC will quickly adjust to changes in sound input volume. Recommended in case you want \"more blinken from your LEDs\". * Lazy   - AGC will take some more time before internal gain is adjusted. Recommended for GEQ effects, or when listening to music that features strong \"dynamics\".</p>"},{"location":"soundreactive/Sound-Settings/#sync","title":"Sync","text":"<p>It is possible to fit a mic or line-in connection to a single WLED device and then send the results of the audio processing to other WLED devices on the same network. Just set the device with the input to Send and the other devices to Receive</p> <p>NOTE: if you see issues with delay or no data at all, you may se better performance if you disable Wi-Fi Multimedia (WMM) Mode QoS on your wifi router</p> <p>to be extended soon</p>"},{"location":"soundreactive/introduction/","title":"Sound Reactive Introduction","text":"<p>In this section you will find everything related to sound for versions &gt;= 0.14.</p> <p>Aim is to migrate content in Sound Reactive (&lt;=0.13) step by step to here.</p>"},{"location":"soundreactive/introduction/#fork-specific-info","title":"Fork specific info","text":""},{"location":"soundreactive/introduction/#wled-sr","title":"WLED SR","text":""},{"location":"soundreactive/sync/","title":"Sound Sync","text":"<p>If you have more than one device or wish to use Line Input but your audio source is not right next where your LEDs are, then Audio Sync is the feature you need, no need for multiple mics or long cables. Sound Sync is different from direct LEDs control using protocols like E1.31, DMX, DDP or AdaLight.</p> <p>For the WLED instance that you wish to be the source, simply set the Sync mode in the Audio Reactive module to Send and then use Recieve on all the WLED instances you wish to use the data</p> <p>You might have a setup something like this or just a simple wired line-in rather than Bluetooth or Chromecast</p> <p></p> <p>UDP Sound Sync is a feature to synchronize (share) the sound input of a 'master' device with one or more 'slave' devices. </p> <p>UDP Sound Sync does not sync the actual animations, but rather transmits summary audio sampling information to several devices that still run their own animations locally. In a nutshell, it means that several devices can share a single audio source.</p>"},{"location":"soundreactive/sync/#setup","title":"Setup","text":"<p>Before configuring UDP Sound Sync, make sure you have gone into the WiFi Preferences and clicked on 'Disable WiFi sleep' at the bottom of the page. It has caused us innumerable problems in the past.</p> <p>In order to configure UDP sound sync, the \u2018master\u2019 needs to be an ESP32 configured as normal, but with Sync Mode set to Send</p> <p>For devices without an audio input, Audio Reactive must be enabled but with the Sync Mode set to Receive. Make sure the UDP port is the same on all devices.</p> <p>In order to change the UDP Sync Mode (Disabled/Transmit/Receive), you need to power-cycle the ESP32.</p>"},{"location":"soundreactive/sync/#technical","title":"Technical","text":"<p>When an ESP32 is configured for audio transmission, it will connect to a UDP Multicast address, and begin sending a single UDP Multicast packet containing the data used to generate sound-reactive animations out to any other devices that are configured to receive on the same network.  The following information is transmitted:</p>"},{"location":"soundreactive/sync/#v1-format-used-in-sr-wled-up-to-013x","title":"V1 format, used in SR WLED up to 0.13.x","text":"<pre><code>#define UDP_SYNC_HEADER \"00001\"\nstruct audioSyncPacket {\nchar header[6] = UDP_SYNC_HEADER;\nuint8_t myVals[32];     //  32 Bytes\nint sampleAgc;          //  04 Bytes\nint sampleRaw;          //  04 Bytes\nfloat sampleAvg;        //  04 Bytes\nbool samplePeak;        //  01 Bytes\nuint8_t fftResult[16];  //  16 Bytes - FFT results, one byte per GEQ channel\ndouble FFT_Magnitude;   //  08 Bytes\ndouble FFT_MajorPeak;   //  08 Bytes\n};\n</code></pre> <p>UDP_SYNC_HEADER is a versioning number that's defined in audio_reactive.h</p>"},{"location":"soundreactive/sync/#v2-format-wled-version-0140-including-moonmodules-fork","title":"V2 Format - WLED version &gt;= 0.14.0 (including MoonModules fork)","text":"<pre><code>#define UDP_SYNC_HEADER_V2 \"00002\"\n// new \"V2\" AC 0.14.0 audiosync struct - 40 Bytes\nstruct audioSyncPacket_v2 {\nchar    header[6] = UDP_SYNC_HEADER_V2; // 06 bytes, last byte is '\\0' as string terminator.\nfloat   sampleRaw;      //  04 Bytes  - either \"sampleRaw\" or \"rawSampleAgc\" depending on soundAgc setting\nfloat   sampleSmth;     //  04 Bytes  - either \"sampleAvg\" or \"sampleAgc\" depending on soundAgc setting\nuint8_t samplePeak;     //  01 Bytes  - 0 no peak; &gt;=1 peak detected. In future, this will also provide peak Magnitude\nuint8_t reserved1;      //  01 Bytes  - reserved for future extensions like loudness\nuint8_t fftResult[16];  //  16 Bytes  - FFT results, one byte per GEQ channel\nfloat  FFT_Magnitude;   //  04 Bytes  - magnitude of strongest peak in FFT\nfloat  FFT_MajorPeak;   //  04 Bytes  - frequency of strongest peak in FFT\n};\n</code></pre> <p>The V2 format expects that AGC is performed by the sender, so there is no need to transmit \"AGC\" and \"non-AGC\" samples separately. To save bandwidth, the <code>myvals[]</code> array was removed, and all numbers are either <code>float</code> or <code>uint8_t</code>.</p> <p>SR-WLED 0.13.3 still sends out V1 format, however it is able to receive and decode V2 format, too.</p>"},{"location":"soundreactive/sync/#what-else","title":"What else ?","text":"<p>You might want to take a look at this library, which allows to send and receive WLED Audio Sync data independent from WLED.</p> <p>When configured to receive audio data from another device, the receiver will disable any onboard microphone sampling and FFT processing, in favor of audio data received from the network.  Any time a UDP Multicast packet is received from a transmitter, it will be treated as a discrete microphone sample and stored in memory the same way it would be if it were a local microphone.</p> <ul> <li>The UDP \u00a0Multicast\u00a0 IP is <code>239.0.0.1</code>, and the default UDP port is <code>11988</code>.</li> <li>UDP port can be changed in WLED config pages, for example to have several groups of devices by assigning different UDP ports to each group.</li> <li>UDP multicast can sometimes have issues with some Wifi routers, if you have issues, please try with a different Wifi</li> </ul> <p>UDP Sound sync brought to you by @spedione on Discord.</p>"},{"location":"usermods/4LineDisplay/","title":"Usermod Four line display","text":""},{"location":"usermods/4LineDisplay/#i2c-4-line-display-usermod","title":"I2C 4 Line Display Usermod","text":"<p>First, thanks to the authors of the ssd11306_i2c_oled_u8g2 mod.</p> <p>Provides a four line display using either 128x32 or 128x64 OLED displays. It can operate independently, but starts to provide a relatively complete on-device UI when paired with the  Rotary Encoder UI usermod. I strongly encourage you to use  them together.</p> <p>See the pair of usermods in action</p>"},{"location":"usermods/4LineDisplay/#installation","title":"Installation","text":"<p>Copy and update the example <code>platformio_override.ini.sample</code>  from the Rotary Encoder UI usermode folder to the root directory of your particular build. This file should be placed in the same directory as <code>platformio.ini</code>.</p>"},{"location":"usermods/4LineDisplay/#define-your-options","title":"Define Your Options","text":"<ul> <li><code>USERMOD_FOUR_LINE_DISPLAY</code>  - define this to have this mod included wled00\\usermods_list.cpp - also tells Rotary Encoder usermod, if installed, the display is available</li> <li><code>FLD_PIN_SCL</code>                - The display SCL pin, defaults to 5</li> <li><code>FLD_PIN_SDA</code>                - The display SDA pin, defaults to 4</li> </ul> <p>All of the parameters can be configured via the Usermods settings page, inluding GPIO pins.</p>"},{"location":"usermods/4LineDisplay/#platformio-requirements","title":"PlatformIO requirements","text":"<p>This usermod requires the <code>U8g2</code> and <code>Wire</code> libraries. See the  <code>platformio_override.ini.sample</code> found in the Rotary Encoder UI usermod folder for how to include these using <code>platformio_override.ini</code>.</p>"},{"location":"usermods/4LineDisplay/#configuration","title":"Configuration","text":"<ul> <li><code>enabled</code> - enable/disable usermod</li> <li><code>pin</code> - GPIO pins used for display; I2C displays use Clk &amp; Data; SPI displays can use SCK, MOSI, CS, DC &amp; RST</li> <li><code>type</code> - display type in numeric format<ul> <li>1 = I2C SSD1306 128x32</li> <li>2 = I2C SH1106 128x32</li> <li>3 = I2C SSD1306 128x64 (4 double-height lines)</li> <li>4 = I2C SSD1305 128x32</li> <li>5 = I2C SSD1305 128x64 (4 double-height lines)</li> <li>6 = SPI SSD1306 128x32</li> <li>7 = SPI SSD1306 128x64 (4 double-height lines)</li> </ul> </li> <li><code>contrast</code> - set display contrast (higher contrast may reduce display lifetime)</li> <li><code>refreshRateSec</code> - display refresh time in seconds</li> <li><code>screenTimeOutSec</code> - screen saver time-out in seconds</li> <li><code>flip</code> - flip/rotate display 180\u00b0</li> <li><code>sleepMode</code> - enable/disable screen saver</li> <li><code>clockMode</code> - enable/disable clock display in screen saver mode</li> <li><code>i2c-freq-kHz</code> - I2C clock frequency in kHz (may help reduce dropped frames, range: 400-3400)</li> </ul>"},{"location":"usermods/4LineDisplay/#change-log","title":"Change Log","text":"<p>2021-02 * First public release</p> <p>2021-04 * Adaptation for runtime configuration.</p> <p>2021-11 * Added configuration option description.</p>"},{"location":"usermods/4LineDisplay/#i2c-4-line-display-usermod-alt","title":"I2C 4 Line Display Usermod ALT","text":"<p>Thank you to the authors of the original version of these usermods. It would not have been possible without them! \"usermod_v2_four_line_display\" \"usermod_v2_rotary_encoder_ui\"</p> <p>The core of these usermods are a copy of the originals. The main changes are to the FourLineDisplay usermod. The display usermod UI has been completely changed.</p> <p>The changes made to the RotaryEncoder usermod were made to support the new UI in the display usermod.  Without the display it, functions identical to the original. The original \"usermod_v2_auto_save\" will not work with the display just yet.</p> <p>Press the encoder to cycle through the options:     Brightness     Speed     Intensity     Palette     Effect     Main Color (only if display is used)     *Saturation (only if display is used)</p> <p>Press and hold the encoder to display Network Info     if AP is active, it will display AP, SSID and password</p> <p>Also shows if the timer is enabled</p> <p>See the pair of usermods in action</p>"},{"location":"usermods/4LineDisplay/#installation_1","title":"Installation","text":"<p>Please refer to the original <code>usermod_v2_rotary_encoder_ui</code> readme for the main instructions Then to activate this alternative usermod add <code>#define USE_ALT_DISPLAY</code> to the <code>usermods_list.cpp</code> file,                                         or add <code>-D USE_ALT_DISPLAY</code> to the original <code>platformio_override.ini.sample</code> file</p>"},{"location":"usermods/4LineDisplay/#platformio-requirements_1","title":"PlatformIO requirements","text":"<p>Note: the Four Line Display usermod requires the libraries <code>U8g2</code> and <code>Wire</code>.</p>"},{"location":"usermods/4LineDisplay/#change-log_1","title":"Change Log","text":"<p>2021-10 * First public release</p>"},{"location":"usermods/4LineDisplay/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/4LineDisplay/#wled-ac","title":"WLED AC","text":""},{"location":"usermods/4LineDisplay/#wled-sr","title":"WLED SR","text":""},{"location":"usermods/Autosave/","title":"Usermod Auto save","text":""},{"location":"usermods/Autosave/#auto-save","title":"Auto Save","text":"<p>v2 Usermod to automatically save settings to preset number AUTOSAVE_PRESET_NUM after a change to any of: * brightness * effect speed * effect intensity * mode (effect) * palette</p> <p>but it will wait for AUTOSAVE_AFTER_SEC seconds, a \"settle\" period in case there are other changes (any change will extend the \"settle\" period).</p> <p>It will additionally load preset AUTOSAVE_PRESET_NUM at startup during the first <code>loop()</code>.</p> <p>AutoSaveUsermod is standalone, but if FourLineDisplayUsermod is installed, it will notify the user of the saved changes.</p> <p>Note: WLED doesn't respect the brightness of the preset being auto loaded, so the AutoSaveUsermod will set the AUTOSAVE_PRESET_NUM preset in the first loop, so brightness IS honored. This means WLED will effectively ignore Default brightness and Apply N preset at boot when the AutoSaveUsermod is installed.</p>"},{"location":"usermods/Autosave/#installation","title":"Installation","text":"<p>Copy and update the example <code>platformio_override.ini.sample</code>  from the Rotary Encoder UI usermode folder to the root directory of your particular build. This file should be placed in the same directory as <code>platformio.ini</code>.</p>"},{"location":"usermods/Autosave/#define-your-options","title":"Define Your Options","text":"<ul> <li><code>USERMOD_AUTO_SAVE</code>           - define this to have this usermod included wled00\\usermods_list.cpp</li> <li><code>AUTOSAVE_AFTER_SEC</code>          - define the delay time after the settings auto-saving routine should be executed</li> <li><code>AUTOSAVE_PRESET_NUM</code>         - define the preset number used by autosave usermod</li> <li><code>USERMOD_AUTO_SAVE_ON_BOOT</code>   - define if autosave should be enabled on boot</li> <li><code>USERMOD_FOUR_LINE_DISPLAY</code>   - define this to have this the Four Line Display mod included wled00\\usermods_list.cpp                                     also tells this usermod that the display is available                                     (see the Four Line Display usermod <code>readme.md</code> for more details)</li> </ul> <p>Example to add in platformio_override:   -D USERMOD_AUTO_SAVE   -D AUTOSAVE_AFTER_SEC=10   -D AUTOSAVE_PRESET_NUM=100   -D USERMOD_AUTO_SAVE_ON_BOOT=true</p> <p>You can also configure auto-save parameters using Usermods settings page.</p>"},{"location":"usermods/Autosave/#platformio-requirements","title":"PlatformIO requirements","text":"<p>No special requirements.</p> <p>Note: the Four Line Display usermod requires the libraries <code>U8g2</code> and <code>Wire</code>.</p>"},{"location":"usermods/Autosave/#change-log","title":"Change Log","text":"<p>2021-02 * First public release 2021-04 * Adaptation for runtime configuration.</p>"},{"location":"usermods/Autosave/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/Autosave/#wled-sr","title":"WLED SR","text":""},{"location":"usermods/BH1750/","title":"Usermod BH1750","text":""},{"location":"usermods/BH1750/#bh1750-usermod","title":"BH1750 usermod","text":"<p>This usermod will read from an ambient light sensor like the BH1750. The luminance is displayed in both the Info section of the web UI, as well as published to the <code>/luminance</code> MQTT topic if enabled.</p>"},{"location":"usermods/BH1750/#dependencies","title":"Dependencies","text":"<ul> <li>Libraries</li> <li><code>claws/BH1750 @^1.2.0</code></li> <li>This must be added under <code>lib_deps</code> in your <code>platformio.ini</code> (or <code>platformio_override.ini</code>).</li> <li>Data is published over MQTT - make sure you've enabled the MQTT sync interface.</li> </ul>"},{"location":"usermods/BH1750/#compiliation","title":"Compiliation","text":"<p>To enable, compile with <code>USERMOD_BH1750</code> defined  (e.g. in <code>platformio_override.ini</code>) <pre><code>[env:usermod_BH1750_d1_mini]\nextends = env:d1_mini\nbuild_flags =\n${common.build_flags_esp8266}\n-D USERMOD_BH1750\nlib_deps = ${esp8266.lib_deps}\nclaws/BH1750 @ ^1.2.0\n</code></pre></p>"},{"location":"usermods/BH1750/#configuration-options","title":"Configuration Options","text":"<p>The following settings can be set at compile-time but are configurable on the usermod menu (except First Measurement time): *   <code>USERMOD_BH1750_MAX_MEASUREMENT_INTERVAL</code> - the max number of milliseconds between measurements, defaults to 10000ms *   <code>USERMOD_BH1750_MIN_MEASUREMENT_INTERVAL</code> - the min number of milliseconds between measurements, defaults to 500ms *   <code>USERMOD_BH1750_OFFSET_VALUE</code> - the offset value to report on, defaults to 1 *   <code>USERMOD_BH1750_FIRST_MEASUREMENT_AT</code> - the number of milliseconds after boot to take first measurement, defaults to 10000 ms</p> <p>In addition, the Usermod screen allows you to: - enable/disable the usermod - Enable Home Assistant Discovery of usermod - Configure the SCL/SDA pins</p>"},{"location":"usermods/BH1750/#api","title":"API","text":"<p>The following method is available to interact with the usermod from other code modules: - <code>getIlluminance</code> read the brightness from the sensor</p>"},{"location":"usermods/BH1750/#change-log","title":"Change Log","text":"<p>Jul 2022 - Added Home Assistant Discovery - Implemented PinManager to register pins - Made pins configurable in usermod menu - Added API call to read luminance from other modules - Enhanced info-screen outputs - Updated <code>readme.md</code></p>"},{"location":"usermods/BH1750/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/BH1750/#wled-ac","title":"WLED AC","text":""},{"location":"usermods/BH1750/#wled-sr","title":"WLED SR","text":""},{"location":"usermods/BME280/","title":"Usermod BME280","text":""},{"location":"usermods/BME280/#usermod-bme280","title":"Usermod BME280","text":"<p>This Usermod is designed to read a <code>BME280</code> or <code>BMP280</code> sensor and output the following: - Temperature - Humidity (<code>BME280</code> only) - Pressure - Heat Index (<code>BME280</code> only) - Dew Point (<code>BME280</code> only)</p> <p>Configuration is performed via the Usermod menu.  There are no parameters to set in code!  The following settings can be configured in the Usermod Menu: - Temperature Decimals (number of decimal places to output) - Humidity Decimals - Pressure Decimals - Temperature Interval (how many seconds between temperature and humidity measurements) - Pressure Interval - Publish Always (turn off to only publish changes, on to publish whether or not value changed) - Use Celsius (turn off to use Fahrenheit) - Home Assistant Discovery (turn on to sent MQTT Discovery entries for Home Assistant) - SCL/SDA GPIO Pins</p> <p>Dependencies - Libraries   - <code>BME280@~3.0.0</code> (by finitespace)   - <code>Wire</code>   - These must be added under <code>lib_deps</code> in your <code>platform.ini</code> (or <code>platform_override.ini</code>). - Data is published over MQTT - make sure you've enabled the MQTT sync interface. - This usermod also writes to serial (GPIO1 on ESP8266). Please make sure nothing else is listening to the serial TX pin or your board will get confused by log messages!</p> <p>In addition to outputting via MQTT, you can read the values from the Info Screen on the dashboard page of the device's web interface.</p> <p>Methods also exist to read the read/calculated values from other WLED modules through code. - <code>getTemperatureC()</code> - <code>getTemperatureF()</code> - <code>getHumidity()</code> - <code>getPressure()</code> - <code>getDewPointC()</code> - <code>getDewPointF()</code> - <code>getHeatIndexC()</code> - <code>getHeatIndexF()</code></p>"},{"location":"usermods/BME280/#compiling","title":"Compiling","text":"<p>To enable, compile with <code>USERMOD_BME280</code> defined  (e.g. in <code>platformio_override.ini</code>) <pre><code>[env:usermod_bme280_d1_mini]\nextends = env:d1_mini\nbuild_flags =\n${common.build_flags_esp8266}\n-D USERMOD_BME280\nlib_deps = ${esp8266.lib_deps}\nBME280@~3.0.0\nWire\n</code></pre></p>"},{"location":"usermods/BME280/#mqtt","title":"MQTT","text":"<p>MQTT topics are as follows (<code>&lt;deviceTopic&gt;</code> is set in MQTT section of Sync Setup menu): Measurement type | MQTT topic --- | --- Temperature | <code>&lt;deviceTopic&gt;/temperature</code> Humidity | <code>&lt;deviceTopic&gt;/humidity</code> Pressure | <code>&lt;deviceTopic&gt;/pressure</code> Heat index | <code>&lt;deviceTopic&gt;/heat_index</code> Dew point | <code>&lt;deviceTopic&gt;/dew_point</code></p> <p>If you are using Home Assistant, and <code>Home Assistant Discovery</code> is turned on, Home Assistant should automatically detect a new device, provided you have the MQTT integration installed.  The device is separate from the main WLED device and will contain sensors for Pressure, Humidity, Temperature, Dew Point and Heat Index.</p>"},{"location":"usermods/BME280/#revision-history","title":"Revision History","text":"<p>Jul 2022 - Added Home Assistant Discovery - Added API interface to output data - Removed compile-time variables - Added usermod menu interface - Added value outputs to info screen - Updated <code>readme.md</code> - Registered usermod - Implemented PinManager for usermod - Implemented reallocation of pins without reboot</p> <p>Apr 2021 - Added <code>Publish Always</code> option</p> <p>Dec 2020 - Ported to V2 Usermod format - Customizable <code>measure intervals</code> - Customizable number of <code>decimal places</code> in published sensor values - Pressure measured in units of hPa instead of Pa - Calculation of heat index (apparent temperature) and dew point - <code>16x oversampling</code> of sensor during measurement - Values only published if they are different from the previous value</p>"},{"location":"usermods/BME280/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/BME280/#wled-ac","title":"WLED AC","text":""},{"location":"usermods/BME280/#wled-sr","title":"WLED SR","text":""},{"location":"usermods/Battery/","title":"Usermod Battery","text":""},{"location":"usermods/Battery/#welcome-to-the-battery-usermod","title":"Welcome to the battery usermod! \ud83d\udd0b","text":"<p>Enables battery level monitoring of your project.</p> <p>For this to work, the positive side of the (18650) battery must be connected to pin <code>A0</code> of the d1 mini/esp8266 with a 100k Ohm resistor (see Useful Links).</p> <p>If you have an ESP32 board, connect the positive side of the battery to ADC1 (GPIO32 - GPIO39)</p> <p></p>"},{"location":"usermods/Battery/#features","title":"\u2699\ufe0f Features","text":"<ul> <li>\ud83d\udcaf Displays current battery voltage </li> <li>\ud83d\udea5 Displays battery level</li> <li>\ud83d\udeab Auto-off with configurable Threshold</li> <li>\ud83d\udea8 Low power indicator with many configuration posibilities</li> </ul>"},{"location":"usermods/Battery/#installation","title":"\ud83c\udf88 Installation","text":"<p>define <code>USERMOD_BATTERY</code> in <code>wled00/my_config.h</code></p>"},{"location":"usermods/Battery/#example-wiring","title":"Example wiring","text":""},{"location":"usermods/Battery/#define-your-options","title":"Define Your Options","text":"Name Unit Description <code>USERMOD_BATTERY</code> define this (in <code>my_config.h</code>) to have this usermod included wled00\\usermods_list.cpp <code>USERMOD_BATTERY_USE_LIPO</code> define this (in <code>my_config.h</code>) if you use LiPo rechargeables (1S) <code>USERMOD_BATTERY_MEASUREMENT_PIN</code> defaults to A0 on ESP8266 and GPIO35 on ESP32 <code>USERMOD_BATTERY_MEASUREMENT_INTERVAL</code> ms battery check interval. defaults to 30 seconds <code>USERMOD_BATTERY_MIN_VOLTAGE</code> v minimum battery voltage. default is 2.6 (18650 battery standard) <code>USERMOD_BATTERY_MAX_VOLTAGE</code> v maximum battery voltage. default is 4.2 (18650 battery standard) <code>USERMOD_BATTERY_TOTAL_CAPACITY</code> mAh the capacity of all cells in parralel sumed up <code>USERMOD_BATTERY_CALIBRATION</code> offset / calibration number, fine tune the measured voltage by the microcontroller Auto-Off --- --- <code>USERMOD_BATTERY_AUTO_OFF_ENABLED</code> true/false enables auto-off <code>USERMOD_BATTERY_AUTO_OFF_THRESHOLD</code> % (0-100) when this threshold is reached master power turns off Low-Power-Indicator --- --- <code>USERMOD_BATTERY_LOW_POWER_INDICATOR_ENABLED</code> true/false enables low power indication <code>USERMOD_BATTERY_LOW_POWER_INDICATOR_PRESET</code> preset id when low power is detected then use this preset to indicate low power <code>USERMOD_BATTERY_LOW_POWER_INDICATOR_THRESHOLD</code> % (0-100) when this threshold is reached low power gets indicated <code>USERMOD_BATTERY_LOW_POWER_INDICATOR_DURATION</code> seconds for this long the configured preset is played <p>All parameters can be configured at runtime via the Usermods settings page.</p>"},{"location":"usermods/Battery/#important","title":"\u26a0\ufe0f Important","text":"<ul> <li>Make sure you know your battery specifications! All batteries are NOT the same!</li> <li>Example:</li> </ul> Your battery specification table Options you can define Capacity 3500mAh 12,5 Wh Minimum capacity 3350mAh 11,9 Wh Rated voltage 3.6V - 3.7V Charging end voltage 4,2V \u00b1 0,05 <code>USERMOD_BATTERY_MAX_VOLTAGE</code> Discharge voltage 2,5V <code>USERMOD_BATTERY_MIN_VOLTAGE</code> Max. discharge current (constant) 10A (10000mA) max. charging current 1.7A (1700mA) ... ... ... .. .. .. <p>Specification from:  Molicel INR18650-M35A, 3500mAh 10A Lithium-ion battery, 3.6V - 3.7V</p>"},{"location":"usermods/Battery/#useful-links","title":"\ud83c\udf10 Useful Links","text":"<ul> <li>https://lazyzero.de/elektronik/esp8266/wemos_d1_mini_a0/start</li> <li>https://arduinodiy.wordpress.com/2016/12/25/monitoring-lipo-battery-voltage-with-wemos-d1-minibattery-shield-and-thingspeak/</li> </ul>"},{"location":"usermods/Battery/#change-log","title":"\ud83d\udcdd Change Log","text":"<p>2023-01-04</p> <ul> <li>basic support for LiPo rechargeable batteries ( <code>-D USERMOD_BATTERY_USE_LIPO</code>)</li> <li>improved support for esp32 (read calibrated voltage)</li> <li>corrected config saving (measurement pin, and battery min/max were lost)</li> <li>various bugfixes</li> </ul> <p>2022-12-25</p> <ul> <li>added \"auto-off\" feature</li> <li>added \"low-power-indication\" feature</li> <li>added \"calibration/offset\" field to configuration page</li> <li>added getter and setter, so that user usermods could interact with this one</li> <li>update readme (added new options, made it markdownlint compliant)</li> </ul> <p>2021-09-02</p> <ul> <li>added \"Battery voltage\" to info</li> <li>added circuit diagram to readme</li> <li>added MQTT support, sending battery voltage</li> <li>minor fixes</li> </ul> <p>2021-08-15</p> <ul> <li>changed <code>USERMOD_BATTERY_MIN_VOLTAGE</code> to 2.6 volt as default for 18650 batteries</li> <li>Updated readme, added specification table</li> </ul> <p>2021-08-10</p> <ul> <li>Created</li> </ul>"},{"location":"usermods/Battery/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/Battery/#wled-sr","title":"WLED SR","text":""},{"location":"usermods/MultiRelay/","title":"Usermod Temperature","text":""},{"location":"usermods/MultiRelay/#multi-relay","title":"Multi Relay","text":"<p>This usermod-v2 modification allows the connection of multiple relays, each with individual delay and on/off mode.</p>"},{"location":"usermods/MultiRelay/#http-api","title":"HTTP API","text":"<p>All responses are returned in JSON format. </p> <ul> <li>Status Request: <code>http://[device-ip]/relays</code></li> <li>Switch Command: <code>http://[device-ip]/relays?switch=1,0,1,1</code></li> </ul> <p>The number of values behind the switch parameter must correspond to the number of relays. The value 1 switches the relay on, 0 switches it off. </p> <ul> <li>Toggle Command: <code>http://[device-ip]/relays?toggle=1,0,1,1</code></li> </ul> <p>The number of values behind the parameter switch must correspond to the number of relays. The value 1 causes the relay to toggle, 0 leaves its state unchanged.</p> <p>Examples: 1. total of 4 relays, relay 2 will be toggled: <code>http://[device-ip]/relays?toggle=0,1,0,0</code> 2. total of 3 relays, relay 1&amp;3 will be switched on: <code>http://[device-ip]/relays?switch=1,0,1</code></p>"},{"location":"usermods/MultiRelay/#json-api","title":"JSON API","text":"<p>You can toggle the relay state by sending the following JSON object to: <code>http://[device-ip]/json</code></p> <p>Switch relay 0 on: <code>{\"MultiRelay\":{\"relay\":0,\"on\":true}}</code></p> <p>Switch relay 3 and 4 off: <code>{\"MultiRelay\":[{\"relay\":2,\"on\":false},{\"relay\":3,\"on\":false}]}</code></p>"},{"location":"usermods/MultiRelay/#mqtt-api","title":"MQTT API","text":"<ul> <li><code>wled</code>/deviceMAC/<code>relay</code>/<code>0</code>/<code>command</code> <code>on</code>|<code>off</code>|<code>toggle</code></li> <li><code>wled</code>/deviceMAC/<code>relay</code>/<code>1</code>/<code>command</code> <code>on</code>|<code>off</code>|<code>toggle</code></li> </ul> <p>When a relay is switched, a message is published:</p> <ul> <li><code>wled</code>/deviceMAC/<code>relay</code>/<code>0</code> <code>on</code>|<code>off</code></li> </ul>"},{"location":"usermods/MultiRelay/#usermod-installation","title":"Usermod installation","text":"<ol> <li>Register the usermod by adding <code>#include \"../usermods/multi_relay/usermod_multi_relay.h\"</code> at the top and <code>usermods.add(new MultiRelay());</code> at the bottom of <code>usermods_list.cpp</code>. or</li> <li>Use <code>#define USERMOD_MULTI_RELAY</code> in wled.h or <code>-D USERMOD_MULTI_RELAY</code> in your platformio.ini</li> </ol> <p>You can override the default maximum number of relays (which is 4) by defining MULTI_RELAY_MAX_RELAYS.</p> <p>Example usermods_list.cpp:</p> <pre><code>#include \"wled.h\"\n/*\n * Register your v2 usermods here!\n *   (for v1 usermods using just usermod.cpp, you can ignore this file)\n */\n\n/*\n * Add/uncomment your usermod filename here (and once more below)\n * || || ||\n * \\/ \\/ \\/\n */\n//#include \"usermod_v2_example.h\"\n//#include \"usermod_temperature.h\"\n#include \"../usermods/usermod_multi_relay.h\"\n\nvoid registerUsermods()\n{\n/*\n   * Add your usermod class name here\n   * || || ||\n   * \\/ \\/ \\/\n   */\n//usermods.add(new MyExampleUsermod());\n//usermods.add(new UsermodTemperature());\nusermods.add(new MultiRelay());\n\n}\n</code></pre>"},{"location":"usermods/MultiRelay/#configuration","title":"Configuration","text":"<p>Usermod can be configured via the Usermods settings page.</p> <ul> <li><code>enabled</code> - enable/disable usermod</li> <li><code>pin</code> - ESP GPIO pin the relay is connected to (can be configured at compile time <code>-D MULTI_RELAY_PINS=xx,xx,...</code>)</li> <li><code>delay-s</code> - delay in seconds after on/off command is received</li> <li><code>active-high</code> - assign high/low activation of relay (can be used to reverse relay states)</li> <li><code>external</code> - if enabled, WLED does not control relay, it can only be triggered by an external command (MQTT, HTTP, JSON or button)</li> <li><code>button</code> - button (from LED Settings) that controls this relay</li> <li><code>broadcast</code>- time in seconds between MQTT relay-state broadcasts</li> <li><code>HA-discovery</code>- enable Home Assistant auto discovery</li> </ul> <p>If there is no MultiRelay section, just save current configuration and re-open Usermods settings page. </p> <p>Have fun - @blazoncek</p>"},{"location":"usermods/MultiRelay/#change-log","title":"Change log","text":"<p>2021-04 * First implementation.</p> <p>2021-11 * Added information about dynamic configuration options * Added button support.</p>"},{"location":"usermods/MultiRelay/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/MultiRelay/#wled-sr","title":"WLED SR","text":""},{"location":"usermods/PIRsensorSwitch/","title":"Usermod PIRsensorSwitch","text":""},{"location":"usermods/PIRsensorSwitch/#pir-sensor-switch","title":"PIR sensor switch","text":"<p>This usermod-v2 modification allows the connection of a PIR sensor to switch on the LED strip when motion is detected. The switch-off occurs ten minutes after no more motion is detected.</p> <p>Story:</p> <p>I use the PIR Sensor to automatically turn on the WLED analog clock in my home office room when I am there. The LED strip is switched using a relay to keep the power consumption low when it is switched off.</p>"},{"location":"usermods/PIRsensorSwitch/#web-interface","title":"Web interface","text":"<p>The info page in the web interface shows the remaining time of the off timer. Usermod can also be temporarily disbled/enabled from the info page by clicking PIR button.</p>"},{"location":"usermods/PIRsensorSwitch/#sensor-connection","title":"Sensor connection","text":"<p>My setup uses an HC-SR501 or HC-SR602 sensor, an HC-SR505 should also work.</p> <p>The usermod uses GPIO13 (D1 mini pin D7) by default for the sensor signal, but can be changed in the Usermod settings page. This example page describes how to connect the sensor.</p> <p>Use the potentiometers on the sensor to set the time delay to the minimum and the sensitivity to about half, or slightly above. You can also use usermod's off timer instead of sensor's. In such case rotate the potentiometer to its shortest time possible (or use SR602 which lacks such potentiometer).</p>"},{"location":"usermods/PIRsensorSwitch/#usermod-installation","title":"Usermod installation","text":"<p>NOTE: Usermod has been included in master branch of WLED so it can be compiled in directly just by defining <code>-D USERMOD_PIRSWITCH</code> and optionaly <code>-D PIR_SENSOR_PIN=16</code> to override default pin. You can also change the default off time by adding <code>-D PIR_SENSOR_OFF_SEC=30</code>.</p>"},{"location":"usermods/PIRsensorSwitch/#api-to-enabledisable-the-pir-sensor-from-outside-for-example-from-another-usermod","title":"API to enable/disable the PIR sensor from outside. For example from another usermod:","text":"<p>To query or change the PIR sensor state the methods <code>bool PIRsensorEnabled()</code> and <code>void EnablePIRsensor(bool enable)</code> are available.</p> <p>When the PIR sensor state changes an MQTT message is broadcasted with topic <code>wled/deviceMAC/motion</code> and message <code>on</code> or <code>off</code>. Usermod can also be configured to send just the MQTT message but not change WLED state using settings page as well as responding to motion only at night (assuming NTP and lattitude/longitude are set to determine sunrise/sunset times).</p>"},{"location":"usermods/PIRsensorSwitch/#there-are-two-options-to-get-access-to-the-usermod-instance","title":"There are two options to get access to the usermod instance:","text":"<ol> <li>Include <code>usermod_PIR_sensor_switch.h</code> before you include other usermods in `usermods_list.cpp'</li> </ol> <p>or</p> <ol> <li>Use <code>#include \"usermod_PIR_sensor_switch.h\"</code> at the top of the <code>usermod.h</code> where you need it.</li> </ol> <p>Example usermod.h : <pre><code>#include \"wled.h\"\n\n#include \"usermod_PIR_sensor_switch.h\"\n\nclass MyUsermod : public Usermod {\n//...\n\nvoid togglePIRSensor() {\n#ifdef USERMOD_PIR_SENSOR_SWITCH\nPIRsensorSwitch *PIRsensor = (PIRsensorSwitch::*) usermods.lookup(USERMOD_ID_PIRSWITCH);\nif (PIRsensor != nullptr) {\nPIRsensor-&gt;EnablePIRsensor(!PIRsensor-&gt;PIRsensorEnabled());\n}\n#endif\n}\n//...\n};\n</code></pre></p>"},{"location":"usermods/PIRsensorSwitch/#configuration-options","title":"Configuration options","text":"<p>Usermod can be configured via the Usermods settings page.</p> <ul> <li><code>PIRenabled</code> - enable/disable usermod</li> <li><code>pin</code> - dynamically change GPIO pin where PIR sensor is attached to ESP</li> <li><code>PIRoffSec</code> - number of seconds after PIR sensor deactivates when usermod triggers Off preset (or turns WLED off)</li> <li><code>on-preset</code> - preset triggered when PIR activates (if this is 0 it will just turn WLED on)</li> <li><code>off-preset</code> - preset triggered when PIR deactivates (if this is 0 it will just turn WLED off)</li> <li><code>nighttime-only</code> - enable triggering only between sunset and sunrise (you will need to set up NTP, Lat &amp; Lon in Time &amp; Macro settings)</li> <li><code>mqtt-only</code> - send only MQTT messages, do not interact with WLED</li> <li><code>off-only</code> - only trigger presets or turn WLED on/off if WLED is not already on (displaying effect)</li> <li><code>notifications</code> - enable or disable sending notifications to other WLED instances using Sync button</li> </ul> <p>Have fun - @gegu &amp; @blazoncek</p>"},{"location":"usermods/PIRsensorSwitch/#change-log","title":"Change log","text":"<p>2021-04 * Adaptation for runtime configuration.</p> <p>2021-11 * Added information about dynamic configuration options * Added option to temporary enable/disble usermod from WLED UI (Info dialog)</p> <p>2022-11 * Added compile time option for off timer. * Added Home Assistant autodiscovery MQTT broadcast. * Updated info on compiling.</p>"},{"location":"usermods/PIRsensorSwitch/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/PIRsensorSwitch/#wled-sr","title":"WLED SR","text":""},{"location":"usermods/Rotary-Encoder/","title":"Usermod Rotary Encoder","text":""},{"location":"usermods/Rotary-Encoder/#rotary-encoder-ui-usermod","title":"Rotary Encoder UI Usermod","text":"<p>First, thanks to the authors of other Rotary Encoder usermods.</p> <p>This usermod starts to provide a relatively complete on-device UI when paired with the Four Line Display usermod. I strongly encourage you to try them together.</p> <p>See the pair of usermods in action</p>"},{"location":"usermods/Rotary-Encoder/#installation","title":"Installation","text":"<p>Copy and update the example <code>platformio_override.ini.sample</code> to the root directory of your particular build. This file should be placed in the same directory as <code>platformio.ini</code>.</p>"},{"location":"usermods/Rotary-Encoder/#define-your-options","title":"Define Your Options","text":"<ul> <li><code>USERMOD_ROTARY_ENCODER_UI</code>       - define this to have this user mod included wled00\\usermods_list.cpp</li> <li><code>USERMOD_ROTARY_ENCODER_GPIO</code>     - define the GPIO function (INPUT, INPUT_PULLUP, etc...)</li> <li><code>USERMOD_FOUR_LINE_DISPLAY</code>       - define this to have this the Four Line Display mod included wled00\\usermods_list.cpp                                         also tells this usermod that the display is available                                         (see the Four Line Display usermod <code>readme.md</code> for more details)</li> <li><code>ENCODER_DT_PIN</code>                  \u00a0\u00a0- defaults to 12</li> <li><code>ENCODER_CLK_PIN</code>                 - defaults to 14</li> <li><code>ENCODER_SW_PIN</code>                  \u00a0\u00a0- defaults to 13</li> <li><code>USERMOD_ROTARY_ENCODER_GPIO</code>     - GPIO functionality:                                         <code>INPUT_PULLUP</code> to use internal pull-up                                         <code>INPUT</code> to use pull-up on the PCB</li> </ul>"},{"location":"usermods/Rotary-Encoder/#platformio-requirements","title":"PlatformIO requirements","text":"<p>No special requirements.</p> <p>Note: the Four Line Display usermod requires the libraries <code>U8g2</code> and <code>Wire</code>.</p>"},{"location":"usermods/Rotary-Encoder/#change-log","title":"Change Log","text":"<p>2021-02 * First public release</p>"},{"location":"usermods/Rotary-Encoder/#rotary-encoder-ui-usermod-alt","title":"Rotary Encoder UI Usermod ALT","text":"<p>Thank you to the authors of the original version of these usermods. It would not have been possible without them! \"usermod_v2_four_line_display\" \"usermod_v2_rotary_encoder_ui\"</p> <p>The core of these usermods are a copy of the originals. The main changes are to the FourLineDisplay usermod. The display usermod UI has been completely changed.</p> <p>The changes made to the RotaryEncoder usermod were made to support the new UI in the display usermod.  Without the display, it functions identical to the original. The original \"usermod_v2_auto_save\" will not work with the display just yet.</p> <p>Press the encoder to cycle through the options:     Brightness     Speed     Intensity     Palette     Effect     Main Color (only if display is used)     *Saturation (only if display is used)</p> <p>Press and hold the encoder to display Network Info     if AP is active, it will display the AP, SSID and Password</p> <p>Also shows if the timer is enabled.</p> <p>See the pair of usermods in action</p>"},{"location":"usermods/Rotary-Encoder/#installation_1","title":"Installation","text":"<p>Please refer to the original <code>usermod_v2_rotary_encoder_ui</code> readme for the main instructions Then to activate this alternative usermod add <code>#define USE_ALT_DISPLAY</code> to the <code>usermods_list.cpp</code> file,                                         or add <code>-D USE_ALT_DISPLAY</code> to the original <code>platformio_override.ini.sample</code> file</p>"},{"location":"usermods/Rotary-Encoder/#platformio-requirements_1","title":"PlatformIO requirements","text":"<p>Note: the Four Line Display usermod requires the libraries <code>U8g2</code> and <code>Wire</code>.</p>"},{"location":"usermods/Rotary-Encoder/#change-log_1","title":"Change Log","text":"<p>2021-10 * First public release</p>"},{"location":"usermods/Rotary-Encoder/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/Rotary-Encoder/#wled-sr","title":"WLED SR","text":""},{"location":"usermods/Temperature/","title":"Usermod Temperature","text":""},{"location":"usermods/Temperature/#temperature-usermod","title":"Temperature usermod","text":"<p>Based on the excellent <code>QuinLED_Dig_Uno_Temp_MQTT</code> usermod by srg74 and 400killer! Reads an attached DS18B20 temperature sensor (as available on the QuinLED Dig-Uno) Temperature is displayed in both the Info section of the web UI as well as published to the <code>/temperature</code> MQTT topic, if enabled. May be expanded with support for different sensor types in the future.</p> <p>If temperature sensor is not detected during boot, this usermod will be disabled.</p>"},{"location":"usermods/Temperature/#installation","title":"Installation","text":"<p>Copy the example <code>platformio_override.ini</code> to the root directory.  This file should be placed in the same directory as <code>platformio.ini</code>.</p>"},{"location":"usermods/Temperature/#define-your-options","title":"Define Your Options","text":"<ul> <li><code>USERMOD_DALLASTEMPERATURE</code>                      - enables this user mod wled00/usermods_list.cpp</li> <li><code>USERMOD_DALLASTEMPERATURE_FIRST_MEASUREMENT_AT</code> - number of milliseconds after boot to take first measurement, defaults to 20000 ms</li> </ul> <p>All parameters can be configured at runtime via the Usermods settings page, including pin, temperature in degrees Celsius or Farenheit and measurement interval.</p>"},{"location":"usermods/Temperature/#project-link","title":"Project link","text":"<ul> <li>QuinLED-Dig-Uno - Project link</li> <li>Srg74-WLED-Wemos-shield - another great DIY WLED board</li> </ul>"},{"location":"usermods/Temperature/#platformio-requirements","title":"PlatformIO requirements","text":"<p>If you are using <code>platformio_override.ini</code>, you should be able to refresh the task list and see your custom task, for example <code>env:d1_mini_usermod_dallas_temperature_C</code>.</p> <p>If you are not using <code>platformio_override.ini</code>, you might have to uncomment <code>OneWire@~2.3.5 under</code> <code>[common]</code> section in <code>platformio.ini</code>:</p> <pre><code># platformio.ini\n...\n[platformio]\n...\n; default_envs = esp07\ndefault_envs = d1_mini\n...\n[common]\n...\nlib_deps =\n...\n#For Dallas sensor uncomment following line\nOneWire@~2.3.5\n...\n</code></pre>"},{"location":"usermods/Temperature/#change-log","title":"Change Log","text":"<p>2020-09-12  * Changed to use async non-blocking implementation * Do not report erroneous low temperatures to MQTT * Disable plugin if temperature sensor not detected * Report the number of seconds until the first read in the info screen instead of sensor error 2021-04 * Adaptation for runtime configuration.</p>"},{"location":"usermods/Temperature/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/Temperature/#wled-sr","title":"WLED SR","text":""},{"location":"usermods/Weather/","title":"Weather usermod","text":"<p>This page is work in progress</p> <p>\ud83c\udf1c</p>"},{"location":"usermods/Weather/#introduction","title":"Introduction","text":"<p>The weather usermod shows the temperature of your location from now to the coming days in bars on a 2D matrix display</p> <p> +   = </p>"},{"location":"usermods/Weather/#settings","title":"Settings","text":""},{"location":"usermods/Weather/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/Weather/#wled-sr","title":"WLED SR","text":"<p>Not supported</p>"},{"location":"usermods/Weather/#wled-ac","title":"WLED AC","text":"<p>Not supported</p>"},{"location":"usermods/mpu6050-IMU/","title":"Usermod PU-6050","text":""},{"location":"usermods/mpu6050-IMU/#mpu-6050-six-axis-gyro-accelerometer-driver","title":"MPU-6050 Six-Axis (Gyro + Accelerometer) Driver","text":"<p>v2 of this usermod enables connection of a MPU-6050 IMU sensor to work with effects controlled by the orientation or motion of the WLED Device.</p> <p>The MPU6050 has a built in \"Digital Motion Processor\" which does the \"heavy lifting\" integrating the gyro and accelerometer measurements to get potentially more useful gravity vector and orientation output.</p> <p>It is fairly straightforward to comment out variables being read from the device if they're not needed. Saves CPU/Memory/Bandwidth.</p> <p>Story:</p> <p>As a memento to a long trip I was on, I built an icosahedron globe. I put lights inside to indicate cities I travelled to.</p> <p>I wanted to integrate an IMU to allow either on-board, or off-board effects that would react to the globes orientation. See the blog post on building it https://www.robopenguins.com/icosahedron-travel-globe/ or a video demo https://youtu.be/zYjybxHBsHM .</p>"},{"location":"usermods/mpu6050-IMU/#adding-dependencies","title":"Adding Dependencies","text":"<p>I2Cdev and MPU6050 must be installed.</p> <p>To install them, add ElectronicCats/MPU6050 @ 0.6.0 to lib_deps in the platformio.ini file.</p> <p>For example:</p> <pre><code>lib_compat_mode = soft\nlib_deps =\n    FastLED@3.3.2\n    NeoPixelBus@2.5.7\n    ESPAsyncTCP@1.2.0\n    ESPAsyncUDP@697c75a025\n    AsyncTCP@1.0.3\n    Esp Async WebServer@1.2.0\n    IRremoteESP8266@2.7.3\n    ElectronicCats/MPU6050 @ 0.6.0\n</code></pre>"},{"location":"usermods/mpu6050-IMU/#wiring","title":"Wiring","text":"<p>The connections needed to the MPU6050 are as follows: <pre><code>  VCC     VU (5V USB)   Not available on all boards so use 3.3V if needed.\n  GND     G             Ground\n  SCL     D1 (GPIO05)   I2C clock\n  SDA     D2 (GPIO04)   I2C data\n  XDA     not connected\n  XCL     not connected\n  AD0     not connected\n  INT     D8 (GPIO15)   Interrupt pin\n</code></pre></p> <p>You could probably modify the code not to need an interrupt, but I used the setup directly from the example.</p>"},{"location":"usermods/mpu6050-IMU/#json-api","title":"JSON API","text":"<p>This code adds: <pre><code>\"u\":{\n\"IMU\":{\n\"Quat\":        [w, x, y, z],\n\"Euler\":       [psi, theta, phi],\n\"Gyro\":        [x, y, z],\n\"Accel\":       [x, y, z],\n\"RealAccel\":   [x, y, z],\n\"WorldAccel\":  [x, y, z],\n\"Gravity\":     [x, y, z],\n\"Orientation\": [yaw, pitch, roll]\n}\n}\n</code></pre> to the info object</p>"},{"location":"usermods/mpu6050-IMU/#usermod-installation","title":"Usermod installation","text":"<ol> <li>Register the usermod by adding <code>#include \"usermod_mpu6050_imu.h\"</code> in the top and <code>registerUsermod(new MPU6050Driver());</code> in the bottom of <code>usermods_list.cpp</code>.</li> </ol> <p>Example usermods_list.cpp:</p> <pre><code>#include \"wled.h\"\n\n#ifdef USERMOD_MPU6050_IMU\n#include \"../usermods/mpu6050_imu/usermod_mpu6050_imu.h\"\n#endif\n\n#ifdef USERMOD_MPU6050_IMU\nusermods.add(new MPU6050Driver());\n#endif\n</code></pre>"},{"location":"usermods/mpu6050-IMU/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/mpu6050-IMU/#wled-sr","title":"WLED SR","text":""},{"location":"usermods/mpu6050-IMU/#wled-mm","title":"WLED MM","text":"<p>Repaired / Updated in WLED MM (AC uses old unmaintained library)</p>"},{"location":"usermods/pinmanager/","title":"Usermod global pins","text":"<p>This page is work in progress</p> <p>\ud83c\udf1c</p>"},{"location":"usermods/pinmanager/#i2c-and-spi","title":"I2C and SPI","text":"<p>WLED MM has implemented a more intuitive way of dealing with i2c and spi pins accross usermods. Main changes:</p> <ul> <li>Do not reset ui variables if something is wrong (e.g. 4ld/type, enabled)</li> <li>Use errorMessage instead and show errormessage in settings ui</li> <li>If global pins are -1/undefined, then there is no initialization of spi/i2c in usermods using global pins</li> <li>HW_PIN_* variables are used in platformio to specify defaults for global pins, HW_PIN variables not used in usermods, there only global pin variabes are used</li> <li>HW_PIN_DATASPI and HW_PIN_MOSISPI both existed but is one pin, merged to HW_PIN_MOSISPI as MOSI and MISO is both data</li> <li>i2c_scl (etc) variables are used in usermods without if -1 then HW_PIN check, i2c_scl (etc) most be proper initialized before it can be used.</li> <li>No hijacking of global vars (giving them a value) in usermods</li> <li>Don't register pins if usermod is not enabled</li> </ul>"},{"location":"usermods/pinmanager/#pin-dropdowns","title":"Pin dropdowns","text":"<p>ESP32  \u00a0ESP32-S3  \u00a0ESP32-S2    ESP32-C3   \u00a0ESP8266 </p> <p>Nr of pins and functionality is depending on the board chosen (esp8266, esp32, esp32-c2, esp32-c3, esps32-s3)</p> <ul> <li>First option is undefined or use global (global pin)</li> <li>\ud83d\udd34 pin used by other usermod / global pins, cannot be selected</li> <li>\ud83d\udfe0 read only pin: will be disabled for signals which write</li> <li>\ud83d\udfe3 reserved pin: cannot be selected</li> <li>\u237c pin defined by board (e.g. default I2C on esp32 is 21/22)</li> <li>\u238c pin defined by bin / platformio entry</li> </ul>"},{"location":"usermods/pinmanager/#pin-allocation","title":"Pin allocation","text":"<ul> <li>8266: default I2C pins for most esp8266 variants are SDA=4 and SCL=5 (and one i2c instance only). So you can have 0 or 1 I2C bus.</li> <li>esp32: has two \"I2C hardware units\" that can attach to any pin.  So you could have 0 or 1, or 2 I2C buses.</li> <li>currently WLED only uses \"i2c unit 0\" on esp32. So in reality you can have 0 or 1 I2C bus.</li> <li>WLED does not support \"software I2C\" on esp32 - that's a common misunderstanding because people see they can freely chose pins on esp32.</li> <li>once the I2C bus pins are set, all usermods have to use these pins for I2C. Changing I2C pins requires a reboot.</li> <li> <p>four-line-display is an exception, because the driver library has its own \"software I2C\" - slow, but can always be used with any availeable pin.</p> </li> <li> <p>on both esp32 and 8266, you can decide to not use I2C, and use pins for something else. For example (on 8266), attach some buttons or rotary encoder to gpio 4+5. </p> </li> <li>similar for SPI - if you want SPI, the pins are fixed on 8266. If you don't need SPI, the pins can be used for something else.</li> <li>on esp32 its a bit more complicated even, because the fastest SPI modes are only possible on certains pins. But still if people don't want SPI, the pins can be used for something different.</li> </ul>"},{"location":"usermods/pinmanager/#serial-pin-overview","title":"Serial pin overview","text":"<p>After booting WLED MM an overview of allocated pins and possible conflicts is send to Serial output:</p> <p></p>"},{"location":"usermods/pinmanager/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/pinmanager/#wled-sr","title":"WLED SR","text":"<p>Pin drop downs not supported</p>"},{"location":"usermods/pinmanager/#wled-ac","title":"WLED AC","text":"<p>Pin drop downs not supported</p>"},{"location":"usermods/staircase/","title":"Usermod staircase","text":""},{"location":"usermods/staircase/#usermod-animated-staircase","title":"Usermod Animated Staircase","text":"<p>This usermod makes your staircase look cool by illuminating it with an animation. It uses PIR or ultrasonic sensors at the top and bottom of your stairs to:</p> <ul> <li>Light up the steps in the direction you're walking.</li> <li>Switch off the steps after you, in the direction of the last detected movement.</li> <li>Always switch on when one of the sensors detects movement, even if an effect   is still running. It can gracefully handle multiple people on the stairs.</li> </ul> <p>The Animated Staircase can be controlled by the WLED API. Change settings such as speed, on/off time and distance by sending an HTTP request, see below.</p>"},{"location":"usermods/staircase/#wled-integration","title":"WLED integration","text":"<p>To include this usermod in your WLED setup, you have to be able to compile WLED from source.</p> <p>Before compiling, you have to make the following modifications:</p> <p>Edit <code>usermods_list.cpp</code>: 1. Open <code>wled00/usermods_list.cpp</code> 2. add <code>#include \"../usermods/Animated_Staircase/Animated_Staircase.h\"</code> to the top of the file 3. add <code>usermods.add(new Animated_Staircase());</code> to the end of the <code>void registerUsermods()</code> function.</p> <p>You can configure usermod using the Usermods settings page. Please enter GPIO pins for PIR or ultrasonic sensors (trigger and echo). If you use PIR sensor enter -1 for echo pin. Maximum distance for ultrasonic sensor can be configured as the time needed for an echo (see below).</p>"},{"location":"usermods/staircase/#hardware-installation","title":"Hardware installation","text":"<ol> <li>Attach the LED strip to each step of the stairs.</li> <li>Connect the ESP8266 pin D4 or ESP32 pin D2 to the first LED data pin at the bottom step.</li> <li>Connect the data-out pin at the end of each strip per step to the data-in pin on the     next step, creating one large virtual LED strip.</li> <li>Mount sensors of choice at the bottom and top of the stairs and connect them to the ESP.</li> <li>To make sure all LEDs get enough power and have your staircase lighted evenly, power each    step from one side, using at least AWG14 or 2.5mm^2 cable. Don't connect them serial as you    do for the datacable!</li> </ol> <p>You may need to use 10k pull-down resistors on the selected PIR pins, depending on the sensor.</p>"},{"location":"usermods/staircase/#wled-configuration","title":"WLED configuration","text":"<ol> <li>In the WLED UI, confgure a segment for each step. The lowest step of the stairs is the     lowest segment id. </li> <li>Save your segments into a preset. </li> <li>Ideally, add the preset in the config &gt; LED setup menu to the \"apply     preset n at boot\" setting.</li> </ol>"},{"location":"usermods/staircase/#changing-behavior-through-api","title":"Changing behavior through API","text":"<p>The Staircase settings can be changed through the WLED JSON api.</p> <p>NOTE: We are using curl to send HTTP POSTs to the WLED API. If you're using Windows and want to use the curl commands, replace the <code>\\</code> with a <code>^</code> or remove them and put everything on one line.</p> Setting Description Default enabled Enable or disable the usermod true bottom-sensor Manually trigger a down to up animation via API false top-sensor Manually trigger an up to down animation via API false <p>To read the current settings, open a browser to <code>http://xxx.xxx.xxx.xxx/json/state</code> (use your WLED  device IP address). The device will respond with a json object containing all WLED settings.  The staircase settings and sensor states are inside the WLED \"state\" element:</p> <pre><code>{\n\"state\": {\n\"staircase\": {\n\"enabled\": true,\n\"bottom-sensor\": false,\n\"top-sensor\": false\n},\n}\n</code></pre>"},{"location":"usermods/staircase/#enabledisable-the-usermod","title":"Enable/disable the usermod","text":"<p>By disabling the usermod you will be able to keep the LED's on, independent from the sensor activity. This enables you to play with the lights without the usermod switching them on or off.</p> <p>To disable the usermod:</p> <pre><code>curl -X POST -H \"Content-Type: application/json\" \\\n-d {\"staircase\":{\"enabled\":false}} \\\nxxx.xxx.xxx.xxx/json/state\n</code></pre> <p>To enable the usermod again, use <code>\"enabled\":true</code>.</p> <p>Alternatively you can use Usermod Settings page where you can change other parameters as well.</p>"},{"location":"usermods/staircase/#changing-animation-parameters-and-detection-range-of-the-ultrasonic-hc-sr04-sensor","title":"Changing animation parameters and detection range of the ultrasonic HC-SR04 sensor","text":"<p>Using Usermod Settings page you can define different usermod parameters, includng sensor pins, delay between segment activation etc.</p> <p>When an ultrasonic sensor is enabled you can enter maximum detection distance in centimeters separately for top and bottom sensors.</p> <p>Please note: using an HC-SR04 sensor, particularly when detecting echos at longer distances creates delays in the WLED software, might introduce timing hiccups in your animation or a less responsive web interface. It is therefore advised to keep the detection distance as short as possible.</p>"},{"location":"usermods/staircase/#animation-triggering-through-the-api","title":"Animation triggering through the API","text":"<p>In addition to activation by one of the stair sensors, you can also trigger the animation manually via the API. To simulate triggering the bottom sensor, use:</p> <pre><code>curl -X POST -H \"Content-Type: application/json\" \\\n-d '{\"staircase\":{\"bottom-sensor\":true}}' \\\nxxx.xxx.xxx.xxx/json/state\n</code></pre> <p>Likewise, to trigger the top sensor:</p> <p><pre><code>curl -X POST -H \"Content-Type: application/json\" \\\n-d '{\"staircase\":{\"top-sensor\":true}}' \\\nxxx.xxx.xxx.xxx/json/state\n</code></pre> MQTT You can publish a message with either <code>up</code> or <code>down</code> on topic <code>/swipe</code> to trigger animation. You can also use <code>on</code> or <code>off</code> for enabling or disabling the usermod.</p> <p>Have fun with this usermod. www.rolfje.com</p> <p>Modifications @blazoncek</p>"},{"location":"usermods/staircase/#change-log","title":"Change log","text":"<p>2021-04 * Adaptation for runtime configuration.</p>"},{"location":"usermods/staircase/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/staircase/#wled-sr","title":"WLED SR","text":""},{"location":"usermods/wip/","title":"Work in Progress","text":"<p>This page is work in progress</p> <p>Check WLED Atuline Wiki for original content</p> <p>Template text:</p>"},{"location":"usermods/wip/#fork-specific-info","title":"Fork specific info","text":""},{"location":"usermods/wip/#wled-sr","title":"WLED SR","text":""}]}