{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to StarMod","text":""},{"location":"#welcome-to-starmod","title":"Welcome to StarMod","text":"<p>StarMod is for freeRTOS (the underlying operating system of ESP32) what Windows is for MSDos: a layer on top of it what makes programming applications easier. The layer consists of modules: everything is a module. </p> <p>StarMod consists of multiple github repositories:</p> <ul> <li>StarBase is the upstream repository containing generic functionality. This works right out of the box. StarBase can be forked to build custom networked applications for microcontrollers.</li> <li>StarLeds is a fork from StarBase includes the parts required to control Leds. StarBase itself can work without including the Led code.</li> <li>Star???? Everybody can fork StarBase and add new functionality. </li> </ul> <p>StarMod will integrate with major IOT/network devices and applications \ud83d\udea7.</p> <p>StarBase System modules:</p> <ul> <li>Print: Print to different targets (Serial, UI, file, net)</li> <li>Files: File Manager, upload files</li> <li>Model: Datamodel in json, stored to file, used in ui and network comms</li> <li>Network: Wifi </li> <li>Web: Web server</li> <li>UI: UI Server</li> <li>System: Show and manage ESP32 system, OTA updates</li> </ul> <p>User Modules</p> <ul> <li>E131/DMX support</li> <li>Home Assistant (planned)</li> <li>...</li> </ul> <p>Build apps on top of this by forking StarBase</p> <ul> <li>Led apps (StarLeds)</li> </ul> <p></p> <ul> <li>IO control apps</li> <li>IOT apps </li> <li>Controlling your fishtank</li> <li>DMX controller</li> <li>Any app</li> </ul> <p>See this for more info on StarMod: StarMod \ud83d\udcab.pdf</p> <p>By MoonModules</p> <p>StarLeds inspired by WLED MM</p> <p>Disclaimer:</p> <p>Using this software is the users responsibility as it is not bug free. Therefore contributors of this repo can not be held reliable for anything including but not limited to spontaneous combustion of the entire led strip, the house and the inevitable heat death of the universe</p> <p>GPL V3 License:</p> <p>You may copy, distribute and modify the software as long as you track changes/dates in source files. Any modifications to or software including (via compiler) GPL-licensed code must also be made available under the GPL along with build &amp; install instructions (tldrlegal)</p> <p>Join the Discord server to discuss everything about StarMod MM and SR!</p> <p></p> <p>\u00a9 2024 MoonModules \u263e - StarMod, StarBase and StarLeds is licensed under GPL-v3</p> <p>Used libraries and dependencies</p>"},{"location":"#moonmodules","title":"MoonModules","text":""},{"location":"basics/","title":"Basics","text":""},{"location":"basics/#basics","title":"Basics","text":"<p>\ud83d\udea7</p>"},{"location":"LedMod/LedModEffects/","title":"LedModEffects","text":"<p>One or more effects can be defined. Currently there are some works in progress</p> <ul> <li>If adding more then one effect Start and End is not set with defaults, resulting in a crash. Workaround is to set them manually first before selecting the effect</li> <li>If there is more then one effect, deleting effects should be from last to first, otherwise unexpected behavior.</li> </ul>"},{"location":"LedMod/LedModEffects/#effects","title":"Effects","text":"<p>An effect has multiple tags, tags are shown in the drop down. Any tag is possible, not necessarily limited to 1D, 2D, sound, etc</p> <p>Current tags</p> <p>\u250a1D</p> <p>\u25a6 2D</p> <p>\ud83e\uddca3D</p> <p>\u266a Audio Volume </p> <p>\u266b Audio Frequency</p> <p>\ud83d\udcabStarLeds origin</p> <p>\u26a1FastLed origin</p> <p>\ud83d\udca1WLED origin</p> <p>\ud83d\udca1\ud83d\udcab WLED origin, StarLeds enhanced</p>"},{"location":"LedMod/LedModEffects/#dev","title":"Dev","text":""},{"location":"LedMod/LedModEffects/#see-also","title":"See also","text":"<ul> <li> <p>Effects</p> </li> <li> <p>Projections And Mappings : virtual to physical mapping of an effect</p> </li> </ul>"},{"location":"LedMod/LedModFixture%20Generator/","title":"UserMod Fixture Generator","text":""},{"location":"LedMod/LedModFixture%20Generator/#fixture-generator","title":"Fixture Generator","text":"<p>Fixtures can be generated using the Fixture generator module or manually created, see below.</p> <p>The fixture generator generates predefined fixtures, specific parameters can be added e.g. size of panels etc:</p> <p>See the dropdown above for all fixtures currently supported</p> <ul> <li>Fixture: strips, matrix, cubes, rings etc.</li> <li>For each fixture:<ul> <li>IP: will be used for super-sync (Not implemented yet)</li> <li>pin: the pin this fixture is connected to</li> <li>custom parameters like number of leds, coordinates</li> </ul> </li> <li>A fixture can be made out of multiple parts. Parts can be matrices but also rings etc. each part can be specified in a table</li> <li>In the fixtures table, each part can be give a seperate (or same) pin</li> <li>After pressing generate, a fixture file will be generated, see Files and can be selected, see Fixtures</li> </ul>"},{"location":"LedMod/LedModFixture%20Generator/#matrix-and-cube-fixtures","title":"Matrix and Cube fixtures","text":"<ul> <li>Matrix fixtures have a width and height parameter, cube fixtures a length parameter.</li> </ul> <p>For each panel:</p> <ul> <li>First Led: the position of the first led</li> <li>Row End: the position of the last led in the first row</li> <li>Column End: The position of the last column of the panel.<ul> <li>Odd nr of columns: if the column end matches the First led then the leds are layed out in serpentine </li> <li>Even nr of columns: if the column end matches the Row End then the leds are layed out in serpentine</li> </ul> </li> <li>panels can be defined in a 2D space but also in a 3D space</li> <li>Rotation: a panel can be rotated into a 3D space using pan, tilt and roll.</li> </ul> <p></p>"},{"location":"LedMod/LedModFixture%20Generator/#examples","title":"Examples","text":""},{"location":"LedMod/LedModFixture%20Generator/#manually-creating-a-fixture-file","title":"Manually creating a fixture file","text":"<pre><code>{\"name\":\"F_4x16x16\",\"nrOfLeds\":1024,\"width\":32,\"height\":32,\"depth\":1,\"outputs\":\n      [{\"pin\":2,\"leds\":[[0,0,0],[0,10,0] ...[310,150,0]]},\n       {\"pin\":2,\"leds\":[[0,160,0],[0,170,0] ...[310,310,0]]}]\n}\n</code></pre> <ul> <li>nrOfLeds, the total number of physical leds</li> <li>width, heigth, depth: the physical size of the fixture, in cm ! (note widthheightdepth is not necessary equal to nr of leds)</li> <li>outputs: multuple lists of pin and a nr of leds, for each led, the coordinate in mm !</li> <li>Files need to have a name starting with F_ and extension.json</li> <li>Files can be uploaded to the esp32 board in the Files or using the command <code>curl -F 'data=@&lt;FileName&gt;' &lt;ip&gt;/upload</code> where <code>&lt;FileName&gt;</code> and <code>&lt;ip&gt;</code> must be replaced by relevant values</li> </ul>"},{"location":"LedMod/LedModFixture/","title":"LedModFixture","text":""},{"location":"LedMod/LedModFixture/#fixtures","title":"Fixtures","text":"<p>\ud83d\udea7</p>"},{"location":"StarBase/Contribute/","title":"Contribute","text":""},{"location":"StarBase/Contribute/#contribute","title":"Contribute","text":"<p>If you want to help with StarMod, the following items could use helping hands:</p> <p>StarBase:</p> <ul> <li>Custom bin name - Small, see also issues/48 \ud83d\udea7</li> <li>Improve UI - Big, see issues/54</li> <li>Setup StarMod.org (StarBase.org?) - Medium</li> <li>Print to different targets (Serial, file, net) - Medium \ud83d\udea7</li> <li>Promote StarBase to other communities eg Fastled community</li> <li>Improve pins viewer, see gpio viewer - Big \ud83d\udea7</li> <li>Example AppModules (eg FastLed, blink, pin high/low, gyro viewer, ...) see issues/50</li> <li>synchronized time within 20ms between instances (look for Toki::Time and timebase) - @ewowi \ud83d\udea7</li> <li>replace ESPAsyncWebServer by the new one wled uses (get rid of occassionaly assert failed: multi_heap_free multi_heap_poisoning.c:259 (head != NULL) when on usb/pio)</li> <li>...</li> </ul> <p>StarLeds</p> <ul> <li>Create new effects - Medium<ul> <li>@WildCats Game of Life on 2D and 3D \ud83d\udea7</li> <li>Analog VU meter</li> <li>Akemi like effect for StarLeds - need to design a StarMod avatar</li> <li>Create a universal fire effect, suitable for 1D, 2D and 3D. See also StarLeds Effects on effect dimensions </li> </ul> </li> <li>Create new projections - Medium<ul> <li>revisit the projection mechanism: @ewowi, planned in July</li> <li>See theory</li> </ul> </li> <li>Fixture generator preview - Medium</li> <li>Generate your fixture - Medium<ul> <li>burning man - create conversion script between 3D models and StarLeds </li> <li>bike fixture - ewowi (the bike is ready: insta )</li> </ul> </li> <li>Sound reactive palette</li> </ul> <p>Both</p> <ul> <li>Documention (this):<ul> <li>@MONSOONO / @Flavourdynamics \ud83d\udea7</li> </ul> </li> </ul> <p>Contact us on Discord.</p>"},{"location":"StarBase/Development/","title":"Development","text":""},{"location":"StarBase/Development/#development","title":"Development","text":"<p>Process</p> <ul> <li>Check Contribute</li> <li>Determine if it is a StarBase or StarLeds change</li> <li>For medium to big changes: create a GitHub issue to document the design of the change</li> <li>Fork the appropriate (StarBase or StarLeds)</li> <li>Create a branch (more text needed here) for medium or big changes (small can be done on main)</li> <li>Implement your change</li> <li>Follow the Standards and guidelines</li> <li>Create a pull request</li> <li> <p>Update StarDocs to document and describe the impact of the change. You can use a link to the commit implementing the change as follows (2024040511 is the version number of the change):</p> <p></p> </li> <li> <p>In case of a StarBase change, propagate the change downstream to StarLeds. The git tree will typically look like this (green is downstream, blue is upstream):</p> <p></p> </li> <li> <p>Determine if post merge steps are needed in StarLeds (e.g. rerun npm run dev to update html_ui.h)</p> </li> </ul> <p>\ud83d\udea7</p>"},{"location":"StarBase/GettingStarted/","title":"Getting Started","text":""},{"location":"StarBase/GettingStarted/#getting-started","title":"Getting Started","text":"<ul> <li> <p>Download a firmware binary (bin)</p> <ul> <li>StarBase release or StarLeds release</li> <li>StarBase latest or StarLeds latest<ul> <li>Click on the latest workflow run, scroll down to Artifacts, then download the bin file</li> <li>Currently only esp32dev builds can be found here</li> </ul> </li> <li> <p>Compile a bin using StarBase source code or StarLeds source code via VSCode and PIO. </p> <ul> <li>The following builds are available using VSCode:</li> </ul> <p></p> </li> </ul> </li> <li> <p>Flash the unzipped \"firmware.bin\" to an ESP32 module using ESP Flasher</p> <ul> <li>Unzip/extract the \"firmware.bin\" from the downloaded folder, then flash it to your connected ESP32 module</li> </ul> </li> </ul> <p></p> <ul> <li>Find the \"StarBase\" WiFi network and connect (no password needed)</li> </ul> <p></p> <ul> <li>The StarMod adaptive portal will show the setup tab, alternatively go to 4.3.2.1</li> </ul> <p></p> <ul> <li>Give the instance a name<ul> <li>System</li> </ul> </li> <li>Enter your Wifi credentials<ul> <li>Network</li> <li>Note: first Save Model, then connect</li> </ul> </li> <li>Save Model<ul> <li>Model</li> </ul> </li> <li>Reboot or press Connect</li> <li>Connect to the WiFi network</li> <li>Optionally, choose a display theme</li> <li>Setup the application<ul> <li>Continue here ! : Setup StarLeds</li> </ul> </li> </ul>"},{"location":"StarBase/GettingStarted/#update-starbase-binary","title":"Update StarBase binary","text":"<ul> <li>See Ota Update in System</li> </ul>"},{"location":"StarBase/StandardsAndGuidelines/","title":"Standards and Guidelines","text":""},{"location":"StarBase/StandardsAndGuidelines/#standards-and-guidelines","title":"Standards and Guidelines","text":"<ul> <li>Orthogonality: concepts are independent or irrelevant to eachother. Examples:<ul> <li>StarBase has no notion of applications build on top of it e.g. StarLeds</li> <li>No notion of HTML in c(++) code</li> <li>Effects have no notion of the type of projection or fixture it is applied to</li> <li>Any projection can be applied to any effect in any fixture, 1D to 3D in any combination</li> <li>Modules are as independent from each other as possible (but they can call each other)</li> </ul> </li> <li>Everything is a module, every module is a (singleton) class</li> <li>Code of a module is in the module class</li> <li>Minimize the use of static / global variables. Use modules classes to define variables</li> <li>\"functional locality\": code of a feature is in one place, not in different files etc.</li> <li>JSON (powered by ArduinoJSON v7 ! and StarJson for highspeed low mem read) as the default way to store and comminicate data </li> <li>Model.json for variables and UI generation</li> <li>Minimize model json size<ul> <li>UiFun: send labels and comments and select options instead of storing in model</li> </ul> </li> <li>Variables are defined using init functions containing a function paramater for:<ul> <li>f_ValueFun: assigning default values</li> <li>f_UIFun: called by the UI to get extra info (label, comment, options)</li> <li>f_ChangeFun: called if the value of a variable changes, use old and new value</li> <li>f_LoopFun: executed in loop e.g. preview</li> <li>f_AddRow: called if a row is added (Variable is in table)</li> <li>f_DelRow: called if a row is deleted (Variable is in table)</li> <li>At the moment of writing, var names need to be unique along the whole project!</li> </ul> <li>UI is 100% generated from model and UIFun, only app.js can be used to implement specific functionality. UI can be single elements or tables with elements and can be hierarchical just like html is hierarchical. UI elements may only be created using init calls. If another UI construct is needed or specific node hierarchy is not implemented yet, please log a github issue. <li>Minimize on heap and stack use<ul> <li>Effect class doesn't have local variables</li> <li>init Variable: functions, not classes</li> </ul> </li> <li>Pragmatic use of Design Patterns (e.g. Singleton) and OO concepts - aiming at maximal efficiency in ESP32 environment</li> <li>Keep it simple to start with, build from there<ul> <li>MVP (Minimum Viable Product) concept</li> <li>Copy - refactor - paste: copy code from the internet -&gt; apply mvp -&gt; apply standards and guidelines - paste in StarBase</li> <li>Code should be as readable as possible<ul> <li>Minimal code lines</li> <li>Only .h (not .cpp) if possible, as it might be a nice c practive but makes code less easier to read (less compact, defaults only in .h) and maintain</li> <li>No get/set like function wrappers around variables</li> </ul> </li> </ul> </li> <li>Strictly forbidden for frameworks like Angular Vue React and the like</li> <li>Other standards and guidelines yet to be written down ;-)</li> <li>These standards and guidelines should result in the posibility to create a complete new service by creating one module in one .h file allowing it to use all functionality available in StarBase. Including UI, pins, files, print, model persistent storage, enabling and disabling, loop injection etc. If you feel it's not possible, log a github issue.</li> <li>These standards and guidelines are not unchangeable and can be disputed, eg singletons, minimal code. but its just the way things are done now to have an initial lean and mean standard. Changes to the standards can be proposed in github issues</li> <li>A lot of good stuff is in here The C++ Programming Language Bjarne Stroustrup, 3rd edition. Maybe some notes on esp32 specific programming?<ul> <li>See stroustrup Chapter25 on embedded systems </li> <li>We prefer char * over String especially if you don't know what you are doing - which is a contradiction as strings can cause defrag and chars can cause crashes ;-)</li> <li>Globals useful to put them in designated memory area?</li> </ul> </li>"},{"location":"StarBase/StarBoard/","title":"StarBoard","text":""},{"location":"StarBase/StarBoard/#starboard","title":"StarBoard","text":"<p>Here are some ideas for the perfect board to drive LEDs.  Most likely there are more perfect boards, so they can be added here.</p>"},{"location":"StarBase/StarBoard/#starboardleds","title":"StarBoardLeds","text":"<p>Mockup:</p> <p></p> <ul> <li>USB-C Powered (2.5A)</li> <li>ESP32-S3 based</li> <li>Headers to plugin INMP443 (no onboard mic as we got non functioning mics at  JLCPCB once probably due to wrong hole alignment or too much paste)</li> <li>5 input/outputs with standard leds pin headers (Red, Green, White = +,data,- per default)</li> <li>Level shifters with solder pads to enable them per input/output</li> <li>5 input/outputs can be used to drive leds or repurposed for other io</li> <li>all on one board</li> <li>perfect for: plug and play development boards, fairy lights (HSC), 256-400 leds per pin at reduced brightness, 50-125 leds at full brightness</li> <li>optional: separate screw terminal to 5V power the board and the 5 io headers with more than 2.5A<ul> <li>optional: allow higher voltages for &gt;5V led strips/panels</li> </ul> </li> <li>optional: i2s, one or two in parallel for gyro board and or 4 line display</li> <li> <p>plus printable enclosure</p> <ul> <li>inspiration</li> <li></li> <li>On/Off button</li> <li>Optional: mode button (next effect, next preset, ...)</li> <li>Optional: brightness knob</li> </ul> </li> </ul>"},{"location":"StarBase/StarBoard/#starboard-more","title":"StarBoard More","text":"<ul> <li>Higher power (1024 leds, 20-50mA each =&gt; 20-50A)</li> <li>Line in</li> <li>Ethernet</li> <li>Display (touch?)</li> <li>external antenna</li> <li>lipo charge</li> <li>ir</li> <li>dallas temp</li> </ul>"},{"location":"StarBase/StarLink/","title":"StarLink","text":""},{"location":"StarBase/StarLink/#starlink","title":"StarLink","text":"<p>StarLink is the current name for the module that allows for multiple instances to be linked together (until we get sued).</p> <p>Its origin is Super-Sync, which can be found in WLED-MoonModules. Other names used are Mega-Sync, Ultra-Sync etc.</p> <p>In StarBase (and it's forks) StarLink is a distributed system meaning there is no sync master (there is in WLED) but instances are part of a group. A group is specified by an instance name identified by a hyphen: groupname-instancename.</p> <p></p> <p>The Link columns shows group info:</p> <ul> <li>0: There is no hyphen in the name, so this instance is not part of any group</li> <li>1: This instance has a group name but there are no other instances in the network with the same groupname</li> <li>2 or more: This instance is part of a group (the number is the number of instances in the group)</li> </ul> <p>Note that an instance in a group can be offline, but as soon as the instance recovers, it will rejoin the group.</p> <p>StarLink functionality is active if there are 2 or more instances in a group. This means that all dash variables (Variables which will show up in the dashboard \ud83d\udea7) and it's children will be synchronized between all instances of the group. It doesn't matter in which instance of the group it will be changed, all other instances will be updated if it's changed.</p> <p>In the StarBase demoApp: \"On\", \"Brightness\" and \"DMX channel\" are currently dash variables. In StarLeds, \"FX\" (and it's children/controls), \"Projection\" (and it's children) are currently dash variables.</p> <p>On a group of sticks this looks as follows:</p> <p>(In this video, there are 2 RGBW sticks which behave a bit differently)</p>"},{"location":"StarBase/StarLink/#_1","title":"\ud83d\udea7","text":"<p>Above is the current state of StarMod/StarLeds.</p> <p>Below are the works in progress:</p> <ul> <li>IP, mac-address, name: Mac-address will be the id to store info of other instances in an instance (unchangeable), IP is used to access an instance (can change), instance name is the user friendly name of an instance (and used for grouping)</li> <li>Position: Each instance will have a position which is used to order instances</li> <li>Synchronized Time: Each instance will have the same time in milliseconds, will have the same random seed and therefore in StarLeds, effects will run exactly the same.</li> <li>StarLeds - Distributed effects: Using ordered instances, multiple instances can each run part of an effect. This can facilitate scalibility, depending on how the effect is implemented. Each approach has different benefits in terms of performance and simplicity:<ul> <li> <ol> <li>Render only the displayed part. It can be beneficial to use a random seed here.</li> </ol> </li> <li> <ol> <li>Displayed part plus a bit needs to be rendered</li> </ol> </li> <li> <ol> <li>Render the entire effect, including parts that are not displayed by each instance. This can be simple, but can experience scalability barriers.</li> </ol> </li> <li>Note: Rendering the effect without showing it on leds is much faster, eg game of life about 10 times faster. This is because writing the data out to LEDs requires specific timing.</li> </ul> </li> </ul>"},{"location":"StarBase/Testing/","title":"Testing","text":""},{"location":"StarBase/Testing/#testing-starbase","title":"Testing StarBase","text":"<p>StarBase is in user test phase. Test scenarios are currently available. If you want to participate in testing, please see below for currently available test scenarios:</p> <ul> <li>Follow a test scenario</li> <li>Please report issues in Github StarBase issues or Github StarLeds issues<ul> <li>Include the build you are testing (see System)</li> <li>Include the test scenario</li> </ul> </li> <li>You can report success also in Github issues or on Discord / StarMod. Please include information explaining whether the instructions were clear, suggestions for improvement to documentation or procedure, or share opportunities new test scenarios, etc.</li> <li>Improve this documentation by forking StarDocs, edit and submit a pull request</li> <li>Any feedback big or small is welcome</li> <li>See StarBase \ud83d\udcab.pdf for the story of StarBase in bullet points</li> </ul>"},{"location":"StarBase/Testing/#current-test-scenarios","title":"Current test scenarios","text":"<ul> <li>Getting Started<ul> <li>Follow the instructions to get StarLeds up and running</li> <li>Optionally, add a LED panel or ring to a gpio port of the ESP32 and check to confirm that LEDs are burning</li> </ul> </li> <li>OTA Update<ul> <li>Download a firmware binary (bin), see Getting Started</li> <li>in the System module:<ul> <li>Check the currently installed build (Since April 14)</li> <li>Upload a bin corresponding with the installed build / board using OTA update</li> <li>Check if upload successful</li> <li>Reboot</li> <li>Check if newest version is installed (build)</li> </ul> </li> </ul> </li> <li>Check the StarLeds test scenarios</li> <li>\ud83d\udea7</li> </ul>"},{"location":"StarBase/news/","title":"News","text":""},{"location":"StarBase/news/#news","title":"News","text":""},{"location":"StarBase/news/#april-17-2024-new-test-scenario-ota-update","title":"April 17, 2024: New test scenario: OTA Update","text":"<p>see StarBase Testing</p> <p></p> <ul> <li>Testers are wanted to test OTA updates, and to follow the Getting Started and deliver feedback.</li> <li>Tests can be performed on StarBase or StarLeds. StarLeds is the most feature rich test.</li> <li>Release 0.0.0 has been added in GitHub repos of StarBase and StarLeds. You can download bins there.</li> <li>Different target boards supported, esp32, esp32s3, esp32s2, esp32c3, pico32</li> <li>Some work has been done on StarDocs documentation but still far from complete and sometimes described in a terse style. Improving the docs by forking and submitting pull requests is highly appreciated :wink:</li> <li>Please also review the contribute page for more ways to help advance the project</li> </ul>"},{"location":"StarBase/news/#april-6-2024-starmod-starbase-and-starleds-repositories","title":"April 6, 2024: StarMod -&gt; StarBase and StarLeds repositories","text":"<p>The LEDs part of ewowi/StarBase has been moved to MoonModules/StarLeds. From now on:</p> <ul> <li>StarBase is a generic ESP32 platfom without any notion of LEDs</li> <li>StarLeds is a fork of StarBase which adds LED functionality on top of it.</li> <li>StarBase can be forked by anyone who wants to build an ESP32 application</li> <li>Forks of StarBase should not change System functionality, changes on that should be done on StarBase:<ul> <li>Sys Modules </li> <li>Generic User Modules</li> <li>index.js / html / css</li> <li>platformio.ini</li> </ul> </li> <li>The following can be changed on forks:<ul> <li>App Modules</li> <li>main.cpp</li> <li>app.js </li> </ul> </li> <li>Use Github issues for StarBase or StarLeds respectively.</li> </ul>"},{"location":"StarLeds/Effects/","title":"Effects","text":""},{"location":"StarLeds/Effects/#effects","title":"Effects","text":"<p>StarLeds comes with a range of built in lighting effects. Users can also create their own effects in the LedEffects.h file.</p>"},{"location":"StarLeds/Effects/#effect-types","title":"Effect Types","text":"<p>Effects can be specific to a type of fixture, such as 2D or 3D effects. Effects can be synchronized between multiple instances of StarLeds.</p>"},{"location":"StarLeds/Effects/#creating-new-effects","title":"Creating New Effects","text":"<p>The procedure for creating a new effect is easy:</p> <ol> <li>Copy the Effect Template found on this page into \"src/App/LedEffects.h\".</li> <li>Rename the \"ExampleEffect\" in both locations (2 top, 1 bottom) within the template.</li> <li>Add it to the appropriate location \"class Effects {}\" near the bottom of the file.</li> </ol> <p>This is sufficient for the new effect to run and be selectable.</p>"},{"location":"StarLeds/Effects/#effects-basics","title":"Effects Basics","text":"<p>Addressing LEDs</p> <ol> <li>\"leds.size\" is the virtual size of the effect.</li> <li>\"leds[pos] = color\" gives a virtual pixel a color value. Identical to \"leds.setPixelColor(pos, color)\"</li> <li>\"color = leds[pos]\" </li> <li>Colors can be an HSV or RGB value. RGB is intuitive as it relates to the LED hardware. HSV is often simpler for programming effects.</li> <li>Colors can be applied directly from a palette: \"ColorFromPalette( const CRGBPalette16&amp; pal, uint8_t index, uint8_t brightness, TBlendType blendType)\"</li> </ol>"},{"location":"StarLeds/Effects/#fastled-commands","title":"FastLED commands","text":"<p>StarLeds runs on FastLED. FastLED's documentation has more information about the wide range of options available for programming LEDs.</p> <p>\ud83d\udea7</p>"},{"location":"StarLeds/Effects/#genral-approaches-to-creating-an-effect","title":"Genral Approaches to Creating an Effect","text":"<p>\ud83d\udea7</p>"},{"location":"StarLeds/Effects/#effect-example","title":"Effect Example","text":"<p>This template can be used to create new effects. The settings are explained below:</p> <p><pre><code>class ExampleEffect: public Effect {\npublic:\n  const char * name() {return \"ExampleEffect\";}\n  uint8_t dim() {return _2D;}\n  const char * tags() {return \"\u266a\u266b\u26a1\ud83d\udca1\ud83d\udcab\";}\n\n  struct Map_t {\n    uint8_t angle;\n    uint8_t radius;\n  };\n\n  void setup(Leds &amp;leds) {\n    leds.fill_solid(CRGB::Black);\n  }\n\n  void loop(Leds &amp;leds) {\n    //Binding of controls. Keep before binding of vars and keep in same order as in controls()\n    uint8_t speed = leds.sharedData.read&lt;uint8_t&gt;();\n    uint8_t legs = leds.sharedData.read&lt;uint8_t&gt;();\n    Coord3D testCoord3D = leds.sharedData.read&lt;Coord3D&gt;();\n\n    //binding of loop persistent values (pointers) tbd: aux0,1,step etc can be renamed to meaningful names\n    Map_t    *rMap = leds.sharedData.readWrite&lt;Map_t&gt;(leds.size.x * leds.size.y); //array\n    uint8_t *offsX = leds.sharedData.readWrite&lt;uint8_t&gt;();\n    uint16_t *aux0 = leds.sharedData.readWrite&lt;uint16_t&gt;();\n    unsigned long *step = leds.sharedData.readWrite&lt;unsigned long&gt;();\n\n    unsigned long beatTimer = sys-&gt;now - *step;\n\n    Coord3D pos = {0,0,0};\n\n    for (pos.x = 0; pos.x &lt; leds.size.x; pos.x++) {\n      for (pos.y = 0; pos.y &lt; leds.size.y; pos.y++) {\n        CRGB color = ColorFromPalette(leds.palette, random8());\n        leds[pos] = color; // or setPixelColor(pos, color);\n      }\n    }\n    if (leds.projectionDimension == _3D)\n      //do something special for 3D projections/fixtures\n      if (!leds.isMapped(leds.XYZ(1,2,3)))\n        //do something special if there is no physical led in the current projection\n        ppf(\"test %d\\n\", beatTimer);\n  }\n\n  void controls(Leds &amp;leds, JsonObject parentVar) {\n    Effect::controls(leds, parentVar);\n    ui-&gt;initSlider(parentVar, \"speed\", leds.sharedData.write&lt;uint8_t&gt;(128), 1, 255);\n    ui-&gt;initSlider(parentVar, \"legs\", leds.sharedData.write&lt;uint8_t&gt;(4), 1, 8);\n    ui-&gt;initCoord3D(parentVar, \"testCoord3D\", leds.sharedData.write&lt;Coord3D&gt;({1,2,3}));\n  }\n}; // ExampleEffect\n</code></pre> (updated June 4, 2024)</p> <p>Remarks</p> <ul> <li>Updated!: An effect should run fine on any dimension of a fixture (1D/2D/3D) of any size (including 0,0,0 or 1,1,1 as exotic projections do rely on this).<ul> <li>There is no notion of the physical shape of the fixture the effect will be projected on.</li> <li>The only information an effect has is leds.projectionDimension and leds.isMapped(Coord3D).</li> <li>An effect has a dimension (dim()) but the projection functions in StarLeds will deal with properly displaying an effect on a fixture.</li> <li>An effect can use leds.projectionDimension to make it optimized for 1D, 2D and 3D, no need to create different effects for different dimensions (e.g. fire 1D, 2D and 3D can all be in one effect).</li> <li>See the Game of Life effect for an advanced effect using leds.projectionDimension and leds.isMapped(Coord3D)</li> <li>See also Projections And Mappings</li> </ul> </li> <li>name(), dim() and tags() provide effect metadata</li> <li>leds.sharedData preserves data over multiple loops, in case of array add the number of elements. data allocation and management will be done transparent from the effect code.</li> <li>leds.size is the virtual size of the effect</li> <li>leds[pos] = color gives a virtual pixel a value</li> <li>leds[pos] = color is identical to leds.setPixelColor(pos, color);</li> <li>color = leds[pos] is identical to color = leds.getPixelColor(pos);</li> <li>FastLed library commands can be used. e.g. leds.fill_solid(CRGB::Black); operations will be executed in the virtual leds context</li> <li>Effect class should not contain public or private variables, use return functions instead to minimize memory foodprint</li> <li>use sys-&gt;now instead of millis() as it supports syncing with other instances, random16_set_seed(sys-&gt;now) is provided under the hood for predictable execution of effects using the random function (however wip)</li> </ul>"},{"location":"StarLeds/Gallery/","title":"Gallery","text":""},{"location":"StarLeds/GettingStarted/","title":"Getting Started","text":""},{"location":"StarLeds/GettingStarted/#getting-started","title":"Getting Started","text":"<ul> <li> <p>Follow StarBase steps using StarLeds binary</p> <ul> <li>StarBase</li> </ul> </li> <li> <p>Select the LEDs tab in the UI</p> </li> <li> <p>Generate a fixture</p> <ul> <li>Fixture Generator</li> <li>Select the pin the leds will be connected to (multiple pins possible)</li> <li>The default setting is one 8x8 panel connected to pin 2:</li> </ul> </li> </ul> <p></p> <ul> <li> <p>Connect LEDs to the ESP32 GPIO pins as defined in the F_ixture.json file</p> </li> <li> <p>A generated fixture will be selected automatically in the Fixture Module</p> <ul> <li>Fixture</li> </ul> </li> <li> <p>Select an effect</p> <ul> <li>Effect</li> </ul> </li> <li> <p>Select Default projection</p> </li> </ul> <p></p> <ul> <li>StarLeds is up and running now !</li> </ul>"},{"location":"StarLeds/GettingStarted/#start-creating-effects","title":"Start Creating Effects","text":"<p>See this page to start creating effects for Leds.</p>"},{"location":"StarLeds/Overview/","title":"StarLeds Overview","text":"<p>Fixture generator:</p> <p></p> <p>Effects:</p> <p></p> <p>Fixture:</p> <p></p>"},{"location":"StarLeds/Overview/#starleds-overview","title":"StarLeds overview","text":"<p>The Leds modules of StarBase define a fixture (Fixture generator module), Set Effects and projections (Effects module) and displays it (Fixture module).</p> <p>All Modules support 1D, 2D and 3D effects and fixtures and all combinations of it. Effects are unaware of the fixtures it is displayed on (e.g. a 1D effect can be projected on a 3D fixture or a 3D effect on a 1D fixture (strip))</p>"},{"location":"StarLeds/Overview/#mappings","title":"Mappings","text":"<p>In the world of LED software mapping is a word causing lots of discussion and confusion. StarLeds is designed to make it simpler and more flexible, by having a clear separation of physical and logical and a clear distinction of fixtures, effects and projections (see Orthogonality). Below is an attempt to explain it. Feel free to improve the text / add pictures (fork and PR).</p> <ul> <li>F_ixture.json contains a definition of the fixture. It specifies the name, nrOfLeds and the width, height and depth of the fixture in cm. Note that nrOfLeds is not equal to the product of width, height and depth as in a lot of fixtures there is not a pixel on every cm. Panels and strips do have a pixel on each cm but rings or hexagons or wheels etc not. Furthermore it specifies for each pin (or ip addres - WIP) the physical coordinate of the pixels (in mm as circular fixtures requires mm accuracy !!) which are connected to the pin, in order of pixels connected in the daisy chain.</li> <li>An effect specifies in a virtual width, height and depth what the effect does. It uses a FASTLED compatible syntax including leds[i] assignments. Also setPixelColor and getPixelColor can be used. Effect can be 1D, 2D or 3D.</li> <li>A projection maps the virtual effect to the physical fixture. The Default projection maps the effect width, height and depth to the fixture width, height and depth. E.g. if a 2D effect is mapped to a matrix there will be a 1:1 correspondence. If a 2D effect is mapped to a 3D fixture (e.g. humanSizedCube) it will smear the 2D image over 3D. Other projections can multiply effects, rotate effects etc. Projections are still in its infancy and only some basic projections have been defined.</li> </ul>"},{"location":"StarLeds/Overview/#dev","title":"Dev","text":"<ul> <li>Fixtures are generated in LedModFixtureGen.h</li> <li>Effects are defined in LedEffects.h</li> <li>Projections are defined in LedFixture.cpp</li> <li>Fixtures are controlled in LedModFixture.h</li> <li>LedModEffects.h glues all of this together: one or more effects each with their own projections and locations on the fixture are called in the main loop and send to FastLed (FastLED.show()). If fixture, dimensions or projections change, fixture.projectAndMap is called to create new mappings. For each new fixture the pins defined in the fixture are allocated (FastLED.addLeds)</li> </ul> <p>\ud83d\udea7</p>"},{"location":"StarLeds/ProjectionsAndMappings/","title":"Projections and Mappings","text":""},{"location":"StarLeds/ProjectionsAndMappings/#projections","title":"Projections","text":"<p>Text</p>"},{"location":"StarLeds/ProjectionsAndMappings/#mappings","title":"Mappings","text":"<p>Text</p>"},{"location":"StarLeds/ProjectionsAndMappings/#dev","title":"Dev","text":"<p>Effects send pixel values using FastLed leds[i] style or calling setPixelColor (sPC) or getPixelColor(gPC).</p> <ul> <li>leds[i] is an overloading function which calls sPC or gPC</li> <li>leds[i] can address 2D or 3D in case i is of type Coord3D: {Coord3D pixel; leds[pixel];} also function XY or XYZ can be called: leds[XYZ(1,2,3)];</li> <li>the pipeline is: leds[i] -&gt; s/gPC \u2014&gt; mapping table -&gt; ledsP</li> <li>a mapping table is filled by the projectAndMap function, see below.</li> <li>ledsP is directly fed to FastLed and FastLed will show whatever content is in ledsP</li> </ul>"},{"location":"StarLeds/ProjectionsAndMappings/#projections_1","title":"Projections","text":"<p>(LedFixture.cpp - projectAndMap)</p> <p>Projection is depending on the dimension of the effect and the dimension of the projection, 1D, 2D or 3D. This means there are 9 different cases.</p> <p>Each physical pixel will be mapped to a logical pixel using these cases.</p> <p>Currently the following is done (default projection)</p> <pre><code>switch (effectDimension) {\n  case _1D:\n    switch(projectionDimension) {\n      case _1D: //1D1D: Identical + axis transformation\n      case _2D: //1D2D: Distance from point (default 0) on a matrix\n      case _3D: //1D3D: Distance from point (default 0) on a cube\n    }\n  case _2D:\n    switch(projectionDimension) {\n      case _1D: //2D1D: all rows adjacent to eachother\n      case _2D: //2D2D: identical + axis transformation\n      case _3D: //2D3D: x = x+y, y = z\n    }\n    break;\n  case _3D:\n    switch(projectionDimension) {\n      case _1D: //3D1D all rows and columns adjacent to eachother (wip)\n      case _2D: //3D2D: (wip)\n      case _3D: //3D3D: identical (wip)\n    }\n    break; //effectDimension _3D\n} //effectDimension\n</code></pre> <p>Non default projections are applied at different moments</p> <ul> <li> <p>Center: 1D effect: point in distance from point</p> </li> <li> <p>Center: 2D effect: reverse mapping: which XYZ(centric) map the default mapping</p> </li> <li> <p>Multiply: adjust size, pixel % adjusted size</p> </li> <li> <p>Rotation: during XYZ()</p> </li> <li> <p>...</p> </li> </ul>"},{"location":"StarLeds/ProjectionsAndMappings/#mapping-table","title":"Mapping table","text":"<p>(LedFixture.cpp - projectAndMap)</p> <p>Example mapping 1D effect to Rings241 (in2out, 9 rings) with distance from point (0,0)</p> <pre><code>ledV 2 mapping: #ledsP (2): 218 219\nledV 3 mapping: #ledsP (3): 162 164 217 220\nledV 4 mapping: #ledsP (4): 118 161 163 165 215 216 221 222\nledV 5 mapping: #ledsP (5): 80 81 82 116 117 119 120 160 166 214 223\nledV 6 mapping: #ledsP (6): 79 83 115 121 159 167 213 224\nledV 7 mapping: #ledsP (7): 31 51 52 53 78 84 114 122 158 168 212 225\nledV 8 mapping: #ledsP (8): 30 32 49 50 54 55 77 85 113 123 157 169 211 226\nledV 9 mapping: #ledsP (9): 6 16 17 29 33 48 56 76 86 112 124 156 170 210 227\nledV 10 mapping: #ledsP (10): 5 7 14 15 18 19 28 34 47 57 75 87 111 125 155 171 208 209 228 229\nledV 11 mapping: #ledsP (11): 0 4 8 27 35 74 88 110 126 153 154 172 173 207 230\nledV 12 mapping: #ledsP (12): 1 2 3 9 12 13 20 46 58 73 89 108 109 127 128 152 174 206 231\nledV 13 mapping: #ledsP (13): 10 11 21 25 26 36 44 45 59 60 72 90 106 107 129 130 151 175 204 205 232 233\nledV 14 mapping: #ledsP (14): 22 23 24 37 43 70 71 91 92 149 150 176 177 203 234\nledV 15 mapping: #ledsP (15): 38 39 40 41 42 61 62 68 69 104 105 131 132 148 178 200 201 202 235 236 237\nledV 16 mapping: #ledsP (16): 63 64 65 66 67 93 94 98 102 103 146 147 179 180 199 238\nledV 17 mapping: #ledsP (17): 95 96 97 99 100 101 133 134 137 141 144 145 181 196 197 198 239 240\nledV 18 mapping: #ledsP (18): 135 136 138 139 140 142 143 182 183 184 185 192 193 194 195\nledV 19 mapping: #ledsP (19): 186 187 188 189 190 191\n\nprojectAndMap [0] V:25 x 1 x 1 -&gt; 20 (v:20 - p:241)\n\nprojectAndMap P:18x18x1 -&gt; 241\n</code></pre> <ul> <li>1D effect will have a led count of 20 (0..19): virtual leds</li> <li>Each virtual led is mapped to a number of physical leds. In above example this results in circles. In total physical 241 leds are mapped</li> <li>the mapping table is implemented as: </li> </ul> <pre><code>struct PhysMap {\n  // bool isPhys = false; // 1 byte\n  // union {\n    std::vector&lt;unsigned16&gt; * indexes;\n    CRGB color;\n  // }; // 4 bytes\n}; // expected to be 5 bytes but is 8 bytes!!!\n\nstd::vector&lt;PhysMap&gt; mappingTable;\n</code></pre> <p>Each PhysMap can be a color OR and array of physical pixels. For projections where a logical pixel is not mapped to a physical pixel (like LedV 0 and 1 in above example) the color variable is used to store (setPixelColor) and retreive (getPixelColor) the color.</p> <ul> <li>To do: make union work so sizeof(PhysMap is less then 8)<ul> <li>check Fixture::projectAndMap(). There the mappingTable is build  </li> <li>mappingTable is a vector of PhysMap</li> <li>PhysMap contains a vector indexes of physical leds if they exist OR! a color if no physical leds exist, in that case color is a placeholder used for getPixelColor. </li> <li>PhysMap currently is 8 bytes !! (+ the length of the indexes vector) I wanted to make a union of it and expected it to be 5 bytes then but that didn't work (WIP). So with a cube of 2000 pixels this is a huge memory foodprint, but still it works (if 5 bytes then still huge but 40% smaller...)</li> </ul> </li> </ul>"},{"location":"StarLeds/ProjectionsAndMappings/#example-preview","title":"Example preview:","text":"<p>this shows above mapping:</p>"},{"location":"StarLeds/ProjectionsAndMappings/#more-theory","title":"More theory","text":"<p>In black are 2 3D fixtures, a cube and a sphere. In red are 2 possible projections of a 2D effect. The first is just a square with with and length, the second is a folded 'paper' in a circle. Idea is that both projections could work on both fixtures.</p> <p>what the mapping could do in this example is : from a certain point (V) on the 2D projector you should draw a perpendicular line and see where it crosses the fixture (could cross zero, one, or multiple times. In the case of the square or sphere, it crosses 2 times mostly (the visible part and the invisible part): P1 and P2. The in the mapping table on position V you will add the pixelNrs P1 and P2.</p> <p>This are \u2018just\u2019 2 projections, more are possible of course, would be nice we could discover one what is the default for 2D to 3D</p> <p>One of the first utility functions to implement this is probably: given a line , show me the intersection points of that line with a fixture.</p> <p>The second is: given a point in a 2D plane, give me the perpendicular line of that point So I am now thinking out loud - abusing our chat to write it down - never went this far in drafting a solution for this - but something like this might work \ud83d\ude09 ... as projectAndMap loops over the pixels of the fixture, the algorithm should be inverse: given a physical point (P), draw a line which crosses the 2D plane perpendicularly, that point is the V where P should be added to (in mappingTable[V].indexes)</p> <p>Another projection can be a mercator projection (2D) as a globe (3D) around a 3d fixture...</p>"},{"location":"StarLeds/Sound/","title":"Sound","text":""},{"location":"StarLeds/Sound/#starleds-sound-design","title":"Starleds sound - Design","text":"<p>This is VERY much in progress \ud83d\udea7</p> <ul> <li>7 bands, same frequencies as MSGEQ7 (but only if no visual difference in 16 band smooth mode)</li> <li>7 knobs to tune each band</li> <li>Master - with option for AGC</li> <li>Auto squelch ? (No noise, increase until first signals)</li> <li>In effects smooth default on (setting?)</li> <li>Save presets (StarBase will implement Presets which can turned on for modules - e.g. effect module or sound module) - alternative to presets in WLED, so no specific code for this in StarLeds (except maybe autoplay...)</li> </ul>"},{"location":"StarLeds/Sound/#starleds-sound-build","title":"Starleds sound - Build","text":"<p>Not build yet (SH007 summer retreat ;-)</p>"},{"location":"StarLeds/Testing/","title":"Testing","text":""},{"location":"StarLeds/Testing/#testing-starleds","title":"Testing StarLeds","text":"<p>See StarBase for test procedure and StarBase test scenarios </p> <p>Follow getting started first if not done yet</p>"},{"location":"StarLeds/Testing/#starleds-test-scenarios","title":"StarLeds test scenarios","text":"<ul> <li> <p>Generate fixtures</p> <p></p> <ul> <li>Select one of the predefined fixtures in the dropdown</li> <li>Press Generate</li> <li>Check file is created in Files</li> <li>Check the newly generated file is selected in the Fixture module and an effect is shown on the fixture</li> <li>Report a custom fixture you would like to have supported in Github issues. </li> <li>To get an idea of current predefined fixtures check  Fixture Generator / examples</li> <li>Optionally change the values in the fixtures table and create fixtures with other than the default parameters</li> <li>Optionally create your own manual fixture in a json file and upload the file in Files</li> </ul> </li> <li> <p>\ud83d\udea7</p> </li> </ul>"},{"location":"SysMod/SysModFiles/","title":"SysMod Files","text":""},{"location":"SysMod/SysModFiles/#files","title":"Files","text":"<p>\ud83d\udea7</p>"},{"location":"SysMod/SysModInstances/","title":"SysMod Instances","text":"<p>Instances: System view:</p> <p></p> <p>Instances: Dashboard view:</p> <p></p>"},{"location":"SysMod/SysModInstances/#sysmod-instances","title":"SysMod Instances","text":"<p>The instance module show all the StarBase instances in the network.</p> <ul> <li>In the System view version and uptime is shown</li> <li>In the Dashboad view \"dash\" variables are shown, the dmx start channel and the Sync master<ul> <li>Dash variables: variables where the dash property is set to true. The on/off variable is typically a dash variable. In StarLeds, brightness is a dash variable.</li> <li>DMX start channel: only visible if the e131 usermod module is compiled (per default). Dash variables can be controlled via DMX (\ud83d\udea7)</li> <li>Sync Master: StarBase instances can control each-others dash variables. A sync master controls the variables of instances set to this sync master.</li> </ul> </li> <li>The dashboard view is used to control other instances from an instance</li> <li>Dash variables makes it easy for StarBase applications (like StarLeds) to define which variables are used for central control, whether it is done by the dashboard view, dmx or also Home Automation. Only thing StarBase applications need to define is the dash property, all functionality is implemented by StarBase.</li> </ul>"},{"location":"SysMod/SysModInstances/#dev","title":"dev","text":"<pre><code>    JsonObject currentVar = ui-&gt;initCheckBox(parentVar, \"on\", true, false, [](JsonObject var, unsigned8 rowNr, unsigned8 funType) { switch (funType) { //varFun\n      case f_UIFun:\n        ui-&gt;setLabel(var, \"On\");\n        return true;\n      case f_ChangeFun:\n        //implement on/off behaviour\n        return true;\n      default: return false;\n    }});\n    currentVar[\"dash\"] = true;\n</code></pre> <p>\ud83d\udea7</p>"},{"location":"SysMod/SysModModel/","title":"SysMod Model","text":""},{"location":"SysMod/SysModModel/#sysmod-model","title":"SysMod Model","text":"<p>All StarBase variables are stored in model.json</p> <ul> <li>Press SaveModel to store the variables</li> <li>Alternatively, press Save in the header</li> <li>Upon reboot, all saved values will be used</li> <li>Note: model.json can be found in the Files Module</li> </ul> <p>\ud83d\udea7</p>"},{"location":"SysMod/SysModModules/","title":"SysMod Modules","text":""},{"location":"SysMod/SysModModules/#sysmod-modules","title":"SysMod Modules","text":"<p>\ud83d\udea7</p>"},{"location":"SysMod/SysModNetwork/","title":"Network Module","text":""},{"location":"SysMod/SysModNetwork/#network","title":"Network","text":"<ul> <li>Enter SSID and password of the WiFi access point. If left empty or no succesful connection, this instance will run in AP mode, where the AP name is the instance name (no password)</li> <li>Hint: press save in the Model module first to store the WiFi credentials!</li> <li>Press Reboot in the Systems module or press Connect here.</li> <li>Note: After reboot or connect, also connect your StarBase client to the same network.</li> </ul> <p>\ud83d\udea7</p>"},{"location":"SysMod/SysModOverview/","title":"System Modules","text":""},{"location":"SysMod/SysModOverview/#system-modules","title":"System Modules","text":"<p>\ud83d\udea7</p>"},{"location":"SysMod/SysModPins/","title":"SysMod Pins","text":""},{"location":"SysMod/SysModPins/#sysmod-pins","title":"SysMod Pins","text":"<ul> <li>Shows pins allocated</li> <li>Shows pin layout for ESP32, esp32s2, esp32s3 \ud83d\udea7</li> <li>Show pin activity (todo)</li> <li>Pins can be (de)allocated by other modules</li> </ul>"},{"location":"SysMod/SysModPrint/","title":"SysMod Print","text":""},{"location":"SysMod/SysModPrint/#sysmod-print","title":"SysMod Print","text":"<ul> <li>System log information can be routed to Serial or to UI</li> <li>Routing to other network ip (todo)</li> <li>\ud83d\udea7</li> </ul>"},{"location":"SysMod/SysModSystem/","title":"System Module","text":""},{"location":"SysMod/SysModSystem/#system","title":"System","text":"<ul> <li>Name: name of this instance, default StarBase.<ul> <li>2024040511: The name will be stripped from non standard characters so it can be used for Wifi / AP HostName and MDNS name. If name is changed, MDNS will be restarted with the new name, see UserModMDNS</li> </ul> </li> <li>Reboot: restart this instance.</li> <li>Build: show which build have been installed</li> <li>OTA Update: select a bin file and it will directly upload to the board. Firmware bins generated by vscode/pio are now copied to the /Downloads folder so you don't have to search through github subfolders anymore to find the bin. Red or green ball will show failure or success. Update will be effective after reboot !!"},{"location":"SysMod/SysModSystem/#curl-update-upload","title":"Curl update / upload","text":"<p>Alternetively to OTA Update in the UI, New versions of StarBase can be flashed to an already flashed esp32 using:</p> <pre><code>curl -s -F \"update=@&lt;path/firmware.bin&gt;\" &lt;ip&gt;/update\n</code></pre> <ul> <li>replace <code>&lt;path/firmware.bin&gt;</code> and <code>&lt;ip&gt;</code> with the relevant values.</li> <li>above command will report if the update was succesful</li> <li>After sucessful update you need to reboot the device to make the update effective</li> </ul> <p>\ud83d\udea7</p>"},{"location":"SysMod/SysModUI/","title":"SysMod UI","text":""},{"location":"SysMod/SysModUI/#sysmod-ui","title":"SysMod UI","text":"<p>\ud83d\udea7</p>"},{"location":"SysMod/SysModWeb/","title":"SysMod Web","text":""},{"location":"SysMod/SysModWeb/#sysmod-web","title":"SysMod Web","text":"<p>\ud83d\udea7</p>"},{"location":"UserMod/UserModArtNet/","title":"UserMod Artnet","text":""},{"location":"UserMod/UserModArtNet/#usermod-artnet","title":"UserMod ArtNet","text":"<p>\ud83d\udea7</p> <p>Mirror LED output over ArtNet</p>"},{"location":"UserMod/UserModDDP/","title":"UserMod DDP","text":""},{"location":"UserMod/UserModDDP/#usermod-ddp","title":"UserMod DDP","text":"<p>\ud83d\udea7</p> <p>Mirror LED output over DDP</p>"},{"location":"UserMod/UserModE131-sACN/","title":"UserMod E131-sACN","text":""},{"location":"UserMod/UserModE131-sACN/#usermod-e131","title":"UserMod E131","text":"<p>\ud83d\udea7</p>"},{"location":"UserMod/UserModMDNS/","title":"UserMod MDNS","text":""},{"location":"UserMod/UserModMDNS/#usermod-mdns","title":"UserMod MDNS","text":"<p>\ud83d\udea7</p>"},{"location":"UserMod/UserModOverview/","title":"UserMod Overview","text":""},{"location":"UserMod/UserModOverview/#usermod-overview","title":"UserMod overview","text":"<p>\ud83d\udea7</p>"},{"location":"about/contributors/","title":"Contributors and Credits","text":"<p>This page is to honor the work of all the people who helped to make StarMod what it is today!</p>"},{"location":"about/contributors/#direct-contributors-to-starmod-code","title":"Direct Contributors to StarMod code","text":"<p>Everyone you see on the Contributors page and:  </p> <p>@netmindz @softhack007 @s\u00f6ren @troy @brandon502</p> <p>This list is incomplete. </p>"},{"location":"about/contributors/#testing-contributors-and-supporters","title":"Testing, Contributors and Supporters","text":"<p>This list has been redacted for privacy reasons. If you've contributed to the project by testing a lot, helping the community, or sending me a gift, feel free to edit this page and add yourself (maintain alphabetical order) \ud83d\ude04 Thank you very much, your help is truly appreciated! Put two spaces behind your name, else the line break will not appear in the final page! </p> <p>@aldiy</p>"},{"location":"about/contributors/#used-libraries-and-dependencies","title":"Used Libraries and Dependencies","text":"<p>ESP32 Arduino Core NeoPixelBus by Makuna FastLED library ESPAsyncTCP by me-no-dev ESPAsyncUDP by me-no-dev (as of 0.9.0) ESPAsyncWebServer by me-no-dev ArduinoJSON by bblanchon async-mqtt-client by marvinroger WS2812FX by kitesurfer1404 (modified) IRremoteESP8266 by markszabo (optional) Timezone by JChristensen Blynk library (compacted) E1.31 library by forkineye (modified) Espalexa by Aircoookie (modified) Many included FastLED effects are modified versions of kriegsman's gists!  </p> <p>StarMod implements Art-Net\u2122 Designed by and Copyright Artistic Licence Holdings Ltd  </p> <p>WebServer_tng by bbx10 (ESP32, up to 0.8.3) PubSubClient by knolleary (modified, up to 0.8.3)  </p> <p> iro.js colorpicker by James Daniel! Classic UI icons by Linearicons created by Perxis!  </p> <p>Plus </p> <p>Toki.h - Minimal millisecond accurate timekeeping by Aircoookie (modified)  </p> <p>If you would like to appear in this list for a contribution you made or be removed from it, feel free to contact me!</p>"},{"location":"about/privacy-policy/","title":"Privacy Policy","text":"<p>By using the StarMod embedded system code, the StarMod iOS mobile application, the StarMod Android mobile application, web client, or associated Services, no personally identifiable data is collected, transmitted and/or stored on external servers. No data is processed in any way not absolutely required for the operation of the Service.</p> <p>This https://starmod.org/ page is hosted using GitHub Pages. While the author of this page does not collect any personally identifiable data, the service provider GitHub \"may collect User Personal Information from visitors to [the] GitHub Pages website, including logs of visitor IP addresses, to comply with legal obligations, and to maintain the security and integrity of the Website and the Service.\" (https://docs.github.com/en/github/site-policy/github-privacy-statement#github-pages) This is outside the influence of the author.</p>"},{"location":"about/privacy-policy/#overview-of-collected-data","title":"Overview of collected data","text":"<p>The embedded system internally stores configuration data, including, but not limited to the user's WiFi credentials. This data is deletable by the user. External read access to sensitive data is blocked. No user or configuration data is sent to any system outside the users local network, unless the user modifies the Software or network configuration.</p> <p>The mobile apps internally store data regarding connected devices, including, but not limited to the device's network-local IP addresses.</p> <p>Using the provided Support services (including, but not limited to GitHub, Discord and E-mail), only the information you choose to disclose will be processed. Privacy policies and Terms of Service of service providers apply.</p> <p>In accordance with the Service GPL V3 license, THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>If you have inquiries regarding this Policy please feel free to contact me at: moonmodules@icloud,com</p>"},{"location":"archive/moonmodules/Installing-and-Compiling/","title":"Installing and Compiling","text":""},{"location":"archive/moonmodules/Installing-and-Compiling/#introduction","title":"Introduction","text":"<p>MoonModules introduces a new naming convention for bin(ary) files which contains configs and presets for used hardware. It also shows the used hardware in the bin name including shield esp flash memory size, audio input.</p>"},{"location":"archive/moonmodules/Installing-and-Compiling/#naming-convention","title":"Naming convention","text":"<ul> <li>WLEDMM_ (to differentiate between WLEDSR and WLEDAC)</li> <li>Version used. First 3 numbers are WLEDAC numbering, last is subnumbering within fork e.g. 0.14.0.11</li> <li>Hardware config / presets e.g. wemos_shield_esp32_4MB_ICS4343x</li> <li>S, M or XL config, use M where possible, XL if needed (Previously _min, _max and _all where used)</li> </ul>"},{"location":"archive/moonmodules/Installing-and-Compiling/#configurations","title":"Configurations","text":"<p>S:</p> <ul> <li>USERMOD_AUDIOREACTIVE</li> <li>USERMOD_ARTIFX</li> </ul> <p>M:</p> <ul> <li>S</li> <li>USERMOD_DALLASTEMPERATURE</li> <li>USERMOD_FOUR_LINE_DISPLAY</li> <li>USERMOD_ROTARY_ENCODER_UI</li> <li>USERMOD_AUTO_SAVE</li> <li>USERMOD_WEATHER</li> <li>USERMOD_MPU6050_IMU</li> <li>USERMOD_GAMES</li> </ul> <p>XL:</p> <ul> <li>M</li> <li>USERMOD_BATTERY ;; enable Battery usermod</li> <li>USERMOD_BATTERY_USE_LIPO ;; use new \"decharging curve\" for LiPo cells</li> <li>USERMOD_BH1750</li> <li>USERMOD_ANIMATED_STAIRCASE</li> <li>USERMOD_RTC ;; experimental</li> <li>; -D USERMOD_SENSORSTOMQTT  ;; experimental ewowi causes error: fatal error: Adafruit_Sensor.h: No such file or directory</li> <li>USERMOD_ANALOG_CLOCK</li> <li>USERMOD_MULTI_RELAY</li> <li>USERMOD_PIRSWITCH</li> <li>USERMOD_PWM_FAN</li> <li>; -D USERMOD_PING_PONG_CLOCK //Removed as dots is confusing</li> <li>USERMOD_BUZZER</li> <li>USERMOD_SN_PHOTORESISTOR</li> <li>USERMOD_BME280</li> <li>USERMOD_DHT</li> <li>USERMOD_VL53L0X_GESTURES</li> <li>WLED_ENABLE_PIXART</li> </ul>"},{"location":"archive/moonmodules/Installing-and-Compiling/#examples","title":"Examples","text":"<ul> <li>WLEDMM_0.14.0.10_wemos_shield_esp32_16MB_M.bin</li> <li>WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_ICS4343x_M.bin</li> <li>WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_LineIn_M.bin</li> <li>WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_SPM1423_M.bin</li> <li>WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_M.bin</li> </ul>"},{"location":"archive/moonmodules/Installing-and-Compiling/#bin-awareness","title":"Bin awareness","text":"<p>Binaries can be downloaded or compiled yourself. See below.</p> <p>When uploading binaries in Manual OTA update , MoonModules support bin awareness: the UI shows which binary is installed and this is a recommendation for the binary to upload (should support the same hardware).</p>"},{"location":"archive/moonmodules/Installing-and-Compiling/#installing-or-compiling","title":"Installing or Compiling","text":""},{"location":"archive/moonmodules/Installing-and-Compiling/#installing-a-bin","title":"Installing a bin","text":"<p>There are currently 4 locations where bins can be downloaded.</p> <p>They can be installed using Manual OTA update from within the WLED UI or use Sergs ESP_Flasher to directly upload a bin using USB to a board.</p>"},{"location":"archive/moonmodules/Installing-and-Compiling/#serg74","title":"Serg74","text":"<p>https://github.com/srg74/WLED-wemos-shield/tree/master/resources/Firmware/%40MoonModules</p> <p>Updated frequently with dev versions. Go here for latest features</p> <p></p>"},{"location":"archive/moonmodules/Installing-and-Compiling/#wladi","title":"Wladi","text":"<p>https://wled-install.github.io/</p> <p>Updated periodically with release and dev versions</p>"},{"location":"archive/moonmodules/Installing-and-Compiling/#wledme","title":"wled.me","text":"<p>https://install.wled.me</p> <p>Releases only</p>"},{"location":"archive/moonmodules/Installing-and-Compiling/#moonmodules-release-page","title":"MoonModules release page","text":"<p>https://github.com/MoonModules/WLED/releases</p> <p>Releases only</p>"},{"location":"archive/moonmodules/Installing-and-Compiling/#compiling-from-ms-code-platform-io","title":"Compiling from MS Code / Platform IO","text":""},{"location":"archive/moonmodules/Installing-and-Compiling/#platformio-environments","title":"PlatformIO Environments","text":"<ul> <li>Hardware: Choose the right environment depending on Shield, ESP32 flash size and mic type. Name of the environment reflects this e.g. wemos_shield_esp32_4MB_ICS4343x_M</li> <li>Bin aware: name of the binary contains fork (WLED, WLEDSR, WLEDMM), version and environment e.g WLEDMM_0.14.0.10_wemos_shield_esp32_4MB_ICS4343x_M.bin. This name is shown in the UI when oploading via OTA</li> <li>Build or upload: Build only creates the bin (to be uploaded via OTA or ESPTOOL), upload directly loads it into an USB connected ESP32 board.</li> <li>Shield environments: Pins for Shield are already preconfigured</li> <li>For developers: See platformio-entries</li> <li>In case of brownouts, file system issues etc: erase flash from the PlatformIO Core CLU (find in platformio quick access on the left pane of Code) pio run --target erase</li> </ul>"},{"location":"archive/moonmodules/Installing-and-Compiling/#fork-specific-info","title":"Fork specific info","text":""},{"location":"archive/moonmodules/Installing-and-Compiling/#wled-sr","title":"WLED SR","text":"<ul> <li>Also bin aware</li> <li>Bins</li> </ul> <p>Serg74: https://github.com/srg74/WLED-wemos-shield/tree/master/resources/Firmware/%40Atuline. Choose latest version. Or https://wled-install.github.io/. For Wemos Shield choose WLEDSR_0.13.3.4_wemos_shield_esp32_16MB_max.bin or WLEDSR_0.13.3.4_wemos_shield_esp32_4MB_M.bin (Pins pre-configured)</p> <p></p> <ul> <li>To do: add microphones </li> </ul>"},{"location":"archive/moonmodules/Installing-and-Compiling/#wled-ac","title":"WLED AC","text":"<ul> <li>Not bin aware</li> <li>Bins</li> </ul> <p>Serg74 https://github.com/srg74/WLED-wemos-shield/tree/master/resources/Firmware/%40Aircoookie or. Select folder for WLED AC 0.13.3 or 0.14 beta (preferred) or https://wled-install.github.io/</p> <p></p> <ul> <li>For Shields choose wemos_shield_esp32 environment (Pins not pre-configured, not available as bin)</li> </ul>"},{"location":"archive/moonmodules/arti-fx/","title":"ARTI-FX","text":""},{"location":"archive/moonmodules/arti-fx/#arti-fx","title":"ARTI-FX","text":"<p>pka Custom Effects</p> <p>ARTI-FX are effects which are not compiled in the WLED repository but specified by a file (program file) which is interpreted in real time.</p> <p>The big advantage of this is that effects are not limited by what is made by WLED programmers but anybody can create effects without releasing a new version of WLED. Furthermore any change in the effect code is instantly shown on leds allowing fast developing of effects.</p> <p>A disadvantage is that the file needs to be loaded, examined and then run in real-time which is 'per definition' slower then pre-compiled code, although performance is promising already and will get better over time.</p>"},{"location":"archive/moonmodules/arti-fx/#quick-start","title":"Quick start","text":"<p>To get your first ARTI-FX running, perform the following steps</p> <ul> <li>In tab effects, select '\u2699\ufe0f ARTI-FX'</li> </ul> <p></p> <ul> <li>In tab Segments, give the segment a name, this will be the name of the ARTI-FX</li> </ul> <p></p> <ul> <li>Click on ARTI-FX Editor</li> </ul> <p></p> <ul> <li>Click on Download wled.json to enable ARTI-FX for WLED (needed each time a new version of CE is published)</li> <li>Click on Load template to get a 'hello world' example</li> <li>Press save and the template will be executed</li> <li>Extra Download: \ud83e\udd5a: HBaas Base presets, \ud83e\udd5a: HBaas Effects presets, \ud83e\udd5a:Ledmap presets</li> </ul>"},{"location":"archive/moonmodules/arti-fx/#running-examples","title":"Running examples","text":"<p>ARTI-FX examples are stored in Github repository</p> <p>If you develop effects which you want to share, ask for access on Github.</p> <p>These effects can be loaded easily within WLED: Give a ARTI-FX segment name the same name as an effect in this repository (case sensitive, without .wled), click on ARTI-FX Editor and click Download 'effect'.wled and press Save.</p> <p>Alternatively, if you want all the effects in this folder at once, go to the ARTI-FX Editor and click Download presets.json (This will overwrite any existing presets you have). Refresh the WLED page or reboot to see the new presets.</p> <p></p>"},{"location":"archive/moonmodules/arti-fx/#create-your-own-arti-fx","title":"Create your own ARTI-FX","text":"<p>A ARTI-FX program typically looks like this:</p> <p></p> <p>A program contains structures like if statements, for loops, assignments, calls (e.g. renderFrame) etc., commands like setPixelcolor and variables like ledCount.</p>"},{"location":"archive/moonmodules/arti-fx/#components","title":"Components","text":"<ul> <li> <p>program: Once every effect. Can contain global variables and internal functions. There are 2 special internal functions: renderFrame and renderLed</p> </li> <li> <p>Global variables: Once every effect, reused between functions. Variables (global and local) are defined by using an assignment e.g. t=0</p> </li> <li> <p>renderFrame: Once every frame</p> </li> <li> <p>renderLed: Once every led within a frame</p> </li> </ul>"},{"location":"archive/moonmodules/arti-fx/#functions-and-variables","title":"Functions and variables","text":"<p>Functions and variables give access to the WLED functionality. The list of functions and variables will grow as we go. A function has parameters (even empty parameters) e.g. setPixelColor(x,y), variables haven't e.g. ledCount.</p>"},{"location":"archive/moonmodules/arti-fx/#wled-general","title":"WLED general","text":"<pre><code>\"ledCount\": {},\n\"setPixelColor\": {\"pixelNr\":\"int\", \"color\":\"int\"},\n\"leds\": {},\n\"setPixels\": {\"leds\": \"array\"},\n\"hsv\": {\"h\":\"uint8\", \"s\":\"uint8\", \"v\":\"uint8\"},\n\n\"setRange\": {\"from\":\"uint16\", \"to\":\"uint16\", \"color\":\"uint32\"},\n\"fill\": {\"color\":\"uint32\"},\n\"colorBlend\": {\"color1\":\"uint32\", \"color2\":\"uint32\", \"blend\":\"uint16\"},\n\"colorWheel\": {\"pos\":\"uint8\"},\n\"colorFromPalette\": {\"index\":\"uint8\", \"brightness\":\"uint8\"},\n\n\"segcolor\": {\"index\":\"uint8\"},\n\"speedSlider\": {\"return\":\"uint8\"},\n\"intensitySlider\": {\"return\":\"uint8\"},\n</code></pre>"},{"location":"archive/moonmodules/arti-fx/#wled-sr","title":"WLED SR","text":"<pre><code>\"beatSin\": { \"bpm\":\"uint16\", \"lowest\":\"uint8\", \"highest\":\"uint8\", \"timebase\":\"uint32\", \"phase_offset\":\"uint8\"},\n\"fadeToBlackBy\": {\"fadeBy\":\"uint8\"},\n\"iNoise\": {\"x\":\"uint32\", \"y\":\"uint32\"},\n\"fadeOut\": {\"rate\":\"uint8\"},\n\n\"custom1Slider\": {\"return\":\"uint8\"},\n\"custom2Slider\": {\"return\":\"uint8\"},\n\"custom3Slider\": {\"return\":\"uint8\"},\n\"sampleAvg\": {\"return\": \"double\"},\n</code></pre>"},{"location":"archive/moonmodules/arti-fx/#arti-fx_1","title":"ARTI-FX","text":"<pre><code>\"counter\": {\"return\": \"uint32\"},\n\n\"shift\": {\"delta\": \"int\"},\n\"circle2D\": {\"degrees\": \"int\"},\n</code></pre>"},{"location":"archive/moonmodules/arti-fx/#math","title":"Math","text":"<pre><code>\"constrain\": {\"amt\":\"any\", \"low\":\"any\", \"high\":\"any\"},\n\"map\": {\"x\":\"int\", \"in_min\":\"int\", \"in_max\":\"int\", \"out_min\":\"int\", \"out_max\":\"int\"},\n\"seed\": {\"seed\": \"uint16\"},\n\"random\": {\"return\": \"uint16\"},\n\"sin\": {\"degrees\": \"double\", \"return\": \"double\"},\n\"cos\": {\"degrees\": \"double\", \"return\": \"double\"},\n\"abs\": {\"value\": \"double\", \"return\": \"double\"},\n\"min\": {\"value1\": \"double\", \"value2\": \"double\", \"return\": \"double\"},\n\"max\": {\"value1\": \"double\", \"value2\": \"double\", \"return\": \"double\"},\n</code></pre>"},{"location":"archive/moonmodules/arti-fx/#time","title":"Time","text":"<pre><code>\"hour\": {\"return\":\"uint8\"},\n\"minute\": {\"return\":\"uint8\"},\n\"second\": {\"return\":\"uint8\"},\n\"millis\": {\"return\": \"uint32\"},\n</code></pre>"},{"location":"archive/moonmodules/arti-fx/#pixelblase-support","title":"Pixelblase support","text":"<pre><code>\"time\": {\"inVal\":\"double\", \"return\": \"double\"},\n\"triangle\": {\"t\":\"double\", \"return\": \"double\"},\n\"wave\": {\"v\":\"double\", \"return\": \"double\"},\n\"square\": {\"v\":\"double\", \"t\":\"double\", \"return\": \"double\"},\n</code></pre>"},{"location":"archive/moonmodules/arti-fx/#serial-output","title":"Serial output","text":"<pre><code>\"printf\": {\"args\": \"__VA_ARGS__\"}\n</code></pre>"},{"location":"archive/moonmodules/arti-fx/#details","title":"Details","text":"<ul> <li>ledcount: number of leds within(!) a segment </li> <li>setpixelColor: currently the second parameter is color from palette!</li> <li>leds: one or 2 dimensional array: One index for led strips and 2 indexes for panels. If the leds variable is used an implicit setPixels(leds) will be done each frame! </li> <li>shift: shift all leds left or right (using delta)</li> <li>circle2D: puts a dot on a circle using the angle. Used to show a 2D clock, see clock2D.wled</li> <li>random: 16 bit random nr</li> <li>sin/cos: value between -1 and 1</li> <li>hour/minute/second: current time (set in time preferences)</li> <li>printf: currently no real printf: prints numbers, max 3</li> </ul>"},{"location":"archive/moonmodules/arti-fx/#implementation-of-variables-and-functions","title":"Implementation of variables and functions","text":"<p>All variables and values are internally stored as doubles and where needed converted to (unsigned) integers, e.g. to WLED functions or operators like %.</p> <p>Technical details about external variables and functions can be found in arti_wled.h. Look for arti_external_function, arti_set_external_variable and arti_get_external_variable. Some examples:</p> <p></p>"},{"location":"archive/moonmodules/arti-fx/#current-limitations","title":"Current limitations","text":"<ul> <li>Only 1 segment</li> <li>no unary operators like - (use 0-1) and ++, --</li> <li>no strings</li> </ul>"},{"location":"archive/moonmodules/arti-fx/#trouble-shooting","title":"trouble shooting","text":"<ul> <li>effect crashes: most likely too deeply nested commands (e.g. pixbri = (sin(startVal + millis()/(255- freq)) + 1) * 128), try to split up in more lines.</li> </ul>"},{"location":"archive/moonmodules/contribute-dev/","title":"Contribute to WLED MM Development","text":"<p>This page Work In Progress</p>"},{"location":"archive/moonmodules/contribute-dev/#setup","title":"Setup","text":""},{"location":"archive/moonmodules/contribute-dev/#core-branches","title":"Core branches","text":"<ul> <li>mdev: Main development branch. merge from upstream</li> <li>dev/acmain/main: Do not commit or merge directly to this branch -&gt; easier to keep up to date with upstream</li> </ul>"},{"location":"archive/moonmodules/contribute-dev/#general-coding-standards","title":"General coding standards","text":"<ul> <li>Use WLEDMM in comments so our changes can be found back</li> <li>Add \ud83c\udf1ccharacter on UI items which are MM specific so users can see where MM differs from AC</li> </ul>"},{"location":"archive/moonmodules/contribute-dev/#work-from-other-repos","title":"Work from other repos:","text":"<ul> <li>Fork</li> <li>submit PR</li> </ul>"},{"location":"archive/moonmodules/contribute-dev/#access-to-repo","title":"Access to repo","text":""},{"location":"archive/moonmodules/contribute-dev/#additional-coding-standards","title":"Additional coding standards","text":"<ul> <li>Always update date in wled.h</li> <li>Sometimes update version: Find and replace old version (e.g. 0.14.0-b15.21) by new version (e.g. 0.14.0-b15.22)</li> </ul>"},{"location":"archive/moonmodules/contribute-dev/#feature-branches","title":"Feature branches","text":"<ul> <li>Only use for new features. Branch from dev/acmain/main if intended to merge in upstream using PRs, otherwise branch from mdev</li> </ul>"},{"location":"archive/moonmodules/contribute-dev/#merge-from-upstream","title":"Merge from upstream","text":"<ul> <li>Merge with care: add a commit that will create a conflict. Merge (with conflicts). Resolve conflicts. Unstage all files so you see the differences. Undo changes you do not want in (most often conflicts but can be others too) and stage files. Do that with each file one-by-one. Commit. Undo if you doubt else push to remote.</li> <li>If WLEDMM comments have been added consequently this will help with merging from uptream. However you can't rely on this for 100% so merging always need to be done very precisely, knowing what you will merge.</li> </ul>"},{"location":"archive/moonmodules/contribute-docs/","title":"Contribute to WLED docs","text":""},{"location":"archive/moonmodules/contribute-docs/#introduction","title":"Introduction","text":"<p>You can contribute to the contents on this site as follows:</p> <ul> <li>Create a fork</li> <li>Edit in your fork (Commit -&gt; workflow -&gt; new pages)</li> <li>Create pull request</li> <li>See also Good to know</li> </ul>"},{"location":"archive/moonmodules/contribute-docs/#fork","title":"Fork","text":"<ul> <li>Fork MoonModules/WLED-Docs: https://github.com/MoonModules/WLED-Docs/fork</li> </ul>"},{"location":"archive/moonmodules/contribute-docs/#edit-using-github","title":"Edit using github","text":"<ul> <li>Clone your fork (https://github.com/yourfork/WLED-Docs.git) </li> <li>Create a branch in your fork if you want to create a pull request for changes in that branch only</li> <li>Make edits in your fork / branch (https://github.com/yourfork/WLED-Docs/)</li> <li>Commit</li> </ul>"},{"location":"archive/moonmodules/contribute-docs/#edit-in-website","title":"Edit in website","text":"<p>Go to https://yourfork.github.io/WLED-Docs or https://mm.kno.wled.ge/moonmodules/contribute-docs/ if you have contributor rights</p> <ul> <li>Navigate to the page you want to edit</li> <li>Press edit icon</li> </ul> <p></p> <ul> <li>Edit the file</li> </ul> <p></p> <ul> <li> <p>Images can be added by dragging them to the page (see earlier added images and videos for the syntax to be used, use width=\"xxx\" to adjust the size)</p> </li> <li> <p>Commit (see workflow after commit)</p> </li> </ul> <p></p>"},{"location":"archive/moonmodules/contribute-docs/#workflow-after-commit","title":"Workflow after commit","text":"<p>If a commit is done a workflow will be started to create the pages.</p> <p>Progress can be seen in https://github.com/yourfork/WLED-Docs/actions</p> <p></p> <p>This will take some time (about 30s)</p> <p>After the workflow is completed new version of your kno.wled.ge can be found here:</p> <p>https://yourfork.github.io/WLED-Docs</p>"},{"location":"archive/moonmodules/contribute-docs/#create-pull-request","title":"Create pull request","text":"<ul> <li>Create pull request from https://github.com/yourfork/WLED-Docs/ to https://github.com/MoonModules/WLED-Docs/</li> <li>Pull from a branch if you only want to pull the changes in that branch</li> </ul>"},{"location":"archive/moonmodules/contribute-docs/#fork-specific-info","title":"Fork specific info","text":""},{"location":"archive/moonmodules/contribute-docs/#wled-sr","title":"WLED SR","text":"<p>kno.wled.ge not supported help is in maintenance mode and can be found here: https://github.com/Atuline/WLED/wiki</p>"},{"location":"archive/moonmodules/contribute-docs/#wled-ac","title":"WLED AC","text":"<p>Above can also be done on https://github.com/Aircoookie/WLED-Docs</p>"},{"location":"archive/moonmodules/fork-comparison/","title":"Fork Comparison","text":"<p>What are the differences between WLED SR, upstream AC WLED, and MoonModules fork?</p> Feature WLED SR 0.13 MoonModules WLED 0.14 Upstream WLED 0.14 0.14 architecture No Yes (upstream frequently merged) Yes Usermods have own pages in main config menu Audio Reactive only Yes No Segments 2D aware No (XY calculated, mirror not working) Yes Yes Audio reactive Core Usermod Usermod Microphone Profiles No Yes No Audio dynamics limiter No Yes Yes High Definition audio analysis, 32 channel GEQ No Yes (WIP) for ESP32 and ESP32-S3 No ARTI-FX Yes Yes No Expand 1D effects No Yes (+ JMap, Circle and Block) Yes Extended hw info basic Yes No JSON Mapping on 1D effects No Yes No Games usermod (3D to 2D, gyro) No Yes (WIP) No Weather usermod (syncing internet data) No Yes (WIP) No HB effects Fully supported 80% supported (WIP) Not supported classic ESP32 Yes Yes Yes ESP32-S3 No Yes Experimental ESP32-S2 and ESP32-C3 No Experimental Experimental ESP8266 No Yes but no Audio Reactive Yes but no Audio Reactive Bin Awareness Yes Yes No Audioreactive palettes Yes Yes No Extended mic settings in platformIO No Yes No DMX Input No Yes No"},{"location":"archive/moonmodules/mappings/","title":"Mappings","text":""},{"location":"archive/moonmodules/mappings/#introduction","title":"Introduction","text":"<p>There are a few steps between an effect and it's physical presentation on a number of leds.</p> <p>This are the basic steps:</p> <ul> <li>The effect creates for each segment frame a number of pixels using setPixelColor where pixel(0) is left (2D top left) and pixel(length) is right (2D: pixel(widthxheight), bottom right)</li> <li>Segments are mapped to a strip (2D: Matrix) again from left (top) to right (bottom). This is a logical mapping because the real wiring can be different (normally not in strips, but in matrix panels they are) - specify in segments tab</li> <li>Logical strip (or matrix) is mapped to how they physically look. E.g. for matrix panels: where is the first pixel (top/bottom/left/right), how is the orientation (horizontal / vertical) and is it serpentine (or not). There can be multiple panels. - Specify in settings / 2D configuration</li> </ul> <p>Optionally there can also be:</p> <ul> <li>JSON Mapping: Mapping of 1D effects to 2D. Expand1D (Logical mapping)</li> <li>Ledmaps: e.g. for custom setup using led strips, cubes or circles etc in a 2D layout. (Phyisical mapping)</li> </ul> <p>Remarks</p> <ul> <li>All mappings use ledmap.json style mappings. JSON Mapping supports 2D coordinates, the others not. Will be harmonized <li>Peek should show Logical ledmaps, not physical ledmaps (except the now show pixels). </li>"},{"location":"archive/moonmodules/mappings/#mappings","title":"Mappings","text":"<p>Below is in processing order</p>"},{"location":"archive/moonmodules/mappings/#json-mapping","title":"JSON mapping","text":"<p>AKA jmap 1D expansion: maps a 1D effect to a 2D pattern</p> <p>From excel/vba  via /edit and   to matrix </p> <p>Files are here: JSONMappings</p> <p>json files need to be uploaded to /edit. E.g. if filename is candle33.json, the name of the segment must be candle33 and expand1D must be jmap in order to run the mapping.</p>"},{"location":"archive/moonmodules/mappings/#segment-to-logical","title":"Segment to Logical","text":"<p>Maps segments to a matrix where (0,0) is always topleft and (width, height) always bottom right. Non serpentine</p>"},{"location":"archive/moonmodules/mappings/#panel-layout","title":"Panel layout","text":"<p>Takes into account Panel setup and Led panel layout as defined in 2D Configuration (e.g. 1st panel, 1st led, serpentine)</p> <p>Code: uses customMappingTable</p>"},{"location":"archive/moonmodules/mappings/#ledmaps","title":"Ledmaps","text":"<ul> <li>Shuffles leds</li> <li>Both for 1 and 2D</li> <li>Ledmaps override panel layout !!</li> </ul> <p>Code: uses customMappingTable</p> <p>See also Advanced/Mappings</p>"},{"location":"archive/moonmodules/mappings/#fork-specific-info","title":"Fork specific info","text":"Feature WLED SR 0.13 MoonModules WLED 0.14 Upstream WLED 0.14 JSON Mapping No Yes No JSON mapping yet although it's based on an idea from AirCoookie Segment to Logical Yes Yes Yes Ledmaps Yes Yes Yes Panel layout Yes Yes Yes"},{"location":"archive/moonmodules/platformio-entries/","title":"Platformio entries","text":"<p>To re-use settings in a consistent way, MoonModules platformio entries conform to the following standard:</p>"},{"location":"archive/moonmodules/platformio-entries/#overview","title":"Overview","text":"<ul> <li>Brown: existing platform specifiek entries</li> <li>Blue: MoonModules common settings: build flags and lib deps (move settings here if possible)</li> <li>Orange: Base entries: only minimal settings, where possible move to common settings (blue), used by environment settings</li> <li>Green: Environment entries =&gt; use to generate bins using WLED_RELEASE_NAME</li> <li>White text: settings added. If no white text, settings should come from other entries (except WLED_RELEASE_NAME in environment entries)</li> </ul> <p>Remarks: </p> <ul> <li>build flags cannot be overwritten in entries using extends. Example is WLED_RELEASE_NAME: only defined in environment entries, not in base (orange) or common settings (blue).</li> <li>The arrows indicate re-use using ${} and the extends keyword.</li> <li>Bin name of an environment entry is derived as follows: WLEDMM_WLED_RELEASE_NAME_VERSION.bin</li> </ul>"},{"location":"archive/moonmodules/platformio-entries/#to-do","title":"To do","text":"<ul> <li>Remove / evaluate (commented) settings from base entries and move to common settings:</li> </ul> <p><code>-D WLED_USE_MY_CONFIG    -D WLED_WATCHDOG_TIMEOUT=0 #-D WLED_DISABLE_BROWNOUT_DET   -D ARDUINO_USB_CDC_ON_BOOT=0 ; needed for arduino-esp32 &gt;=2.0.4; avoids errors on startup   ; -D WLED_DISABLE_LOXONE   ; -D WLED_DISABLE_ALEXA   ; -D WLED_DISABLE_HUESYNC   ; -D WLED_DISABLE_MQTT   ; -D WLED_DISABLE_INFRARED   ; -D WLED_ENABLE_DMX   ; -D WLED_DEBUG   ; -D SR_DEBUG   ; -D MIC_LOGGER</code></p> <ul> <li>Cleanup / convert old entries</li> <li>Above structure is in current setup repeated for other boards / frameworks. Need to find a way to not repeat all of this, e.g. by replacing brown and blue settings by others... </li> </ul>"},{"location":"archive/moonmodules/platformio-entries/#fork-specific-info","title":"Fork specific info","text":""},{"location":"archive/moonmodules/platformio-entries/#wled-sr","title":"WLED SR","text":"<p>This is also ported to WLEDSR.</p>"},{"location":"archive/moonmodules/platformio-entries/#wled-ac","title":"WLED AC","text":"<p>No plans yet</p>"},{"location":"archive/moonmodules/preset-api-commands/","title":"Preset API Commands","text":""},{"location":"archive/moonmodules/preset-api-commands/#new-in-014","title":"New in 0.14","text":"key what value remarks m12 Exand1D 0=Pixels, 1=Bar, 2=Arc, 3=Corner, 4=jMap \ud83c\udf1c, 5=Circles \ud83c\udf1c, 6=Block \ud83c\udf1c ssim sound sim 0=BeatSin, 1=WeWillRockYou, 2=U10_3, 3=U14_3 <p>See also Features/Presets</p>"},{"location":"archive/moonmodules/preset-api-commands/#fork-specific-info","title":"Fork specific info","text":""},{"location":"archive/moonmodules/preset-api-commands/#wled-sr","title":"WLED SR","text":"<p>Not in WLEDSR</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/","title":"Release notes v0.14.0-b0","text":""},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#adding-pong","title":"Adding pong","text":"<p>September 16, 2022</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#adding-pong_1","title":"Adding pong","text":"<p>In games usermod</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#updates-from-audio-reactive","title":"updates from audio-reactive","text":"<p>September 8, 2022</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#updates-from-audio-reactive_1","title":"updates from audio-reactive","text":""},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#merged-to-upstream","title":"merged to upstream","text":"<ul> <li> <p>volume &amp; frequency \"dynamics limiter\" - slower decay of sound volume in effects. Also has an effect on GEQ, as it turns on smoothing for frequency bands.  </p> </li> <li> <p>GEQ frequency scaling: None (as in SR WLED), Linear, Square Root (new default), Logarithmic.  </p> </li> </ul>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#work-in-progress","title":"work in progress","text":"<ul> <li> <p>New option \"MIC profile\" - default (same table as in SR WLED), line-in (strictly \"pink noise\"), IMNP441 (optimized), ICS-43434 (optimized).  This option causes the use of different \"pink noise tables\" when adjusting the frequency spectrum to human \"hearing sensitivity\". Pink noise calibration is very common when using hardware Equalizers. A good testcase is this Pink Noise Video. </p> </li> <li> <p>(minor) Showing the \"GEQ input gain\" in percent, next to the slider value.  </p> </li> <li> <p>user-settable \"Trebble Amplification\" for GEQ effects. Will be placed into the Info Page, directly under \"GEQ input gain\".</p> </li> </ul>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#framework-v4","title":"FrameWork-V4","text":"<p>September 6</p> <p>Lessons Learnt: When upgrading WLED devices to software using the IDF 4.4.x framework, it seems that a flash erase is needed. Without this, we observed crashes whenever files were written.</p> <p>Suspected cause: Lorol LittleFS (from standards framework) is not compatible with the built-in littleFS from IDF v4.4 / arduino-esp32 v2.0.4. Could be that the partition table is the problem, so a chip erase is needed to clean the table.</p> <p>A new merge to mdev has been done: new environment <code>esp32mdev_V4</code> so that normal compiles are not getting the new framework automatically.</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#updates-from-audioreactive-prototype","title":"updates from audioreactive-prototype","text":"<ul> <li>Will merge into upstream</li> </ul>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#json-mapping","title":"Json Mapping","text":"<p>From excel/vba  via /edit and   to matrix </p> <p>Files are here: JSONMappings</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#september-2","title":"September 2","text":""},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#updates-from-audioreactive-prototype_1","title":"updates from audioreactive-prototype","text":"<p>Merged into upstream</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#expand1d-effects","title":"Expand1D effects","text":"<ul> <li>Virtual strips in 1D effects</li> </ul> <p>Strip bar has been merged to upstream, strip Arc and strip Corner (as opposed to pixel Arc and Corner, see upstream) is \"waiting\" in upstream branch. To be added to MoonModules.</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#usermod-level-up","title":"Usermod level up","text":"<p>each usermod  got its own settings page </p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#september-1","title":"September 1","text":""},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#august-31","title":"August 31","text":""},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#arti-fx","title":"ARTI-FX","text":"<p> +   =  </p> <ul> <li>drawArc using x2+y2=r2 instead of sin/cos</li> </ul>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#weather-usermod","title":"Weather usermod","text":"<p> +   = </p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#august-29","title":"August 29","text":""},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#updates-from-audioreactive-prototype_2","title":"updates from audioreactive-prototype","text":""},{"location":"archive/moonmodules/release-notes-v0.14.0-b0/#merged-into-upstream","title":"Merged into upstream","text":"<ul> <li>Sound simulations</li> <li>Expand 1D into 2D</li> <li>Virtual strips in 1D effects</li> <li>liveview / peek 2D</li> <li>AR: reduce variables </li> <li>AR: Sound info in info panel</li> <li>Replace leds[] by sPC/gPC</li> <li>Slower fade-out in GEQ and a few other audioreactive effects.</li> <li>Audio reactive stuff:</li> <li> <ul> <li>upgrade to latest ArduinoFFT, using 'float' instead of 'double'. Up to 8 times faster!</li> </ul> </li> <li> <ul> <li>configurable sound dynamics limiter, to make audioreactive effects flow with the  music, and prevent \"sudden flashes at onsets\". A kind of 'flicker fixer'.</li> </ul> </li> <li> <ul> <li>improvements for UDP sound sync</li> </ul> </li> <li> <ul> <li>new frequency scaling options 'square root' and 'logarithmic' - GEQ shows more action in higher frequencies.</li> </ul> </li> </ul>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/","title":"Release notes v0.14.0-b1","text":""},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#drop-downs-for-pin-variables","title":"Drop downs for pin variables","text":"<p>December 23, 2022</p> <p></p> <ul> <li>show pins which are in use (not selectable)</li> <li>excludes pins which may not be used (e.g. for 4ld/mclk variable)</li> <li>use global pins option</li> <li>undefined option</li> </ul> <p>Currently implemented for AudioReactive and 4LineDisplay (tested) and all usermods which uses pin variables (testing in progress)</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#mmknowledge","title":"mm.kno.wled.ge","text":"<p>December 21, 2022</p> <p>MoonModules pages (wich is a fork of upstream pages) is now linked to mm.kno.wled.ge and is integrated in MoonModules WLED.</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#usermod-specific-help","title":"Usermod specific help","text":"<p>December 19, 2022</p> <p></p> <p>This goes to https://mm.kno.wled.ge/soundreactive/Sound-Settings/</p> <p>Also added in Weather usermod and four line display usermod (pages wip)</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#ledmap2d","title":"Ledmap2D","text":"<p>December 5, 2022 In 0.14 ledmaps are only supported for 1D. This fix makes it work for 2D in WLED MM.</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#arti-fx-improvements","title":"ARTI-FX improvements","text":"<p>November 29, 2022</p> <p>ARTI-FX improvements: - Simplified presets.json (can be downloaded directly into WLED MM in ARTI-FX editor screen) - some bug fixes to let ARTI-FX run better on 2D</p> <p>And combining ARTI-FX with 1D expansions gives great results and makes ARTI-FX very well performing on large 2D matrices!!!</p> <p>This is color_fade_pulse (by @atuline) with Circles expansion:</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#improved-lay-out-usermod-settings","title":"Improved lay-out usermod settings","text":"<p>November 20, 2022</p> <p>Grouping and pre-post texts in usermod settings (to make it more readable)</p> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#audioreactive-palettes","title":"Audioreactive palettes","text":"<p>November 19, 2022</p> <p>by NetMindz</p> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#extended-mic-settings-in-platformio","title":"Extended mic settings in platformIO","text":"<p>November 18, 2022</p> <p></p> <p>allowing to create mic specific environments:</p> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#bin-aware-builds","title":"Bin Aware Builds","text":"<p>October 28, 2022</p> <p>Upload hardware specific configs based on generated filenames (=&gt; WLED install is aware of underlying hardware).</p> <p>Ultimate goal of bin awareness is that WLED itself says: hey! I found a new update for you, do you want to install?</p> <p></p> <p>plus</p> <p></p> <p>(esp32mdev -&gt; esp32_4MB_min. esp32mdevmax -&gt; esp32_4MB_max / esp32_16MB_max)</p> <p>plus</p> <p></p> <p>(0.14.0. sequence of upstream commit . sequence of mm commit (need to be updated together with build date)</p> <p>=&gt;</p> <p></p> <p>=&gt;</p> <p></p> <p>(WLED install is aware of the filename of it's bin, WLEDMM_0.14.0.2.1_esp32_16MB.bin in this example)</p> <p>plus</p> <p></p> <p>(Serg and Wladi repo's should use the same names)</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#ota-latest-release","title":"OTA latest release","text":"<p>October 25, 2022</p> <p>Manual OTA Update is showing the latest MoonModules/WLED release and clicking on the version icon jumps to the release pages on Github, links to Serg74 and Wladi builds are also shown on the release page, so Manual OTA Update will guide you to the version you need!</p> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#add-circles-and-block-as-1d-expansion","title":"Add Circles and Block as 1D expansion","text":"<p>October 21, 2022</p> <p>Add Circles and Block as 1D expansion and show virtualStrip effects with \u22ee\u22ee</p> <p></p> <p>Tetris effect with block expansion:</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#compatibility-for-sr013-presets","title":"compatibility for SR/0.13 presets","text":"<p>October 20, 2022</p> <p>Thanks to 'renumbered effect ID's back to WLED SR 0.13 numbering': Add compatibility for SR/0.13 presets. This allows HB effects to be run on 0.14, however this shows that there are some shortcomings in 0.14: e.g. lissajoux not working as at should and overlapping segments not working (e.g. Akemi from Hell): November update: Lissajoux, Akemi from Hell (and others) fixed, overlapping segments working now. Check this in Led Preferences:</p> <p></p> <p>(To see them fully working: load them into WLEDSR 0.13!)</p> <p>To upload HR effects put effects / presets.json in /edit <p>To start creating your own multiple segment effects put base / presets.json in /edit <p>Presets.json files are here</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#renumbered-effect-ids-back-to-wled-sr-013-numbering","title":"renumbered effect ID's back to WLED SR 0.13 numbering","text":"<p>October 16, 2022</p> <p>Important update: renumbered effect ID's back to WLED SR 0.13 numbering so WLED (SR) 0.13 is compatible with MoonModules 0.14 for presets and sync between devices </p> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#extra-hardware-info-on-info-tab","title":"Extra hardware info on Info tab","text":"<p>October 13, 2022</p> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#refactored-json-mapping","title":"Refactored JSON Mapping","text":"<p>October 1, 2022</p> <p>smaller memory footprint so larger mappings can be used, e.g. Snake32:</p> <p>Files are here: JSONMappings</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#games-usermod-additions","title":"Games usermod additions","text":"<p>September 27, 2022</p> <p>Added to games usermod:</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#3d-to-2d-mapping","title":"3D to 2D mapping","text":"<p>Adding Frame3D class which takes a 3D coordinate and maps this to 2D matrix (using addEffect(), setPixelColor(floats) and drawLine() added in 0.14 version)</p> <p>    =    </p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b1/#3d-gyro","title":"3D + Gyro","text":"<p>Refactoring USERMOD_MPU6050_IMU (so that it works!) using latest ElectronicCats/mpu6050 library Embedding this usermod in games usermod and use yaw pitch and roll in Frame3D class</p> <p>    +        =     </p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/","title":"Release notes v0.14.0-b15","text":""},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#example-mapping-library-for-rings-cubes-and-clouds","title":"Example mapping library for Rings, Cubes and Clouds","text":"<p>2 April 2023</p> <p> </p> <p>Get them here, upload the presets.json to have them all as presets: MoonModules/WLED-Effects/Ledmaps</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#mm-usermods-have-their-own-icon","title":"MM Usermods have their own icon","text":"<p>2 April 2023</p> <p></p> <p>And (therefore) shown on top</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#tablet-pc-mode-support-and-ui-graphics-refactor","title":"Tablet PC Mode support and UI graphics refactor","text":"<p>24 March 2023</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#better-sort-of-presets","title":"Better sort of presets","text":"<p>23 March 2023</p> <p>simplify sort to better align with quick load labels (sort first) and ir remotes using id (sort after presets)</p> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#athom-wled-music-controller-support","title":"Athom WLED Music Controller support","text":"<p>21 March 2023</p> <p></p> <ul> <li>show flashsize in info tab and /getflash</li> <li>support of their ir-remote (24-key music)</li> <li>Legacy PDM type to support their Mic characteristics, tuned by Softhack007</li> <li>Support of 4 line display modification (see picture)</li> <li>athom_music_esp32_4MB_M.bin fully preconfigured for Athom pins and 4LD usermod</li> <li>Not supported yet: mac addres in AP name (need to experiment with WLED_AP_SSID_UNIQUE)</li> <li>Customize IR remote to 0.14</li> </ul> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#sound-reactive-experimental-settings","title":"Sound reactive experimental settings","text":"<p>17 March 2023</p> <p></p> <ul> <li>MicLevel: a new idea how to prevent intermediate \"dropouts\" when playing music. Its not perfect, but will stabilize effects. The idea (picture below) is to \"freeze\" the level threshold (red line) at the first volume \"dropdown\". After freezing, the Volume signal will have a stable \"baseline\". Freezing is unlocked after 8 seconds of silence. Freeze makes a huge difference on GEQ (surprised). Made it a lot more \"stable</li> </ul> <p></p> <ul> <li> <p>FreqDist: set to rightshift to move the frequency bands a bit to the right in case most activity is on the left side.</p> </li> <li> <p>FreqRMS: set to \"on\" to activate a different method for averaging higher frequencies, called \"RMS\" - it preserves peaks better. Downside: could lead to \"overshooting\" in GEQ, as our mic profiles are not adjusted to it yet.</p> </li> </ul>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#file-system-in-settings-menu","title":"File System in settings menu","text":"<p>17 March 2023</p> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#geq-smooth-bars","title":"GEQ Smooth Bars","text":"<p>7 March 2023</p> <p>New option to the GEQ effect: smooth bars. It's intended for matrices with &gt;24 columns, where you would see a \"staircase\" effect because we only have 16 frequency channels. With the new option enabled, it looks like more channels are availeable and stairs are smoothed out.</p> <p></p> <p>and also smooth colors:</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#ledmap-properties","title":"Ledmap properties","text":"<p>1 March 2023</p> <p></p> <p>See Advanced/Mapping/0.14 MM</p> <p>Example: Ring Map</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#aditional-info-in-info-tab","title":"Aditional info in info tab","text":"<p>27 Februari 2023</p> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#manage-netdebug-netprint-in-settings","title":"Manage NetDebug / NetPrint in settings","text":"<p>24 Februari 2023</p> <p>NetDebug is called NetPrint in WLEDMM as it is not only used for debut as we have USER_PRINT. It just prints to the network, hence the name.</p> <p>No need to specify ip address and port in platformio.ini and therefor hardcode in bin/esp32 (but can be set to default). Go to Sync Interfaces / Net Print and specify there. Set output to network pressing Net Print in the info tab (default off after reboot value is saved in cfg.json - bug: not always set correctly after reboot - wip).</p> <p></p> <p></p> <p>Bins WLEDMM_0.14.0-b2.19_esp32_4MB_M_debug and WLEDMM_0.14.0-b2.19_esp32_16MB_M_debug have NetPrint enabled by default. To do: check if NetPrint can be enabled in all bins (without performance/network consequences), also when WLED_DEBUG is off to catch Serial output.</p> <p>March 8: All _M and _XL bins have NetPrint enabled by default (but not WLED_DEBUG): User info (using USER_PRINT) can be send to network </p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#2d-ledmaps","title":"2D Ledmaps","text":"<ul> <li>segment names</li> <li>default ledmaps</li> <li>show in segments</li> <li>persistant storage</li> <li>No reboot necessary if upload new ledmaps</li> </ul>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#segment-visualization","title":"Segment visualization","text":"<ul> <li>support mirror, reverse, transpose</li> <li>support grouping and spacing</li> <li>multi segment support</li> </ul>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#2d-setup-basic-and-advanced","title":"2D setup: basic and advanced","text":""},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#2d-setup-panel-visualization","title":"2D setup: Panel visualization","text":"<ul> <li>Reset segments only bounds, keep effect etc.</li> </ul>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#gradient-random-cycle-palette","title":"Gradient Random cycle palette","text":"<p>The first one will change colors smoothly, the second one will change colors every 5 seconds.</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#pins","title":"Pins","text":"<ul> <li>default pins -1</li> <li>Analog pins in dropdown</li> <li>D0-D8, RX, TX info in dropdowns</li> <li>Any gpio on 8266</li> </ul>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#audio-reactive-optimizations","title":"Audio reactive optimizations","text":""},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#generate-presets","title":"Generate presets","text":""},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#pin-drop-downs-support-read-only-and-reserved-pins","title":"Pin drop downs support read only and reserved pins","text":"<p>January 14, 2023</p> <p></p> <p>For more information see https://mm.kno.wled.ge/usermods/globalpins/ This page is shown if you press here: </p> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#generate-presets-and-playlists","title":"Generate presets and playlists","text":"<p>January 12, 2023</p> <p>Generate presets of all effects and group them together in playlists for 1D or 2D, Volume or FFT, combinations or all</p> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b15/#i2c-and-spi-pins-make-over","title":"I2C and SPI pins make over","text":"<p>Januari 9, 2023</p> <p>We were not happy how currently pins are managed. It raises questions in discord we could not answer so we decided to refactor it. It's not easy as a lot is interconnected but we made the first steps:</p> <ul> <li>Drop down for pin variables (see below)</li> <li>Rebuild the usermods (pins) settings screen so it works the same</li> <li>create _all bin files with a lot of usermods in it so we can test and improve</li> <li>do not reset ui variables if something is wrong (e.g. 4ld/type, enabled)</li> <li>use errorMessage instead and show errormessage in settings ui</li> <li>if global pins are -1, then there is no initialization of spi/i2c if usermods set pins to use global no initialisation</li> <li>HLD_PIN_* variables are used in platformio to specify defaults for global pins, no use of the recent introduced new variables I2CSDAPIN (etc) as causes more confusion, HLD_PIN serve these function and is used instead, </li> <li>HW_PIN_DATASPI and HW_PIN_MOSISPI both existed but is one pin, merged to HW_PIN_MOSISPI as MOSI and MISO is both data</li> <li>i2c_scl (etc) variables are used in usermods without if -1 then HLD_PIN check, i2c_scl (etc) most be proper initialized before it can be used.</li> <li>No hijacking of global vars (giving them a value) in usermods </li> <li>Don't register pins if usermod is not enabled</li> <li>create pinManager.joinWire and use as simplified way in usermods</li> </ul> <p>This will be work in progress the coming weeks to implement in usermods (AudioReactive and 4LD working, others likely working but must be tested)</p> <p>Overview of usermods available in _all bins:</p> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/","title":"Release notes v0.14.0-b25","text":"<p>MoonModules v0.14.0-b25, release July 15th 2023</p> <p>This WLED MM release is based on latest stable dev of WLED AC (June 2, 2023). We have also added a few stability patches that arrived in WLED AC after June 2nd.  As WLED AC is undergoing a lot of changes, MoonModules built in a longer delay then normal to keep up with upstream until latest upstream is well tested.</p> <p>Below an overview of major MoonModules specific changes and new features.</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#full-bright-preview","title":"Full Bright Preview","text":"<p>7 July 2023</p> <p>By @Softhack007</p> <p>Instead of dimming down, the preview always shows at max brightness - even when the global brightness slider for your LEDs is set to a low value. </p> <p> </p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#animartrix-usermod-2d-effects","title":"AnimARTrix Usermod - 2D effects","text":"<p>29 Jun 2023</p> <p>By @Netmindz</p> <p>Usermod to allow access to the AnimARTrix 2D effects by @StefanPetrick, all the effect names are prefixed with Y to group them at the bottom of the list. Animation speed can be controled by slider.</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#wled-instances","title":"WLED Instances","text":"<p>May 2023</p> <p>Refactor of the Nodes popup</p> <p></p> <ul> <li>Set on/off</li> <li>Show more info of instance</li> <li>DDP all: add all found nodes as Led outputs (see led preferences screen), by this the leds of others nodes as added as leds to your node and you can control them from this one node. Note: Might not scale up to 10's of nodes due to network traffic </li> </ul>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#under-the-hood-speedups-bugfixes-and-improved-stability","title":"Under-the-hood: Speedups, Bugfixes and improved Stability","text":""},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#effect-core-speedups","title":"Effect core speedups","text":"<p>1 July 2023 (audio fastpath, part 1)</p> <p>Some effects will run up to 60% faster now. A lot of minor speedups to effect core routines were added. Additionally, FastLED color handling code was updated to release 3.6.0.</p> <ul> <li>up to 220 FPS were measured with 160 LEDs per pin; for max speed, use 2-4 LED pins with your fixture (ws2812b), each driving 150-300 LEDs.</li> <li>soundreactive effects were optimized to support high FPS.</li> <li>At high FPS (&gt;100), soundreactive effects seem to \"flow\" with the music now. Try to set the speed slider to 255 in <code>pixelwave</code>, <code>freqmatrix</code> or <code>DJ Light</code>.</li> </ul> <p> </p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#auto-brightness-limiter-works-again","title":"Auto Brightness Limiter works again","text":"<p>30 June 2023</p> <p>By @Softhack007</p> <p>Auto Brightness Limiter bugfixes (from WLED AC) are included in this release. </p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#improved-stability","title":"Improved Stability","text":"<p>1 June 2023</p> <p>By @Troy and @Softhack007 and @ewowi</p> <p>WLEDMM internal memory handling was optimized and improved for reliability. Loading of ledmaps was optimized to prevent repeated reading of the same file. As a consequence, large setups (&gt;2500 LEDs) and big ledmaps.json files will work much better. We recommend using an ESP32 board with PSRAM for large setups, as JSON files will be processed in external PSRAM if available (PSRAM  enabled firmware build needed).</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#peak-unlimited","title":"Peak unlimited","text":"<p>May 16</p> <p>by @ewowi</p> <p>Instead of scaling down on pixels when having lots of leds we lower the peak frame rate so we have WYPIWYG (what you peak is what you get)</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#audio-palette-updates","title":"Audio Palette Updates","text":"<p>14 April 2023</p> <p>By @Netmindz</p> <p>Fix issues with Audio Responsive Hue being single color and add new Audio Responsive Ramp palette. AR Ramp is designed for use with effects like Fire that expect the palette to start with black, then ramp up</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#soundpressure","title":"SoundPressure","text":"<p>7 April 2023</p> <p>By @Softhack007</p> <p> </p> <p>In contrast to \"volume\", sound pressure level changes with the real loudness, as measured by your microphone. It will climb when you turn music louder, and fall when you turn volume down. You need an I2S digital microphone for soundpressure. </p> <p>ARTI-FX, and the Waverly and Gravimeter effects already support sound pressure. More effects to come. Currently SoundPressure is not transmitted to networked devices with \"UDP sound sync\".</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#dmx-input","title":"DMX Input","text":"<p>6 April 2023</p> <p>By @Netmindz</p> <p>Do you have existing tranditional wired DMX setup and just want to attach you WLED device like any other fixture? Well now you can. Same behaviour as existing DMX over ip (ArtNet / e1.31), but now with the stability and realiability without the need to use Ethernet.</p> <p>Note: only currently on the _v4 builds due the esp_dmx library needing the 2.x ESP32-Arduino platform</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#support-for-pixelart-in-arti-fx","title":"Support for pixelArt in ARTI-FX","text":"<p>5 April 2023</p> <p>Idea by @Stiw47</p> <p>ARTI-FX can show multiple frames, each stored as a separate json file in /edit <p>Program can be found here: https://github.com/MoonModules/WLED-Effects/blob/master/ARTIFX/wled/mario.wled</p> <p></p> <p>As ARTIFX does not support strings, jsonToPixels only contains a sequence number, the name of the json files is combination of segment name (that should be called mario), sequence number and \".json\") See https://github.com/MoonModules/WLED-Effects/blob/master/ARTIFX/wled/presets.json for how to add mario in presets </p> <p>And don't forget to upload latest wledv033.json to /edit (https://github.com/MoonModules/WLED-Effects/blob/master/ARTIFX/wled/wledv033.json)"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#add-es8388-as-sound-reactive-input-type","title":"Add ES8388 as Sound Reactive Input type","text":"<p>5 April 2023</p> <p>By @Troy and @Netmindz</p> <p></p> <p>Can be found in these boards: LyraT v4.3</p> <p></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b25/#git-log","title":"Git Log","text":"<p>git log mdev --pretty=format:\"%h - %ad - %an : %s &amp;b\" --date=format-local:\"%Y-%m-%d\" --since=\"2023-04-02\"</p> <pre><code>c0a0f66a - 2023-04-30 - Frank : trying to revive github ci build for new MCUs (#38) as suggested here:\n* https://github.com/platformio/platform-espressif32/issues/1081#issuecomment-1518601054\n\n62910038 - 2023-04-28 - netmindz : Merge pull request #37 from netmindz/mdev Update FX.cpp\n\nd4bdb303 - 2023-04-24 - netmindz : Update FX.cpp Assign proper attribution of DJLight to Stefan Petrick\n\n  fb3477e5 - 2023-04-21 - Frank : soundreactive effect updated \n* blurz: some visual improvements\n* Matripix: improved color smoothness, Color by frequency (instead of volume), option to use sound pressure\n* pixelwave: improved color selection, use sound energy instead of volume\n* freqwave: some speedups, option to show frequency with \"musical scale\"\n* gravfreq: fixed some math accidents that lead to horrible flickering\n* default setting improved for some effects\n\nd5a7f5dd - 2023-04-21 - Frank : scrolling text bugfix effect was crashing with too long or undefined segment names.\n\n8e9db0ad - 2023-04-21 - Frank : more accurate FPS forESP32 the standard millis() code is very inaccurate in the \"high FPS\" ranges. This replaces it with the esp32 high resolution timer.\n\n9130e4be - 2023-04-21 - Frank : minor optimization of core LED functions \n* use _fast_ integer types in loops - in contrast to \"uint16_t\" etc, the compiler can leave out range/overflow corrections, so it might run faster.\n* fcn_declare.h: revive \"WLED_USE_REAL_MATH\" option, which can be a bit faster on ESP32.\n\n36356743 - 2023-04-21 - Frank : audio effects: allow to run at full speed \n* set the \"speed\" slider to 255, for running at full speed\n* #FPS (framerate) and #POW (ampere) added to scrolling text\n\n00661de7 - 2023-04-21 - Frank : accept up to 250 fps target in LED preferences warning included.\n\n63a597b9 - 2023-04-20 - Frank : pio: same for -S3 ..... \nTool Manager: toolchain-xtensa-esp32s3@8.4.0+2021r2-patch3 has been installed!\nTool Manager: Installing espressif/toolchain-riscv32-esp @ 8.4.0+2021r2-patch3\nError: Could not find the package with 'espressif/toolchain-riscv32-esp @ 8.4.0+2021r2-patch3' requirements for your system 'linux_x86_64'\nError: Process completed with exit code 1.\n\nb35cd214 - 2023-04-20 - Frank : pio: disable -C3 and -S2 builds until github fixes their build toolds \nTool Manager: toolchain-xtensa-esp32s2@8.4.0+2021r2-patch3 has been installed!\nTool Manager: Installing espressif/toolchain-riscv32-esp @ 8.4.0+2021r2-patch3\nError: Could not find the package with 'espressif/toolchain-riscv32-esp @ 8.4.0+2021r2-patch3' requirements for your system 'linux_x86_64'\n\n33a78bef - 2023-04-20 - Frank : a little less buffer for -S2 the last change caused a build error for ESP32-S2: region `dram0_0_seg' overflowed by 5064 bytes\n\n1b3d9a1a - 2023-04-20 - Frank : more JSON buffer for boards with PSRAM allows to load ledmaps with &gt; 15000 positions!\n\nbcbc0fbd - 2023-04-19 - Frank : Update platformio.ini \n* temporarily remove esp32c3dev_4MB_M from nightly builds, as the github action build currently has strange problems with it\n* -D WLED_USE_PSRAM_JSON for ESP32 boards, as using PSRAM for LED Buffers and Segment Buffers causes slow-down\nd90ee766 - 2023-04-19 - Frank : PSRAM: you can have it, and eat it or not eat it *This patch allows to compile with BOARD_HAS_PSRAM, but not set WLED_USE_PSRAM - reserved pins will be protected, and PSRAM usage will be shown in info.\n* if you add `-D WLED_USE_PSRAM_JSON` then PSRAM will be used for some JSON buffers, but not for LEDs and Segments.\n\ne2d3800f - 2023-04-19 - Frank : woraround for spurious crash in serializePalettes the root cause of the crash is not really clear, as the problem seems to occur randomly, mosr frequent with fresh installations.\nThis workaround prevents the array bounds violation, by re-using the last valid  gGradientPalettes entry.\n\na2f15c77 - 2023-04-19 - Frank : WIFI_POWERON_HACK for AP mode reduce TX power - required for C3 mini v1.0.0 (wemos), see https://www.wemos.cc/en/latest/c3/c3_mini_1_0_0.html#about-wifi\n\n0558865c - 2023-04-18 - Troy : Merge pull request #36 from Fonta/patch-1 Fix invalid environment error in PlatformIO\n\n2e118938 - 2023-04-18 - Troy : Merge pull request #35 from troyhacks/DDP-RGBW-Transmit-Fix DDP Transmit RGBW Fix\n\n8d85a524 - 2023-04-17 - Frank : correct some stupid peak detection defaults parameters C1 and C2 control peak detection. Previous defaults (c2=0 !!!) did not make any sense.\n\n3f429439 - 2023-04-17 - Frank : Blurz effect: back to original SR code \nModifications from upstream have made the effect kind of boring non-reactive. So we go back to the original effect.\nHINT: Effect looks best with _segment_ brightness set to max (use _global_ brightness to reduce brightness as you like).\n\n45da3121 - 2023-04-16 - Fonta : Update platformio.ini \n\n6b6c961a - 2023-04-16 - Fonta : Fix invalid environment error in PlatformIO PlatformIO gives error on codm environments\n``Error: Invalid environment name 'codm-controller-0.6'. The name can contain alphanumeric, underscore, and hyphen characters (a-z, 0-9, -, _)``\n\n28c737df - 2023-04-15 - Frank : small fix Serial0 does not exist without ARDUINO_USB_CDC_ON_BOOT\n\n0fd26cc7 - 2023-04-15 - Frank : replace AC WebServer with lost-hope variant temporarily replace the webserver with a   modified one that can also show .wled and .log files under /edit.\n\n2585b785 - 2023-04-15 - Frank : remove duplictate dependancies  (AsyncTCP 1.1.1) \n* moving \"pbolduc/AsyncTCP.git @ 1.2.0\" on top of lib_deps, to prevent that AsyncTCP 1.1.1 is pulled in (due due dependacies from Aircoookie/ESPAsyncWebServer\n* remove duplicate env.lib_deps from -S2 environments\n\nc295c877 - 2023-04-15 - Frank : moving esp_dmx lib into esp32_4MB_V4_S_base the idea is to keep enable flag and library in the same build env.\n\n244a6137 - 2023-04-15 - Frank : esp32_4MB_V4_M: stay below 100% flash usage \n\n322ab9c5 - 2023-04-15 - Frank : arti-fx error handling improvements \n- if log file cannot be created, switch to serial logging\n- fixing a broken format string\n- usermod_arti: avoid to copy more than what fits into the buffer\n\nb7f1373e - 2023-04-14 - TroyHacks : DDP Transmit RGBW Fix \n\n4294f601 - 2023-04-14 - Frank : npm run build \ncc9a19bc - 2023-04-14 - Frank : partial merge of upstream/main \n* leaving out DotStarHspi5MhzMethod, as we are still on NPB 2.6.9 for eth boards\n* leaving out the index.css/index.css changes, as I'm not sure how to merge this.\n@ewoudwijma we need to merge the JS and CSS parts when you are back; I'll stay with our MM version for now.\n\nee23827f - 2023-04-14 - netmindz : Merge pull request #16 from netmindz/audio-palette-updates Audio palette updates\n\ncc25a21b - 2023-04-14 - Will Tatam : Merge branch 'mdev' into audio-palette-updates \n\n05c3e569 - 2023-04-14 - Frank : optional: warn about functions with high stack usage \n\n3e2a6848 - 2023-04-14 - Frank : arti  setup(): attempt to fix memory leak \n- check that programName is not too long (fileNameLength-7 is the limit)\n- try to fix a memory leak, as programText must be free'd in case of error.\n@ewoudwijma please review my changes, I'm not 100% sure I did it right.\n\n10ca7c83 - 2023-04-14 - Frank : enumerateLedmaps: prevent buffer overflow make sure that bounds of char fileName[33] are not exceeded by sprintf.\n\n5f4dd53b - 2023-04-14 - Frank : V4 target: enable warning for variable shadoing \n* pio.ini: add \"-Wshadow=compatible-local\" for V4 targets\n* pio.ini: fix alignment for 8266 build_flags\n* fix one (harmless) case of shadowed vars in MM specific code\n\ndb62153e - 2023-04-13 - Frank : fix for a potential array overrun unguarded sprintf / strcpy are always a risk.\n\n122f54a2 - 2023-04-13 - Frank : prevent heat-up on tiny -C3 boards \n* reduce LED default brightness\n* unset \"disable wifi sleep\" when WLEDMM_WIFI_POWERON_HACK\n\n94a7f562 - 2023-04-13 - Frank : handling of Serial on CDC USB board ... like the typical -C3\n* Replaced a few direct Serial.printf with macros\n* Always check if Serial is connected before printing (CDC sometimes hangs  when trying to send/receive without connection)\n\n0081122f - 2023-04-13 - Frank : buildenv improvement for -C3 \n* IRremoteESP8266 @ ~2.8.2\n* -D WLED_DISABLE_ADALIGHT (as most devices don't have a serial-to-USB chip)\n\na193aabd - 2023-04-13 - Frank : Merge pull request #34 from troyhacks/2023-04-12-Art-Net_Transmit_Repair_Bad_Optimization \n\"Unfixing\" an optimization to the Art-Net header.\nThe local \"buffer\" was shadowing the LED buffer (function parameter), so art-net would only send out headers but no LEDs.\n2e0d1046 - 2023-04-13 - Frank : some cleanups and updates for -C3 * remove duplicate env.lib_deps\n* use NeoPixelBus @ 2.7.3\n* added board_build.flash_mode\n\n0afad594 - 2023-04-13 - Frank : MM style buildenv for seeedxiao -C3 \n\n40e614cb - 2023-04-13 - Frank : ups double platform_packages line removed\n\ne9719900 - 2023-04-13 - Frank : pio: added esp32.platformV4_new = espressif32 @ ~5.2.0 \n\n0ae004ff - 2023-04-13 - Frank : buildenv fix: avoid NeoPixelBus 2.7.4 it seems that NPB 2.7.4 introduces new incompatibilities with WLED, that break gh action builds.\n\ndeb09c28 - 2023-04-13 - TroyHacks : Unmessing an optimization to the header - which caused the header to be sent over and over. \n\n04fa3995 - 2023-04-11 - Frank : soundsim bugfix FFT_MajorPeak simulated value was too small.\n\na1bdb47c - 2023-04-10 - Frank : trying to make sound pressure less boring for line-in \"sound pressure\" for line-in was always close to max - which is expected, because the ADC chip utilize the full 24/16bit sample range.\nThe new calculation leads to some more \"movement\".\n\n25122f98 - 2023-04-10 - Frank : temporary disable DMX input on -C3 and -S2 \n\n8ba43b63 - 2023-04-10 - Frank : Sound pressure: modified correction factors for PDM and analog \n\n61949cfd - 2023-04-10 - Frank : Sound Pressure \n- some optimizations \n- slightly extend input range\n- add correction factors for some sound sources\n- gravimeter: tweaking\n\n822fcf27 - 2023-04-08 - Ewoud : ARTI-FX change .wled.log to .log \n\n79c67122 - 2023-04-08 - Will Tatam : Enable WLED_ENABLE_DMX_INPUT again, now we reference a preditacble tag not branch \n\neb3ad99b - 2023-04-08 - Will Tatam : Use taged version of esp_dmx \n\n343252f6 - 2023-04-08 - Will Tatam : Use taged version of esp_dmx \n\n876b08e3 - 2023-04-08 - Ewoud : Temporary disable WLED_ENABLE_DMX_INPUT in esp32_4MB_V4_S_base \n\nca9bd227 - 2023-04-08 - Ewoud : Merge remote-tracking branch 'upstream/main' into mdev Everything merged except platformio.ini\n4ld has not been merged previously\nUpdate version to 0.14.0-b15.22\n\n212126b0 - 2023-04-07 - Ewoud : esp8266_4MB_M: usermods maches max usermods, add net print,set flashsize \n\na6e2cf0b - 2023-04-07 - Ewoud : ARTI-FX: Fix printing to USER_PRINT (if !logToFile) \n\n4aea3970 - 2023-04-07 - Ewoud : ARTI-FX support 8266 (experimental!!) add soundpressure Add ARTI-FX to esp8266_4MB_M (experimental!)\n\n20a91454 - 2023-04-06 - Ewoud : Post marge: regenerate html_settings \n\n6ef2857d - 2023-04-06 - MoonModules : Merge pull request #28 from netmindz/DMX-Input-esp_dmx Dmx input esp dmx\n\n7ffe25d5 - 2023-04-06 - MoonModules : Merge branch 'mdev' into DMX-Input-esp_dmx \n\n6cce70b2 - 2023-04-06 - Frank : gravimeter and waverly: option to show sound pressure level \n* adjusted gravimeter and waverly effects so that \"Sound Pressure\" can be used instead of volume\n* some improvements to gravimeter effect\n* fixing some over/underflows in gravimeter\n* waverly: option \"No Clouds\" to only show lower part\n\n197e120e - 2023-04-06 - Frank : estimated audio sound pressure \n\nb0907762 - 2023-04-06 - Frank : low-cut audio input filtering \n* 40Hz low-cut and DC blocker filter - will remove any signal offsets and also removes rumbling noise up to 12db\n* DC blocker set as default for all sources (prerequisite for later measuring sound pressure)\nadditional filtering options are in the making :-)\n\n00e9c592 - 2023-04-06 - MoonModules : Update readme.md \n\na77900b0 - 2023-04-06 - MoonModules : Update readme.md \n\n669b81de - 2023-04-06 - MoonModules : Update readme.md \n\n753f5621 - 2023-04-06 - Ewoud : ws sendLiveLedsWs: no skiplines to show large matrices uncompressed \n\n7372d304 - 2023-04-05 - MoonModules : Update FUNDING.yml \n\n64041836 - 2023-04-05 - Ewoud : Merge pull request #30 from troyhacks/ES8388-init-fixes ES8388 init optimizations and fixes\n\n95d6d186 - 2023-04-05 - TroyHacks : ES8388 init optimizations and fixes \n\nd64cefb2 - 2023-04-05 - Will Tatam : Fix invert of tx and rx pins \n\ncae1c004 - 2023-04-05 - Ewoud : ARTIFX add support for pixelart + small changes arti_wled.h:\n\ne4243c4d - 2023-04-05 - Ewoud : Merge pull request #5 from netmindz/ES8388 WiP - ES8388\n\n84f316cd - 2023-04-04 - netmindz : Merge pull request #1 from troyhacks/ES8388-troyhacks Working proof of concept for ES8388\n\n111c8c92 - 2023-04-04 - TroyHacks : Merge branch 'ES8388-troyhacks' of https://github.com/troyhacks/WLED into ES8388-troyhacks \n\nf44f307f - 2023-04-04 - TroyHacks : Comments and typos, init optimization and shortening. \n\n7d32bc5f - 2023-04-04 - Troy : Merge branch 'ES8388' into ES8388-troyhacks \n\na6a1bbab - 2023-04-04 - TroyHacks : Remove platform.ini entry for ES8388 \n\nc38baf90 - 2023-04-04 - TroyHacks : Removing local lib copy \n\nd775f7fb - 2023-04-04 - TroyHacks : Removed reliance on the ES8388 library and made things more in line with similar boards with I2C init. \n\n4997145d - 2023-04-04 - Ewoud : Fastled usermod, add Stefan Petrick effects PolarBasics &amp; CircularBlobs CC BY-NC 3.0 licensed effects only include this usermod only if you accept the terms!\nTherefore not enabled in platformio.ini builds.\n\nbd477624 - 2023-04-04 - TroyHacks : Working proof of concept for ES8388 \n\n03570848 - 2023-04-03 - Will Tatam : Merge branch 'mdev' into ES8388 \n\n760ff836 - 2023-04-03 - Will Tatam : Merge branch 'mdev' into ES8388 \n\nd17a41f7 - 2023-04-02 - Bla\u017e Kristan : Merge pull request #3155 from werkstrom/patch-1 Adjustments to Pixel Art Converter\n\n503f71f0 - 2023-04-02 - Blaz Kristan : Npm run build \n\n329899f4 - 2023-04-02 - Ewoud : ooops \n\n3dd78731 - 2023-04-02 - Ewoud : First b15 daily build: add fastled usermod \n\n9307105b - 2023-04-02 - Henrik : Redone in Patch-1 \n\n27e89151 - 2023-04-02 - Ewoud : Versioning: 0.14.0-b15 (use the .21 extension on future commits) \n\n567daf99 - 2023-04-02 - Henrik : Merge branch 'Aircoookie:main' into patch-1 \n\neead626d - 2023-04-02 - Ewoud : 0.14.0-b15.21 release! \n</code></pre>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b3-daily/","title":"Release notes v0.14.0-b3-daily","text":"<p>tha --- title: Release notes v0.14.0-b3-daily hide:   # - navigation   # - toc</p> <p>Below are the ongoing updates in WLEDMM which has not made it to a release yet (Next release will be v0.14.0-b2)</p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b3-daily/#some-_s-builds-are-optimized-for-speed","title":"Some <code>_S</code> builds are optimized for speed","text":"<p>July 21st, 2023</p> <p>By @Softhack007</p> <p>Some MoonModules builds are now utilizing compiler option -O2 \"optimize for speed\", instead of -Os \"optimize for size\".</p> <p>As the firmware size grows with this option, only a few <code>_S</code> firmware binaries for esp32 are currently build with this higher optimization level:</p> <ul> <li><code>esp32_4MB_S</code> (flash usage 87.4% --&gt; 98.8%)</li> <li><code>esp32_16MB_V4_S</code> (flash usage 73.3% --&gt; 82.9%)</li> <li><code>esp32_16MB_S</code> (includes animartix)</li> <li><code>esp32S3_8MB_S</code> for -S3 (up to 45% faster than normal build!)</li> </ul> <p>First tests show 20%-35% higher FPS (framerates) in effects!</p> <p>Known issue: USERMOD_ANIMARTRIX aborts with internal compiler error when building with <code>-O2</code>: <pre><code>wled00/../usermods/usermod_v2_animartrix/usermod_v2_animartrix.h: In function 'uint16_t mode_Waves()':\nwled00/../usermods/usermod_v2_animartrix/usermod_v2_animartrix.h:340:1: error: insn does not satisfy its constraints:\n }\n ^\n (insn 811 738 824 24 (set (reg/v:SF 19 f0 [orig:69 result ] [69])\n        (mem/u/c:SF (symbol_ref/u:SI (\"*.LC1575\") [flags 0x2]) [0  S4 A32])) \".pio/libdeps/my_esp32_16MB_V4_S_debug/animartrix/ANIMartRIX.h\":345 47 {movsf_internal}\n     (nil))\n during RTL pass: postreload\n wled00/../usermods/usermod_v2_animartrix/usermod_v2_animartrix.h:340:1: internal compiler error: in extract_constrain_insn, at recog.c:2210\n libbacktrace could not find executable to open\n Please submit a full bug report, with preprocessed source if appropriate. See &lt;https://gcc.gnu.org/bugs/&gt; for instructions.\n</code></pre></p>"},{"location":"archive/moonmodules/release-notes-v0.14.0-b3-daily/#topic","title":"Topic","text":"<p>Date</p> <p>By @Netmindz</p>"},{"location":"archive/moonmodules/what-is-moonmodules/","title":"What is MoonModules","text":""},{"location":"archive/moonmodules/what-is-moonmodules/#what-are-all-these-acronyms","title":"What are all these acronyms?","text":"<p>WLED MM 0.14 (\ud83c\udf1c) = WLED AC 0.14 + Extra features</p> <p>WLED AC 0.14 = (WLED AC 0.13 + WLED SR)(2.0). </p> <p>WLED SR (\ud83c\udfb8) is for the last 2 years maintained mainly by @softhack007 and @ewowi and has been created by the legendary Andrew Tuline (\ud83c\udfb8).</p> <p>WLED AC 0.14 has been made mainly by @Aircoookie , @blazoncek , @softhack007 and @ewowi. </p> <p>WLED MM is mainly maintained by @softhack007 and @ewowi and can be considered similar to what AMG is doing to Mercedes (see amg.wled.me).</p>"},{"location":"archive/moonmodules/what-is-moonmodules/#compatibility","title":"compatibility","text":"<p>WLED MM is compatible with WLED AC (it's running on average 1 day to 1 week behind WLED AC latest build) for all features that can also be found in WLED AC. </p> <p>Consider WLED MM as a possible next version of WLED AC (we submit PR's on a regular basis). </p>"},{"location":"archive/moonmodules/what-is-moonmodules/#why","title":"why?","text":"<p>The reason WLED MM is created is that we have many ideas how to improve WLED AC but we need a \"playground\" to develop and mature those ideas. </p> <p>WLED MM releases and daily builds are made to deploy - and are deployed - on live situations, not test bench only. Many features added to MM came from live situation feedback. Although new builds may have errors, in practice they tend to be better then earlier versions. </p>"},{"location":"archive/moonmodules/what-is-moonmodules/#whats-new","title":"What's new?","text":"<p>Our latest work can be found here: mdev. </p> <p>You can compile it yourself using PlatformIO.ini entry esp32_4MB_max or get a build from Serg74 (daily) or Wladi (periodically). </p> <p>Get latest release here: https://github.com/MoonModules/WLED/releases</p>"},{"location":"archive/moonmodules/what-is-moonmodules/#more-info","title":"More info:","text":"<ul> <li> <p>Release notes v0.14.0-b3-daily</p> </li> <li> <p>Release notes v0.14.0-b25</p> </li> <li> <p>Release notes v0.14.0-b15</p> </li> <li> <p>Release notes v0.14.0-b1</p> </li> <li> <p>Release notes v0.14.0-b0</p> </li> <li> <p>Installing and compiling</p> </li> <li> <p>Fork comparison</p> </li> </ul> <p>WLED AC:</p> <p></p> <p>WLED MM:</p> <p></p> <p>WLED SR:</p> <p></p> <p>The Future ???</p> <p></p>"},{"location":"archive/moonmodules/wip/","title":"Work in Progress","text":"<p>This page is work in progress</p> <p>Check WLED MoonModules Wiki for original content</p> <p>Template text:</p>"},{"location":"archive/moonmodules/wip/#fork-specific-info","title":"Fork specific info","text":""},{"location":"archive/moonmodules/wip/#wled-sr","title":"WLED SR","text":""}]}